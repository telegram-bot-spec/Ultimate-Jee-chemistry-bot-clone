"""
ULTIMATE_INTEGRATED.py - COMPLETE PHASE 1 + PHASE 2
All Features: Text Queries, Feedback, Dark Mode, Admin Tools, Visualization, Mock Tests, Predictors

Author: @aryansmilezzz
Admin ID: 6298922725
Version: Phase 1 + Phase 2 Complete
"""

import os
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from io import BytesIO
from PIL import Image, ImageEnhance
from datetime import datetime
from weasyprint import HTML
from jinja2 import Template
import re
import base64
import httpx
import aiohttp
import json
import logging
import time
from collections import defaultdict

# ============================================================================
# PHASE 1 IMPORTS
# ============================================================================
from phase1_features import (
    handle_text_query,
    handle_detailed_request,
    collect_feedback_comment,
    get_user_preference,
    set_user_preference,
    DARK_MODE_CSS,
    request_feedback,
    ask_pdf_mode
)

from phase1_admin import (
    ADMIN_ID,
    ADMIN_USERNAME,
    track_new_user,
    track_problem_solved,
    track_text_query,
    track_feedback,
    detect_spam,
    is_banned,
    check_maintenance,
    notify_new_user,
    notify_problem_solved,
    notify_text_query,
    notify_feedback,
    notify_spam_detected,
    notify_error,
    admin_ban_command,
    admin_unban_command,
    admin_stats_command,
    admin_maintenance_command,
    admin_broadcast_command,
    admin_users_command,
    admin_warn_command,
    admin_ignore_command,
    admin_help_command,
    all_users,
    total_problems_solved,
    bot_start_time,
    user_message_history
)

# ============================================================================
# PHASE 2 IMPORTS
# ============================================================================
from phase2_visualizer import (
    visualize_molecule_command,
    visualize_concept_map_command
)

from phase2_features import (
    hint_command as phase2_hint,
    flashcard_command as phase2_flashcard,
    theme_command as phase2_theme,
    handle_hint_next,
    handle_hint_stop,
    handle_hint_reset,
    handle_flashcard_topic,
    handle_theme_selection
)

from phase2_exam import (
    mock_test_command,
    start_mock_test_config,
    handle_question_count,
    handle_time_limit,
    handle_difficulty_selection,
    handle_answer,
    active_mock_tests
)

from phase2_predictors import (
    difficulty_command as phase2_difficulty,
    pka_command,
    jee_frequency_command,
    analyze_difficulty_text,
    analyze_pka_text,
    analyze_jee_frequency_text
)

nest_asyncio.apply()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ============================================================================
# CONFIGURATION
# ============================================================================

BOT_TOKEN = os.environ.get('BOT_TOKEN')

GEMINI_API_KEYS = [
    os.environ.get('GEMINI_KEY_1'),
    os.environ.get('GEMINI_KEY_2'),
    os.environ.get('GEMINI_KEY_3'),
    os.environ.get('GEMINI_KEY_4'),
    os.environ.get('GEMINI_KEY_5'),
]

GEMINI_API_KEYS = [key for key in GEMINI_API_KEYS if key]

if not BOT_TOKEN:
    raise ValueError("❌ BOT_TOKEN not set!")
if not GEMINI_API_KEYS:
    raise ValueError("❌ No GEMINI keys!")

logger.info(f"✅ Loaded {len(GEMINI_API_KEYS)} API keys")

current_key_index = 0
CHEMISTRY_CACHE_FILE = "/app/data/chemistry_knowledge_cache.json" if os.path.exists("/app/data") else "chemistry_knowledge_cache.json"
chemistry_knowledge_base = {}

# Donate QR (Full base64 from File 3)
DONATE_QR_BASE64 = "/9j/4QFARXhpZgAATU0AKgAAAAgABQEAAAMAAAABAxQAAAEBAAMAAAABAt0AAAExAAIAAAAhAAAASodpAAQAAAABAAAAawESAAQAAAABAAAAAAAAAABBbmRyb2lkIENQSDI0NjdfMTQuMC4wLjcwMChFWDAxKQAABZADAAIAAAAUAAAArZKRAAIAAAAEMzExAKQgAAIAAAAlAAAAwZARAAIAAAAHAAAA5pIIAAQAAAABAAAAAAAAAAAyMDI1OjEwOjI2IDEwOjI2OjQyAGE2Y2I4OGJiLTQ5NWYtNGY3Mi05ODYyLTRiZDA3ZWZhMGNjYQArMDU6MzAAAAMBAAADAAAAAQMUAAABMQACAAAAIQAAARcBAQADAAAAAQLdAAAAAAAAQW5kcm9pZCBDUEgyNDY3XzE0LjAuMC43MDAoRVgwMSkA/+AAEEpGSUYAAQEAAAEAAQAA/+ICBElDQ19QUk9GSUxFAAEBAAAB9GFwcGwEAAAAbW50clJHQiBYWVogB+IABgAYAA0AFgAgYWNzcEFQUEwAAAAAT1BQTwAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1hcHBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJZGVzYwAAAPAAAABoY3BydAAAAVgAAAAkd3RwdAAAAXwAAAAUclhZWgAAAZAAAAAUZ1hZWgAAAaQAAAAUYlhZWgAAAbgAAAAUclRSQwAAAcwAAAAoZ1RSQwAAAcwAAAAoYlRSQwAAAcwAAAAoZGVzYwAAAAAAAAAEc1JHQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0ZXh0AAAAAENvcHlyaWdodCBBcHBsZSBJbmMuLCAyMDE3AABYWVogAAAAAAAA9tYAAQAAAADTLVhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCALdAxQDASIAAhEBAxEB/8QAHwABAAMAAwEBAQEBAAAAAAAAAAkKCwYHCAUEAwEC/8QAXRAAAAUDAQIIBg0ICQMDAwEJAAIDBAUBBgcICQoREho5WJe21RMhOHd4lhQXGBk3Vld2lbW31NYVFiIjNlm00zE1QVV0dZOUs1TG0iQyUSVCU2EzJkVxY4GFscH/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8Av8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArRby/tStVuy1wNpqyFpSkrEjbjyjly6LNutS+7Nb3mzVhYmzTzbQjBq4esis3NH1KGUcFMep0v1fFpTxiy6KRW+7+Sdok9Ie+vs2UAQA8r42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1Fxnfocr42x3xq08dRcZ36KvQALQvK+Nsd8atPHUXGd+hyvjbHfGrTx1Fxnfoq9AAtC8r42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1Fxnfocr42x3xq08dRcZ36KvQALQvK+Nsd8atPHUXGd+hyvjbHfGrTx1Fxnfoq9AAtC8r42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1Fxnfo1IMGXbMX/hPD193CdupP3rizH12zh2iFGrU8xcdpRExJnbNimMVu3M9er1RQoY1Ek6lToatC8NcFobv+lfyYdOPmGxB9ntugO+QAAAAAAEKG3/11572dGzpuvUvpte2rH5PiMpYttJm5vK20brhKRF2zThjMFUiF3LRNRwdumWjdeq1KoH4TUKateATXisTvdnM03/5+MD9p3YCoFyvjbHfGrTx1Fxnfo780q71pta8u6mdP+LLxufAitp5FzHjmybkSj8KxzF+pB3NdkVDyhGb0s0czR0Zm7Wog4KQ9UVKlUoWtS8Ap/D1toG8t/SJ6SGGftAgQG6EAAAAAAKKe8IbwBtDNm/tBnunDTRO4kj8aIYdxveqbe88Ysrsmfy5c5JmsqessvJtFKtTVYoeAb+C4EeA/AY3G8UHHK+Nsd8atPHUXGd+j6m+Cc7/ACXo4YW/47lFWYBp87s5totbe1Ny3qis3VdL41k4XE+ObFua0SWJj9rZjlKUuC5pSKkTSDhvIPavkDNGiNEUTFJRJShj0NXjcFLf4zndyB8oXXb5mcVdt50aMQCK3bTauMw6GdnNnvUzgZ1bzLKGPGttrW45umDSuOETPKXFHxjr2ZELLtk3VKtXKtE6GWJxFOKfx8HBXPe5XxtjvjVp46i4zv0XhN5p5mTVp/gLK7ZQ4x9gFoXlfG2O+NWnjqLjO/Q5XxtjvjVp46i4zv0VegAWheV8bY741aeOouM79DlfG2O+NWnjqLjO/RV6ABaF5XxtjvjVp46i4zv0OV8bY741aeOouM79FXoAFoXlfG2O+NWnjqLjO/Q5XxtjvjVp46i4zv0VegAWheV8bY741aeOouM79EgGyt3mzai6uNohpJ015huPCLrGOY8uRFm3o3t7EDCDmloV6ykF1yRsulLrqMHNVGyXFcERUqWlDU4vjFHoS77BDnjtnp6Q9u/VkwA2gR+KSXUaxz9ylwUVbsnS6dTU4xaKIoKKE41P7acYtOGn9tPEP2j5k1/U0t/lj/8AhVQGW9lfe1dr5Z+UslWlDXTp+JD2vf8AeNuxRXOEI1dwWNhLikYxiVdes2WqyxWrVKiqtSlqoehj1pTjcA4ByvjbHfGrTx1FxnforragPh4zZ53MkdspodRgNqTYr6ucw659nNgXUznl1bz3KGQ21yq3G5taDStyEUPF3FIRjT2HEIruU2tKNWyVFKFWPxz0MevBWvAJVBAduynMyaTP8Fe3bKYE+ICoDvMe2h1t7LLLOl2ztKMvjWMhcsY7vq5buJfeP2t5uVZS37ljIuONHruJBlVigVo7WosiUp6KqVKetaVLwVrFcr42x3xq08dRcZ36JE99+8oPQl5m8q9toIUZwFoXlfG2O+NWnjqLjO/Q5XxtjvjVp46i4zv0VegAXKdEW9PbV/PGr3Tdhi/7lwQvZOT8xWLZN0oxWGY6NklIO4JxqwkCMZAkyqdm6M3WPRFwVM9Uj8BqFrwcA0zxh77LznFdFXpIYr7UsBuEAAzCtVm9Z7WrEWprUBiuzrmwIjaeOcx5Fsm2kpDCsc+fpwds3XKREWR49PNEM7dFZtEaLuDEJVZShlKlLU3ANPUYX+vvy4dXfpIZl7fzwCc3lfG2O+NWnjqLjO/RfE3f/XXnvaL7Oq1dS+pJ7ashk+XynlK0njizbbRtSErD2lMt2MQROIQcu003BEFTUcL0WrVc/AapS8HAMbYawO6JczTYPn5zx2lZgLO4AAAAAADq3OV2y9g4UzBfVvGbkn7KxbkC7YM7tCjpqSXty05eYjTOW1TFo4bles0KrIVMWiqdDJ1NShuGnaQ6H1T+TFqN8w+Xvs+uEBmCcr42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1Fxnfocr42x3xq08dRcZ36KvQALQvK+Nsd8atPHUXGd+hyvjbHfGrTx1Fxnfoq9AAtC8r42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1Fxnfocr42x3xq08dRcZ36KvQALQvK+Nsd8atPHUXGd+hyvjbHfGrTx1Fxnfoq9AAtC8r42x3xq08dRcZ36HK+Nsd8atPHUXGd+ir0AC0LyvjbHfGrTx1FxnfouK7tBtStVu1KwPqWyDqtkrEkrixbly1rNtRSxLNb2YzShZazaTbwj9q3evSvXNX1eMm4MclSJfq6FrTxjJlGkFuRHkoa2/SGsT7NigLuwAAAAAAAAAAAAAAAAAAAAAAAAAACkVvu/knaJPSHvr7NlBd1FIrfd/JO0SekPfX2bKAM3wey9n3o/lNe2r/CukuFvOPx9J5kuJ1b7S8JSMczDCEO2h5GWq4cRrRds4dEOWPqjQiaxK0MpQ3DWha0r40E2u7n883oa85Mr2NuMBP8AciBy/wBO3G3VTdHfwciBy/07cbdVN0d/DRFABndciBy/07cbdVN0d/ByIHL/AE7cbdVN0d/DRFABndciBy/07cbdVN0d/ByIHL/Ttxt1U3R38NEUAGd1yIHL/Ttxt1U3R38HIgcv9O3G3VTdHfw0RQAZ3XIgcv8ATtxt1U3R38HIgcv9O3G3VTdHfw0RQAZkesndEMoaQdLWddTkprIsK8o7COPJu/3lrMMbXDGvZ1CFTIoeObP3Eysg0VX4/AVZVJQhODxlqKcY2sttjzTevv0b77/h0BimgA3f9K/kw6cfMNiD7PbdGEAN3/Sv5MOnHzDYg+z23QHfIAAAAAACK7bI7Oud2pGiW4tJtuZJiMUSc5kDH96ku+bhHlwMEEbKlVpFZiaOYOWjg6j4qtE01aLUKlWnGMU1K8AlRABndciBy/07cbdVN0d/D9sbukOTtEsgy1iS+sOw76itLbpDP0jZcbji4YqQuxliZUt8ObdZSbqZXbR7qYRhTsEHi6CyLZVcqyiRykqWuhwPJOvnyINXfo35m+z+eAVAuW/Yg6CWSeta1+4Q5b9iDoJZJ61rX7hGd0ADRF5b9iDoJZJ61rX7hDlv2IOglknrWtfuEZ3QAL8V77Mi4d6lnK7U/G+U4XSXbcg1b4CLia94F9kKcTe4j45HVw1uCBdRDCrWY/OBOrdnRp4Zt7GP4RQ/HpwcQ5EDl/p2426qbo7+E1m5980BG+kfmn/ktoWmQGf5j/Ezrc8HUjnXKkwhrQZaz0EcTRMBj9spjN1ZDrGihrwcTEi7uM80lKISiUyRki2bJoKN1EDKnOcp6Fp2hy37EHQSyT1rWv3CPu7795PWhLzzZV7EQQznQGhFdm3Ms7eHYJ7sl7FwLc2m+5tT1E2UdmC7Lsi71grVraKhbsVO9tyHYRsg/o8SijM06IPEqpKLFVNxilqWvSHIgcv9O3G3VTdHfwg73Zbnm9Jf+PvXsbMDYJAZ3XIgcv8ATtxt1U3R38HIgcv9O3G3VTdHfw0RQAZ3XIgcv9O3G3VTdHfwciBy/wBO3G3VTdHfw0RQAZ3XIgcv9O3G3VTdHfwciBy/07cbdVN0d/DRFABndciBy/07cbdVN0d/ByIHL/Ttxt1U3R38NEUAGd1yIHL/AE7cbdVN0d/D7dt7uVfmxNnYzau3dqWtHOdtaFXRc7TOIrbsiZtWdv5lA0NHnt+MuKTk30fEOnBpUqhXjpm4SJRExap1qanBoVCIjb38zjtC/R4uL6zhwFcPlv2IOglknrWtfuEf4bfbcQy5TRJNC2SETSlKxxVjZVtgxUjPaexqKGLSCpU1E6q0NUtK0rWlOClfGM7sfThf65if8zYfxSQC9M53NLK+cHLjNLPWxjyBaZfXVyi1g3OMLkduYZtf6hrsQinDpKbTScrxyUsVmq4TTImsoiZQhClNQtP48iBy/wBO3G3VTdHfwv06f/gHwn5o8b9jYUduAKFFpbcqzt3ggmWyXvrAty6kLm0xUUaSOYLSuyLsqCuqt3qGuxI7K3JhhJSDCjJKVKzUou8V8KoiZUvFKahack5b9iDoJZJ61rX7hFavea+eb1Z/42yexsOIDgE9u3f2ydqbYfI2AL5tXClw4XRwvZN3Wm7YXBc8bcys4rcs6wmE3jZaOZMiNU2pGRkTpqlUMoY9DFNSlK0rAkAAJNNkzs3J/apas22le28mw+JZJzjy8r/pds5BvbhYlQtAscZWOrHsHTReqrz8oFomt4biJeDrxim41OCz/wAiBy/07cbdVN0d/COPc/OeBi/RwzX/AMVtDVhAZ5cRuqmSdnJKMNec9q1sfJcLpFdI5+lMfRGPZ6DlLyZY1PS5HFusJh7Lumka6lE2VWqLxw3XRQOpRQ6Ry0rSvoHlv2IOglknrWtfuEWw9qHzdWtX0b8qdln4w9wGiLy37EHQSyT1rWv3CPPUlukWTtbkg91iw+sOw7EitUjpfP0bZclji4JWQtNlllQ17trdeybWZbtpB1DozRGC7xBBFFyogZZNIhT0LSh+N0DQJ5D2kT0b8NdgIEBRy5EDl/p2426qbo7+FvPY3bOqd2W+ia3tJtx5KiMrycJkHIF6nu+EhHlvsF0b1lEJBFiWOfuXbgijEqVU1FarVKqY3CUpaUEqQAAAAAAAADofVP5MWo3zD5e+z64R3wOh9U/kxajfMPl77PrhAYP4AAC43o13RHKGr/SzgrU7F6x7CsyOzfjyEv8AZ2rIY2uGSewSEymc5I5y/bzKKDtVDiVoZZJJMh+HhoWg9MciBy/07cbdVN0d/C37sS+aZ0B+jfYv8OuJSAGd1yIHL/Ttxt1U3R38HIgcv9O3G3VTdHfw0RQAZ3XIgcv9O3G3VTdHfwciBy/07cbdVN0d/DRFABndciBy/wBO3G3VTdHfwciBy/07cbdVN0d/DRFABndciBy/07cbdVN0d/ByIHL/AE7cbdVN0d/DRFABndciBy/07cbdVN0d/CoxtBdH8roJ1f5q0lzV5x+QpPDlwtYB3eEXGOYdhNHcxEfLUcN452u4cNSEK/KjUiix61MnU3DwVpQblgxvt4y55vXH5x4nsbbgCEgaQW5EeShrb9IaxPs2KM30aQW5EeShrb9IaxPs2KAu7AAAAAAAAAAAAAAAAAAAAAAAAAAAKRW+7+Sdok9Ie+vs2UF3UUit938k7RJ6Q99fZsoAzfBNru5/PN6GvOTK9jbjEJQm13c/nm9DXnJlextxgNkMfPlpRlCRUnNSKvgI+Ij3so/WoUx6osmDZR26V4haVMbwaCRz8UtKmNwcFKVrUfQHAcrfBdkn5g3j2dkQEH8jvOuxuipB/FvtTL1J7GvXTB4l7Xl4m8E6ZrqN3CfGLG1obiKpnLxqVrSvBw08Q/FyoXYydJ171d3l3YMkPInwgX188bn+u3w4cA17eVC7GTpOveru8u7A5ULsZOk696u7y7sGQkADXt5ULsZOk696u7y7sDlQuxk6Tr3q7vLuwZCQANq3RbtmNn3tAsnSeH9LWY3F/wB/Q9tO7ufw6tqXBCFRgmLhu1cu6OpRmg3NUizlEvginqobjcNKVpSolLGXruZvOY5L9G+7Pr6CGoUAi522PNN6+/Rvvv8Ah0Bimjay22PNN6+/Rvvv+HQGKaADd/0r+TDpx8w2IPs9t0YQA3f9K/kw6cfMNiD7PbdAd8gAAAAAAPL2sDWPgDQnheQ1Aal7xUsXFsXPwFsvZ9KKkJk6Uxczo7OHbewY1Fd0ajlwmYlVCp1InwcJ60oPUIrE73ZzNN/+fjA/ad2A7r5ULsZOk696u7y7sHU2ed4S2Vup3CWW9OWG9QLu5stZ2xzeOJMaW4ex7pjiTt9ZBgH9r2tEnfvGCTRkWQmpNm1M6cqJoIUVqqqcpCmrTJrHrbQN5b+kT0kMM/aBAgJVeS9bZvoxMusSze8w5L1tm+jEy6xLN7zGvaADBFynjO8cMZIvfE+QowsNfGO7llrRuuKK4Rdlj52EdqMpFpRy3MdBeiDhI5KKpHMmfg4xa1pWlRwEe8tqLzi+tb0kMqdqX48GgNV/c++aAjfSPzT/AMltC0yKs25980BG+kfmn/ktoWmQFGnffvJ60JeebKvYiCGc6NGLffvJ60JeebKvYiCGc6Anv3Zbnm9Jf+PvXsbMDYJGPtuy3PN6S/8AH3r2NmBsEgPkXBOxtrwM3c0yvVrD27ESU7LOaEMpVvGxDJaQfL0TJSp1KotW6qnEJSpjcXilpWtaCBBfeftjQ2XWbranHpVUFVEVS+13eVeKokcxDl4aRnBXgMWtOGniqJq8/fARmvzSZI7HTIwdpz+upj/NJD+LWAa7PKhdjJ0nXvV3eXdgmrwBnfGep3DOO8/YbnTXNi/KluNrrsmfOycxx5WEdqrIoOjMnhEnTaplG6pfBLplPTi8NacFaDBnG0BsD+Zw2eno8299aTICXgRia2tsLoH2eeQLbxhqry+4x9eV2W1+d0HGJWtPThXcF7OWjvZdXEU0cIpV9loKp+COain6PG4OCtBJ2MzHfUvL505+jf8A96y4C2HyoXYydJ171d3l3YHKhdjJ0nXvV3eXdgyEgAa9vKhdjJ0nXvV3eXdg8ka8dsxs+9pzo91BaA9HGY3GTNUGqnHsjirCdhLWpcFvJXTe8q5ZvGMUebmGbaLjSqt2Do/sl6ukgXwfAY9KmoMskS77BDnjtnp6Q9u/VkwA9Kcl62zfRiZdYlm95j90XuwG2XbyUc4V0xsipIPmiyhvbEs2vFTScJnPXgpJ8NeApa14BrvgA67xBBSdr4lxdbM0hRrMW7jqyYKWbUOVSjeTiLajI9+hRQlakUoi6bqp8clalNxeMWtaVpUdiAADOD25mwX2m+sTaZahdQWAsENbwxZfDq11LbuBS9LZijviR1tRse7rVi/fIukfBum6qf6xMvG4vGpw0rQRHcl62zfRiZdYlm95jXtABkJcl62zfRiZdYlm95hyXrbN9GJl1iWb3mNe0AGf/u4WxM2i2gvaPMM86m8KtrExijhXJ9pKTyV3W7NGLO3ESDpEtPYUY9XdVo4qzccKtE/Bp8T9M1OGnDoAAADwftQ+bq1q+jflTss/GHuNwjah83VrV9G/KnZZ+MPcAG6BoE8h7SJ6N+GuwECML8boGgTyHtIno34a7AQID1wIltYG2+2cehPNEhp/1L5tc2LlKLgIC5nsAlaFxzJEoe5mp3kO59nRrJdqarlumY9UyqVOnwcB6UqJaRk+73Zzy1/+YfA/Zh2Au78qF2MnSde9Xd5d2D31oa2qOijaNP79jNJeUl8ivMaM4l9eCS1tzUDSNbTazhvGnKaWatyuPDqtVi1KjU1ScXhNSlK0GIwL5+5A/t3rt+aWKPrieAaFIAAAOh9U/kxajfMPl77PrhHfA6H1T+TFqN8w+Xvs+uEBg/gAANrDYl80zoD9G+xf4dcSkCLfYl80zoD9G+xf4dcSkAItdaW2X2fez8ydF4f1S5jcWBfsxbTS7mEQlalwTZVoJ84cNWzurqLZrtyVOs2WL4Ix6KF4vDWlKVoPH3KhdjJ0nXvV3eXdgqBb5nzl+MvRvtT6/nRUPAa9vKhdjJ0nXvV3eXdgcqF2MnSde9Xd5d2DISABr28qF2MnSde9Xd5d2ByoXYydJ171d3l3YMhIAGvzHbztsbZWQYxbLUy9VeyTxqwaJe15eJfCOni5G7dPjVjeAvHVUIXjV8VOHhr4hPfEyjKcioyajVfDx0vHspRgtUpiVWZSDZJ21VqQ1KGJ4RBZM/FNShi8PBWlK0GCPjz9v7G+eFs/XTIbxOJ/gtxr8wLN7OxoDn4xvt4y55vXH5x4nsbbg2QRjfbxlzzeuPzjxPY23AEJA0gtyI8lDW36Q1ifZsUZvo0gtyI8lDW36Q1ifZsUBd2AAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIY4Dlb4Lsk/MG8ezsiOfDgOVvguyT8wbx7OyIDB2yJ8IF9fPG5/rt8OHDmORPhAvr543P9dvhw4AAAAAAAFu7czecxyX6N92fX0ENQoZeu5m85jkv0b7s+voIahQCLnbY803r79G++/4dAYpo2sttjzTevv0b77/AIdAYpoAN3/Sv5MOnHzDYg+z23RhADd/0r+TDpx8w2IPs9t0B3yAAADhF35Nxvj87NO/cg2RZCkiVU8end91wNtHfkRqUqx2ZZl+yM6KkYxaKmQoeidTFoatK1oObjPb33tRRO+NCXEUOThtTK3DxDmLw/8A1eB/p4K04QF7r3SenT5fcK9adjd+iuXvT18WVmzZJ3zYmGbwtbLd7uc2YTkW1m4xuCJv26nEfHXG6WkH6FvWq7lpdVkwSMVV66TZmQap1oddRMtaVGVX7Icf/nW/1T/+Qs5bowc622UsAixzKk9ojPFeIoaqheGlstOCvFNWtOGn9leDxAK+PubNRfyBZq6rL57iHqPRBgbOVt6yNLFwXFhjK8DAwmoHEkrMzc1jq74uIiIxhfMI5fSUnJPodBkwYM2yajh28drJN26CZ1VlCJlMam3L7Hb/AP4Ef9In/iPJWvdBAuiHV0YqKRTU04ZlrStEyUrStLAnuCtK0pw0rT+ytAHaPuk9Ony+4V607G79D3SenT5fcK9adjd+jB39kOP/AM63+qf/AMg9kOP/AM63+qf/AMgHt/aayMfL7QjWXKRL9lKRj/UTk90wkY50g9YvWq1zPjouWjtsoq3ct1SVodNZFQ6aha0MU1aV4R4aH+1rWta1rWta18da1rw1rX/5rWv9I/wBqv7n3zQEb6R+af8AktoWmRVm3PvmgI30j80/8ltC0yApM76fj2/sgYB0PtbCse8L3cx2YcouJBvaNtTVyrsUFrLhE0VniMMyeqNUlVCmImouUhFDlqUpqmpWgz1/c2ai/kCzV1WXz3EN4s6ZFKUochD0p46UOWhqUr/804aV4B/x7Hb/AP4Ef9In/iAyM93WxnkfE21w0u33lTH9740seFe3eaZvLIFqT1m2pElcWlLIIGk7iuNhGxDAqy5yIpVdPEqKKnKmSpjmpSurR7pPTp8vuFetOxu/RDvvMyaaWxm1ZnSTImcrCy+A6ZCkPT/98oeniMWlK08X/wAVGP8A+yHH/wCdb/VP/wCQDcyzxqN09ucHZlbNs74acOHGKciIIIIZQshVZdZW0JhNJFFJOcMdRVQ5ikTTIUxznNQpaVrWlBhtTVaGmZYxa0MU0m/qU1K0rStKula0rStPFWlaeOlaeKtB+L2Q4r/Sut/qn/8AIfxABtAbA/mcNnp6PNvfWkyMX8bQGwP5nDZ6ejzb31pMgJeBmY76l5fOnP0b/wDvWXGmcMzHfUvL505+jf8A96y4CmqOVWnYt7369XjbFs66r0kWrf2U5YWnb0vcb1u149E/ZK7WHZvF0W/hDFJ4ZRMqfHrQvG41aUHFRcm3LEhFNfWomhyFPSmm81aUOWhqUr+ekR4+CtKgKofubNRfyBZq6rL57iEsewqwPnG29rzoCnbiwzleBhIzUBb7qSmJrHd3xcVHtixsvQzh9IPodBo0QLUxaGWcLJp0qalKmpWtBsS+x2//AOBH/SJ/4j/SoIlrQxUUimp46VKmSlaV/wDmlaU4aAP6gAAAAAAAAAAAAAAADwftQ+bq1q+jflTss/GHuNwjah83VrV9G/KnZZ+MPcAG3BoR1DYBjdFWk2Pkc44fYP2WnbD7V6xe5Mstq8aOkLEg012zpsvNprN10VCmTVRVIRRM5TEOWhqVoMR8f1o4XpSlKLK0pTxUpRQ9KUp/8UpQ3iAbxPuk9Ony+4V607G79GYfvT1j3rmza2XzfeGbPunLdkOcJ4Tjm15Yxt+Wv21XEhHW46RkGCFw2q0lohV6wVMVJ61TeGXaqVoRdNM1aUFWf2Q4/wDzrf6p/wDyGrzui5CLbGywjrEKqf2+M7046paKG4KXKz4KcY1K14Kf2U4fEAy6vc2ai/kCzV1WXz3ELzm5YYyyRj++NcKl+4+veyE5G1MWkj1LvtSetoj86MvOGWIzNMsGRXRkimLVUqFT1ToYtT0pStOG/Z7Hb/8A4Ef9In/iP+yJpp8PETITh/p4hCl4f/58FKcID/sAAAHQ+qfyYtRvmHy99n1wjvgdD6p/Ji1G+YfL32fXCAwfwAAG1hsS+aZ0B+jfYv8ADriUgRb7EvmmdAfo32L/AA64lIAZe++Z85fjL0b7U+v50VDxbw3zPnL8Zejfan1/OioeAAAAAAADmGPP2/sb54Wz9dMhvE4n+C3GvzAs3s7GjB2x5+39jfPC2frpkN4nE/wW41+YFm9nY0Bz8Y328Zc83rj848T2NtwbIIxvt4y55vXH5x4nsbbgCEgaQW5EeShrb9IaxPs2KM30aQW5EeShrb9IaxPs2KAu7AAAAAAAAAAAAAAAAAAAAAAAAAAAKRW+7+Sdok9Ie+vs2UF3UUit938k7RJ6Q99fZsoAzfBNru5/PN6GvOTK9jbjEJQm13c/nm9DXnJlextxgNkMcByt8F2SfmDePZ2RHPhwHK3wXZJ+YN49nZEBg7ZE+EC+vnjc/wBdvhw4cxyJ8IF9fPG5/rt8OHAAAAAAAAt3bmbzmOS/Rvuz6+ghqFDL13M3nMcl+jfdn19BDUKARc7bHmm9ffo333/DoDFNG1ltseab19+jfff8OgMU0AG7/pX8mHTj5hsQfZ7bowgBu/6V/Jh04+YbEH2e26A75ABmbbxdtWNoxpi2qebMQYA1g5oxPjGBtrHDqGsq0LjJHwUc5lLWavJBZs1M0VqQ7t0cy61ePXjKGrXxANMkZ7G+/ftxoS+amV/reBFZP39nbA/vCdR/rgl9wFrPduouP2z1tampraotEddErhGcseLxM/z6X86nFgx90MJR3cDS3jp1ZexEZZyxaLPC1op4Q7dOvDTigM+cWdt0T55awPMPnjsw0Gg77xNsfv3e2nD1PV+/ju7T5suNnrpSyO0y9py0kYcw9k1hFSsGzvWy7ePGzreInECtpePSdGdrUK3kEClSck4leOSlKcNAHvceSdfPkQau/RvzN9n88PWw8k6+fIg1d+jfmb7P54BhegAAAAADVf3PvmgI30j80/8AJbQtMjD308bT7aB6TMeExPpt1ZZgw3jdOZkrhJZtk3CSNhCzcxVCspJ0bGarVo6fVbIeHU4/6fgieKnAO9ff2dsD+8J1H+uCf3ABtJgMWz39nbA/vCdR/rgl9wD39nbA/vCdR/rgl9wAaUm808zJq0/wFldsocY+wkOzZtZtpHqPxvcGIM6ayM2ZQxjdRGydxWVddykfQUuRm5TeNSvWpWiVVKIOkUl0/wBOnAcha+Pg4BHiAAAAA2gNgfzOGz09Hm3vrSZGL+JI8UbYLadYMxzaGI8Ra2M64/xpYMOjAWbZduXOmzg7chm6iiqMbGNqs1KotU1FlTlJU5uCpzePxgNtUZmO+peXzpz9G/8A71lxB17+ztgf3hOo/wBcE/uAuQbuvh7GG2K0u5bzntQLIgdbmXsfZe9ryysg53a1ui47bsn83WEx+bUW8TOyohF/lR05feAqmavshY5+N4+ABm9C5RuV3l96ivRvN20iBdr94m2P37vbTh6nq/fxXy3ijDuL9jtpcxLnTZf2RA6I8v5Ay9THl6ZBwQ1ra9x3JZNbdfzFbak3ih3tF4uso0bPvAUTLXw6JD8bxcAC7kAxbPf2dsD+8J1H+uCX3APf2dsD+8J1H+uCX3ABtJgMWz39nbA/vCdR/rgl9wD39nbA/vCdR/rgl9wAbSYDFs9/Z2wP7wnUf64JfcA9/Z2wP7wnUf64JfcAG0mAhl2AGc8vaj9lZpsy/nXIFx5QyddTS7D3Fet1vKP52XOyumUZtTPXVE0qKVQaopIJ8BKcBCFp/wDqJmgAAAAAAAeD9qHzdWtX0b8qdln4w9xvnXzY9pZLs+5cf37AR11WXeMM/t26Lbl0fZEXOQkogdrIRj9Chi+Fau26h0lk+MXjENWnDQRie8TbH793tpw9T1fv4DFsAbSfvE2x+/d7acPU9X7+HvE2x+/d7acPU9T7+AxbBrA7olzNNg+fnPHaVmJEveJtj9+7204ep6v38UatvNq11J7KTaEXTpD2cuZb30e6ZoLGOMb4h8LYWki25Y0fdt8Qy8lds+2jDouzEkZ98km6kVvDVosqQpqFLwcADT6AYtnv7O2B/eE6j/XBL7gHv7O2B/eE6j/XBP7gA2kwGLZ7+ztgf3hOo/1wS+4Ccjd09qxtGNTm1TwliDP+sHNGV8Yz9uZGdTNlXfcZJCCkXEXazt5HrOmpWiVTnaOiEXRrx6cVQtK+PgAaZY6H1T+TFqN8w+Xvs+uEd8DofVP5MWo3zD5e+z64QGD+AAA2sNiXzTOgP0b7F/h1xKQIt9iXzTOgP0b7F/h1xKQAy998z5y/GXo32p9fzoqHi3hvmfOX4y9G+1Pr+dFQ8AAAAAAAHMMeft/Y3zwtn66ZDeJxP8FuNfmBZvZ2NGDtjz9v7G+eFs/XTIbxOJ/gtxr8wLN7OxoDn4xvt4y55vXH5x4nsbbg2QRjfbxlzzeuPzjxPY23AEJA0gtyI8lDW36Q1ifZsUZvo0gtyI8lDW36Q1ifZsUBd2AAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIY4Dlb4Lsk/MG8ezsiOfD49wwza44Cct54dRNpPQ8nDOlEa0osm2lGS7Fc6VTUqWihElzGJWtK0oalOGlaeIBgoZE+EC+vnjc/wBdvhw4af8ANbmjs8ZyZlppzmnUam5mJN/KOCJS1r0SIvIOlXapE6Vhq1omVRY1CUrWteLSnDWtR8zkXuzq+WvUh9LWt3KAzEwGnZyL3Z1fLXqQ+lrW7lDkXuzq+WvUh9LWt3KAzEwGnZyL3Z1fLXqQ+lrW7lDkXuzq+WvUh9LWt3KAgB3M3nMcl+jfdn19BDUKECWzG3fDShssc6TufMIZEy3dd0z9kSNiOo++n0K5iU4uSdtHizhIkdHtFqOiqM0ykMZSpKFMbhLWvBWk9oCLnbY803r79G++/wCHQGKaNrLbY803r79G++/4dAYpoAN3/Sv5MOnHzDYg+z23RhADd/0r+TDpx8w2IPs9t0B3yMjLepOeb1B/NLFPY1mNc0Vx9oFu0GjXaKanby1UZcydmm3L4vWOt6Nkomz5CBQgkEbcjEopmZsm+jHLih1UEinWqdU1KqVrUtKU8QDI/GhPuQP7D67fnXij6onh7F5F7s6vlr1IfS1rdyiZbZU7HDT1skorLcRga88i3e3zDIW9JXAe/wB3FulGS1uNnjVmWOrGsmlCEVI8UqtRWh61MUvF4PGAl2ABD1tztoDlbZm6BLn1TYZt607nveFyVjWzm0VeqD1xBHj7xmF4+QWVTYOGrirhFJIpm1aK0LQ9a1PQ1PEAmFHknXz5EGrv0b8zfZ/PDPJ5aFtFfkU03/RN099DrnL+976/MzYqyPiS4sO6fGUDkyyLnsSZeRsXcxJBrF3VDvIV84ZGVmDpFdItnih0DKEOSipS1MUxeGlQqcgAAADRX0bbpBoL1C6U9Pecrsy9n+OubK+JrLvudYREpbacW0lLihm0i7bsCLxCixWqSqxiolUUOehKU4xq1HpXkXuzq+WvUh9LWt3KAzEwGnZyL3Z1fLXqQ+lrW7lDkXuzq+WvUh9LWt3KAzEwGnZyL3Z1fLXqQ+lrW7lDkXuzq+WvUh9LWt3KAzEwGnZyL3Z1fLXqQ+lrW7lDkXuzq+WvUh9LWt3KAzEwGlpk7c49ntZeNshXjHZm1FLyFp2PdlysUXMrbFW6zyCgZCUapOKEhimqiou1IRWha0NUlTULWleCozV5FuRpIP2ida1TavHTclTf+6pEVzplqbg8XDUpaVr/APqA/GAAADTO3K3yBtRnpIf9lRAzMROtsutvvqn2UmIL1wzgzH2KLtt2+b3/AD7k3t+MplzJISn5LbRPsdqeOkGiRWvgGxD8U5DH8JU1eNwcFAGxEKa++o+QJp19JAvYuXEHfLQtor8imm/6JunvoevtG+q2+t62vu4NGWuaJgcTY7wfbvt7W1NYHScxtxv7no8StSjCUVuJWWani/YMmstxEUU1vDkJXwnFpWlQoagNOzkXuzq+WvUh9LWt3KHIvdnV8tepD6WtbuUBmJgNOzkXuzq+WvUh9LWt3KHIvdnV8tepD6WtbuUBmJgNOzkXuzq+WvUh9LWt3KHIvdnV8tepD6WtbuUBI3uynMyaTP8ABXt2ymBPiM4jUltq9R2wFzDdWyv0r2RjXIOD9Np2TSz7ryw0lX19Sad2M0rpf1mXMM9j45QyL6UWRb+AaJUogROhuMalTV6K5aFtFfkU03/RN099ANOwBmJ8tC2ivyKab/om6e+g5aFtFfkU03/RN099ANOwBSt2Ee8Z6u9p3ruZaYs043w9a9luMTZCvo8pZDCcbzdJS0yRBmCBVJCSdN/Yq3s9X2QWqXHrxScUxeCvDdSAAHmvWPmK4dPelTUHnG02UdI3NijE16X3BMJciqkW7lLdhXUizbvyIHTWM1UWRKVYqahD1JWtCmpXxjOn5aFtFfkU03/RN099ANOwBmJ8tC2ivyKab/om6e+ho9aZMlzOZ9OmC8uXE1ZMp/JuJrAvuaZxpVCR7WUum2I2afN2RFTHVK1ScvFCIFUOc9EiloY1a8NQHeQyfd7s55a//MPgfsw7GsEK8m0e3b/SBtMtTcxqmzLkrMlsXvNWjaNnOYqyn8G3giR9nMFI+PWTTfxrpxRyskrUzmtVakqelKlKWniAZEQDTs5F7s6vlr1IfS1rdyitLvFGxM037JK29Nkxga+Ml3e4zDOXtG3AS/3cU6TZI24wjHTM0dSNZNKkOqd4pRbwvHpUpS8Xg8fCFW0WKd1d55vT381Mq9jXorrCxTurvPN6e/mplXsa9Aa546H1T+TFqN8w+Xvs+uEd8DofVP5MWo3zD5e+z64QGD+AAA2sNiXzTOgP0b7F/h1xKQIt9iXzTOgP0b7F/h1xKQAy998z5y/GXo32p9fzoqHjYM2nO746UNqfnSCz5m/ImW7UumAsiPsRrH2K+hW0UpFxzx29RcLEkY92tV0ZR4oU5iqUJUpS8BaV4RG/yL3Z1fLXqQ+lrW7lAZiYDTs5F7s6vlr1IfS1rdyhyL3Z1fLXqQ+lrW7lAZiYDTs5F7s6vlr1IfS1rdyhyL3Z1fLXqQ+lrW7lAZoePP2/sb54Wz9dMhvE4n+C3GvzAs3s7GiqJC7mjs8YSYiZptmnUao5iJJhKNyKy1r1TOvHuknaRFKUhaVqQyiRaHpStK8WteCtKi3FbsK2tu34O3WZ1FWkDDxkK1UWrSqyjaLZIMUDq1LShaqHSQKZSpaUpU1a8FKUAfYGN9vGXPN64/OPE9jbcGyCMb7eMueb1x+ceJ7G24AhIGkFuRHkoa2/SGsT7NijN9GkFuRHkoa2/SGsT7NigLuwAAAAAAAAAAAAAAAAAAAAAAAAAACkVvu/knaJPSHvr7NlBd1FIrfd/JO0SekPfX2bKAM3wTa7ufzzehrzkyvY24xCUJAtlpq5s/Qlrz08arr+tufu60sPXW8n5m3bXUYpTsm3cwMrFFRj1JFRFkVUqz9NQ1V1Cl8GQ/BXjcFAG3sApd8tf0PdFfUh9J2B3oHLX9D3RX1IfSdgd6ALogCl3y1/Q90V9SH0nYHegctf0PdFfUh9J2B3oAuiAKXfLX9D3RX1IfSdgd6By1/Q90V9SH0nYHegC6IApd8tf0PdFfUh9J2B3oHLX9D3RX1IfSdgd6ALogCl3y1/Q90V9SH0nYHegctf0PdFfUh9J2B3oAn+22PNN6+/Rvvv+HQGKaL+m0A3tXSFq30W6lNNFn6cs823c+asVXHYUHOz0hZSkNFSEykmRB5JEZSKjszVKpK1Uo3IZTgrTi0qKBYAN3/Sv5MOnHzDYg+z23RhADd/0r+TDpx8w2IPs9t0B3yACs/tFd500t7OHVTe2lHJeBc03xdtkRluSb64rPfWijBO0rkikpVqm2TlX6D2h0EVaJreEToWqlK8StS+MBZgAUu+Wv6HuivqQ+k7A70E2myR2z2E9r1EZhmMOYvyLjVHDUlbcbNJX+5gXCkorcrV66bKR1YN05KUiBGRyreHqWtTHLxKVpwgJkBWJ3uzmab/APPxgftO7FnYVid7s5mm/wDz8YH7TuwGT6ADsvDOMpTNOXMZYghH7KKmcn33athRUnJFWNHx8hdc0zhGjx6VuU65mrZd6RVeiJTK1SIahC1NwUAdaALonIoNcPSo03/Rl/8AdYcig1w9KjTf9GX/AN1gL4Wy65ujRT6N+K+yzAe8hSPsTek9Kezss22dCeSNP+br2v7SVCsMC3fd1ovrPRti47gxwgS3ZKYgUpR+jIpxb5yyOuzI9RTclROWipCn4aDlnLX9D3RX1IfSdgd6ALogCO7ZhbRrG21H0xIaosVWRd+P7VcX3ddhFgL3Wil5ukhaRmBXjyqkOu4Z+xXP5QT8BTwnhKcQ/HLTxCREAARD7W7bC4a2Qtk4evjMeM8g5KYZkuq47UhWlgOYNu5i3dtxDOXcuJGs25bJmQXReETRohUx6KFNU9KF4KiDPlr+h7or6kPpOwO9AF0QBWG0Bb0dpU2guqnGulHHeAM22ZduTFpZGLuK7H1nrQTA0TFOpVar1OMfrPTUUSanTT8CmatFDFqb9HhFnkB1Jn74CM1+aTJHY6ZGDtOf11Mf5pIfxaw3ic/fARmvzSZI7HTIwdpz+upj/NJD+LWAfLABaq0abp/q41paXMJaqbI1E4Jta0842QyvmCt642F5qzkSwfOHTdNpJqMI5Vmd0QzQ5jVbqHT4DF4K8PCAqqgLonIoNcPSo03/AEZf/dYgH2rmyoyzsl8zWNhbL2Q7GyNOX3Yn5+sJWw0JlvGs4/8AKzmJ9huizTds4q68M1OpwpkMl4MxacbjcNAEWYuUbld5feor0bzdtIgU1xco3K7y+9RXo3m7aRADTQAB5m1l6n7V0XaXM26qL3gJu6bTwdY76+Z23rcOzTnJZgwcNW6jSMUfqJMyOjmdEqWrhQidKFNw14eAB6ZAUu+Wv6HuivqQ+k7A70H6Gm+r6IHbps1JpZ1HlO5cItyGNJWDxSmWUKmUxuCU4eClTUrXg8fAAueAOM2Xc7W9rOtO82Lddoyu62YG52bVzUlXLZrPxbWVbt3FU61Tquii7ImrUlakqoU1S1qXgqOTAMfjea+eb1Z/42yexsOIDhPjvNfPN6s/8bZPY2HEBwAAnL2SOwlz5terKzDe+HMuYwxqww3dNuWrNNL/AGtxuHUo7uSJeS7ZxHVg2jlMqCCLM6a1HBiHqocvEpUvDWkvPIoNcPSo03/Rl/8AdYDylufnPAxfo4Zr/wCK2hqwjPC06bNHJ+65ZFT2o2qq+7Mz/iqOhZPAytgYSRlmN7HuDLVEE4eYIvd6DCH/ACXG1gHFX5KuKOTUWS8AQ3Abg988tf0PdFfUh9J2B3oAsqbUPm6tavo35U7LPxh7jSJvrelNKe0Rs25tCuONP+brKv3VpCv8C2hd12vrPWti3LgyO3PbkZMTyUXILSKkUxcvU13hGSSjmqJDUSIY/BSsXXIoNcPSo03/AEZf/dYCl2N0DQJ5D2kT0b8NdgIEUA+RQa4elRpv+jL/AO6xKfaW9iaRtFVr27pAvfTtna6ry0wQsbgW6bltt/ZiVvz9wYpaJWVLzEInISKT4kVIvoZd0wI8STclbKp0WIVShi0C7KApd8tf0PdFfUh9J2B3oLIWzM2heOdp7pZhtVmLLLu2wbSmryvGzELdvVaMXnUntmP0o966UUiFl2VWzpRWh21CqVUoSlfCUpUBIEKGG+/fsJoS+duV/qeBF88UMN9+/YTQl87cr/U8CAz1hYp3V3nm9PfzUyr2NeiusLFO6u883p7+amVexr0BrnjofVP5MWo3zD5e+z64R3wOh9U/kxajfMPl77PrhAYP4AADaw2JfNM6A/RvsX+HXEpAz+dn9vaukLSPos01aZ7w05Z5uS6MKYqt2wpydgJCyk4aVkIdJQi7yNI9kU3ZWqtT0qnRwmVSlKV41KD2Fy1/Q90V9SH0nYHegC6IApd8tf0PdFfUh9J2B3oHLX9D3RX1IfSdgd6ALogCl3y1/Q90V9SH0nYHegctf0PdFfUh9J2B3oAuiAKXfLX9D3RX1IfSdgd6By1/Q90V9SH0nYHegC6IApd8tf0PdFfUh9J2B3oHLX9D3RX1IfSdgd6ALogxvt4y55vXH5x4nsbbgt+8tf0PdFfUh9J2B3oKJ21M1dWdru156htV1g23P2jaWYLqZT0Nbt0KMVZ2MbtoGKijoyCkcqsyMqZZgooWqChi+DOXhrxuGgCPwaQW5EeShrb9IaxPs2KM30aQW5EeShrb9IaxPs2KAu7AAAAAAAAAAAAAAAAAAAAAAAAAAAKRW+7+Sdok9Ie+vs2UF3UVM97O0Q6sNb2nDSdaek/Bt65yuOyM23fcV2RFlIx6zuDhH9iHjWci9pIP2BCt3D+tGydUzqH8JXgqWlPGAy0wEwvvAG2W/d8Z5/2FtfiMPeANst+74zz/ALG2vxGAh6ATC+8AbZb93xnn/YW1+Iw94A2y37vjPP8AsLa/EYCHoBML7wBtlv3fGef9jbX4jD3gDbLfu+M8/wCwtr8RgIegEwvvAG2W/d8Z5/2FtfiMPeANst+74zz/ALG2vxGAh6ATC+8AbZb93xnn/YW1+Iw94A2y37vjPP8AsLa/EYCHoBML7wBtlv3fGef9jbX4jD3gDbLfu+M8/wCwtr8RgIegEwvvAG2W/d8Z5/2FtfiMPeANst+74zz/ALG2vxGAh6G7/pX8mHTj5hsQfZ7boyBfeANst+74zz/sLa/EY2EdO8DMWrp/wZa9wx68TcFt4dxlAzkW6oWjmNmIeyoSOk49xQhjkouzet1261CHOWiiZuKY1OCtQ7iGRlvUnPN6g/mlinsazGuaMjLepOeb1B/NLFPY1mArqDQn3IH9h9dvzrxR9UTwz2Bdc3SzaF6K9D1o6wGOrLUTYGDHd+XHjl3aCF6ryiJ59tExkwjIrMfydGSFDEaKuESK+FqnWlVC8WhqcPAGk4KxO92czTf/AJ+MD9p3Y94coB2NP7wfA/8Avbm/DYh6252sTTHtd9Alz6M9mrmS0dYOqK4MlY1vyGwtidV+6vCQs+w5heTvCfbozjGFYVYwDBZN0+MZ8VUqR6VTTUrw0AZiQ9baBvLf0iekhhn7QIEez/eANst+74zz/sLa/EY7x0y7Fvam4C1FYMzhmPRPmPH+JsRZZsDJGSr6nWcASFs+xrMueNuC6blljtp1y4JHQsMweSDwyDdZajdueqaShuAtQ2AgEPPKAdjT+8HwP/vbm/DYcoB2NP7wfA/+9ub8NgMn/ai84vrW9JDKnal+PBo9ibQe/bPylri1W5Gx9Psbqse9s65EuS1LkjDKmj5yClbheOo6TZGWTRVq2dt1CKpVUSTPUpqcYha+IeOwGq/uffNARvpH5p/5LaFpkUX92O2rOzt0e7Mlhh/U1qxxdhzJiWdMq3IpZ12uZpKXLBzR4GsVJVIwh3yHsZ9RsvVGvh+PXwRuMUvi4bDXKAdjT+8HwP8A725vw2Ar37795PWhLzzZV7EQQznReL3tPaNaINcOE9IFu6TdSOPc5zdiZTyLNXfHWUvKrOICLlbSiGMc9fUkYuPIVF27QWQSqmZQ1Tpm4xaU8Yo6AJ792W55vSX/AI+9exswNgkYy+wMz5hzTJtTdNuZ895AgsX4ttJ5dalyXrcp3KcPEEe2tJsmhnZ2bZ24pRd0skgTwaB61OenDwU4ajTi5QDsaf3g+B/97c34bASV5++AjNfmkyR2OmRg7Tn9dTH+aSH8WsNibJ23T2Rt/wCNchWHZuu/CVw3fe1j3ZaNqQDB5cZn05clyQMhDQUOyKrbyadXclKPWrJvRRRMlVliUOcheE1M1aR2BW2OfSD9602fud12rx46dNlyMba4izdwuosiqStbipXiqJnKcvDSla0NTxcPiAQ3DaA2B/M4bPT0ebe+tJkZgnvAG2W/d8Z5/wBhbX4jGgLszNqJs/tA2gjS1o31i6psZ6f9T+nnFkXjzNWGL6cTCF346vaOev3T23LgSjIiRYJyDZu8aqqFavnKVCrE4Fa14aUCzcMzHfUvL505+jf/AN6y4ukcoB2NP7wfA/8Avbm/DYqD7wbhbKe2q1NYpz7srbJmdbeHMc4m9re+MgYbTQeQVt3z+cL6b/NqRPPrwTksj+SnjZ9xUmyqXgViV8LxuEtApCi5RuV3l96ivRvN20iBC57wBtlv3fGef9hbX4jE+e75YVypsVdTeVc/bVKyJrRJhvIuJq43sjIOZE0GcDcd81uBjNUtqPPALzrk0j+Smbl7xVWySXgUT18LxuAtQ0gBERt7+Zx2hfo8XF9Zw4/BygHY0/vB8D/725vw2PC+0y2omz+18aCdUujfR1qmxnn/AFPahsVyuO8K4YsVxMr3fkW9pF4wdMbct9KSiI5gpIOW7N0qmV0+bJVKifhVpXgpUMnUfThf65if8zYfxSQly94A2y37vjPP+wtr8Rj9kfsCdscyfsXjvZ+53QatHjZ05WOxtviIt26xFVlT8FxVrxU0yGObgpWvBSvBSoDYL0//AAD4T80eN+xsKO3BCBjDbpbI3H+NceWHeeu/CVvXhZNjWlaN1wD95cZX0HcttwEfDTsO9KlbyiZXcZKMnTJzRNRQlFkD0Ic5eA1ec8oB2NP7wfA/+9ub8NgM37ea+eb1Z/42yexsOIDhMlt9c+4c1ObU3UjmfAmQILKGLbtd2me271ts7lSHlyMbWjGTszQ7xs0cVog6RVQPx0CfpkrwcNPGIbQGjBuQPk+a7fPJirsTOi8wM5HdLNozog0PYV1f29qy1IY9wZNX3lHHUzaEdeq8qi4n4uKtOXYyL1jSOi5ApkWjtdFBWqhkzUOoWhS1p4xbo5QDsaf3g+B/97c34bAR3b4HzP0p6R+FP+W5RlPDRa3nDatbO3WFsyJDD2mXVji7MeTVc6YpuROzbSczSsueDhFJ6srJUI/h2KHsZjRyhVavh+PTwpeKU3j4M6UB7w2XnOK6KvSQxX2pYDcIGHvsvOcV0VekhivtSwG4QADC/wBfflw6u/SQzL2/nhugDIh1l7C7a43/AKttS98WboQzdcFpXfnXKVyW1OsGVumYzEFNXnMSEXJtDK3AmpVs9ZuEXCNVEyHqmoWpilrw0oFeUawO6JczTYPn5zx2lZigH7wBtlv3fGef9hbX4jGjpu0OmHP2kPZb2bhnUri65cPZRYZizDPPLLuxNmlMN4eenmrmHkFCMXb1CiEggQ6qFaL1NUpa8Ypa+IBP+KGG+/fsJoS+duV/qeBF88U6t7T0F6wtcFn6P2Gk3AN9ZzeWHcmRnd3t7KQjVlIBtLRcOjHLPvyhIsKFI7VbrES8HVStapm41C04K1DMcFindXeeb09/NTKvY16PLfvAG2W/d8Z5/wBhbX4jE4G7u7IraUaVtqbhTM+obR/ljFGLbetzIrSavW6GkIlDxzmVtZ0yjkXB2c08cUO7dHIglxEDUqc1ONUtPGA0sx0Pqn8mLUb5h8vfZ9cI74HT2oeBmLqwBnK2Lej15afuPD2TIGDi2tC1cyUxMWVNx8ZHt6HMQlV3j1wg3Roc5S1UULQxi04a0DBoATC+8AbZb93xnn/YW1+Iw94A2y37vjPP+xtr8RgIegEwvvAG2W/d8Z5/2FtfiMPeANst+74zz/sLa/EYCHoBML7wBtlv3fGef9jbX4jD3gDbLfu+M8/7C2vxGAh6ATC+8AbZb93xnn/YW1+Iw94A2y37vjPP+xtr8RgIegEwvvAG2W/d8Z5/2FtfiMPeANst+74zz/sLa/EYCHoBML7wBtlv3fGef9jbX4jD3gDbLfu+M8/7C2vxGAh6ATC+8AbZb93xnn/YW1+Iw94A2y37vjPP+wtr8RgIehpBbkR5KGtv0hrE+zYoqBe8AbZb93xnn/Y21+Ixem3THRDqw0Q6cdWNp6scG3rg2473zbZ9xWnEXqjHou5yEYWIWNeSLKke/fkM3bvv/TKVUOmbwnioWtPGAtmgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8rWhaVMatClLStTGrWlKUpSnDWta18VKUp461r4qUAf6A4/W7bVpWtK3Nb9K0rWlaVmY2laVp4q0rSrnhpWlfFWlf6B/n53Wp8Z7e+mo37yA5CA49+d1qfGe3vpqN+8h+d1qfGe3vpqN+8gOQgPwsZONlCHUjJFjIppGoRRRi7buyJnrTjUIc7dRQpDVL46FNWla08fBwD9wAAAAAP5LroNUVHDlZJu3RLU6q66hEUUiU/pOoqoYpCFp/aYxqUp/bUfD/ADutT4z299NRv3kByEBx787rU+M9vfTUb95D87rU+M9vfTUb95AchGRlvUnPN6g/mlinsazGtZ+d1qfGe3vpqN+8jJK3pl6zf7ZTUA5Yu2z1se08VUI4aLpOUD1LZzOhqFVROdM1S18RqUNXgr4q+MBXdAB9FhDy8pRSsZFyMjRKtKK1YMXLuiVTcNS0Uq3SUoSpqUrWlDcHDwV4AHzhZ23RPnlrA8w+eOzDQVqvzRuv4sXD9CyX3YWbN0ft+ejtshYLmQhJdi2pgnOxKuHka8aoUOe2WlCFqquiROhjV8RS1Nwmr4qUqA1ax5J18+RBq79G/M32fzw9bDyTr58iDV36N+Zvs/ngGF6AAAAAAAD6zKAnZFH2THwss/b8YxPDso146R45eDjE8KgioTjF4acYvG4acNOGlB+v80br+LFw/Qsl92AceAfSfw0xFlTPJxUlHEVNUqR37F00KqYtOExUzOEk6HMWlaVrQta1pSvDWnAPmgAD9DVo7fLkbMmzh45U4fBt2qKjhdTgpWteIkkU6huClK1rxS14KUrWviH2fzRuv4sXD9CyX3YBzrAPw74U87eN+2MMN4mD/qWH/wArj/4REYSuA7TukmdcLHPbVwEIXLWOTGMaGkSlKUt4w1TGMaralKFpSla1rWtKUpThr4hu1QlK0hYilacFaRbClaV/ppX2Il4qgPqDF+29/PHbQv0h7i+rIcbQIxftvfzx20L9Ie4vqyHAREDTO3K3yBtRnpIf9lRAzMRpdbl3OQsZoK1FIyUvFx6p9R3HIk+kGjRQ5PzLiaccpHCyZjF4aVpxqUrThpwcPCAufCmvvqPkCadfSQL2LlxcH/O61PjPb301G/eRTx3zV02ubQZp6aW24QuB2jqLKss1hFU5Zwkj+ZssXwyqLAzhRNLjVoXwhi0Jxq0pw8NeABmbCXfYIc8ds9PSHt36smBFT+aN1/Fi4foWS+7CXHYMW1cbTbEbPly7t+batkdQtunWcOIp+igkSkbMUqdRVRAqZC0rWlKmMalPH/SA2Zh8ya/qaW/yx/8Awqo+mPmTVK1h5alKcNaxj+lKU/prX2Kr4gGDtqA+HjNnncyR2ymh1GO+8/WndJ87ZrOS2rgMQ+W8jmKYsNImKYprxmalMU1G1aVLWlaVpWla0rSvDTxDqX80br+LFw/Qsl92AceAfodNHbFc7Z62cM3KfB4Ru6RUbrp8NOGnHSVKRQvDStK04xacNK8NPEPzgAD6TGGmJQqh4yKkpEiRqFVOxYunZUjGpwlKoZukpQhjUpWtKGrStaU4aU4B+/8ANG6/ixcP0LJfdgHHgH1nsBOxyPsmQhZZg34xSeHexrxqjxzcPFJ4VdFMnGNwV4peNw14K8FKj5ID3hsvOcV0VekhivtSwG4QMPPZgqpIbRDRcsuqmiilqOxYdVVU5U0kyFulhUx1FD1KUhS08dTGrSlKeOtRt1/ndanxnt76ajfvIDkIDj353Wp8Z7e+mo37yPvJqJrJkVSUIqkoUp01EzFOmoQ1OEpyHLWpTFNStKlMWtaVpXhpXgAf9gAAAAPnv5aKi6J1k5OPjqK1NRKr942aUVqXgqaidXCidD1LStKmoXh4OGnCA+gA49+d1qfGe3vpqN+8h+d1qfGe3vpqN+8gOQgOPfndanxnt76ajfvIfndanxnt76ajfvIDkIDj353Wp8Z7e+mo37yH53Wp8Z7e+mo37yA5CA/kg4QdIpuGyyThusWh0l0FCLIqkr/QdNVMxiHLX+wxTVpX+yo/qAAPlPZ2EjVaISMzFR65i0OVF7INGqtSVrWlD0TXWTPUta0rShqU4K1pXxj8f53Wp8Z7e+mo37yA5CA+YxmoaUOdOMloyRUSLQ6ibF+1dnTJWvFoc5G6qhiFqbxUMalKVr4uHhH0wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwPKZzpYxyMomcyaidh3edNQhqkOQ5LfkDEOQxa0MUxTUoYpi1pUtaUrStK0HPBwHK3wXZJ+YN49nZEBhhZBzVmRO/r3ITLWTCEJd9ykIQl+XSUpCFmntClKWkrShSlpSlClpSlKUpSlKcA4h7dmZvlcyd6+3V3sPhZE+EC+vnjc/wBdvhw4B2d7dmZvlcyd6+3V3sHt2Zm+VzJ3r7dXew6xABpbbljd113fpC1hOrsue4bodNNRVrt2rm4pqSmnDZA2OGChkW60k5cqIpGUrU5k0zFJU9amqWpvGLoQpObkf5Hesn0j7V+zWPF2MAAAARjbaCRkIjZUa8pOJfvYuSZadL4cMpCOdLsnzRcjdDiLtXbZRJdusT/7VElCHL/YagxjvbszN8rmTvX26u9hsybbHmm9ffo333/DoDFNAdne3Zmb5XMnevt1d7B7dmZvlcyd6+3V3sOsQAdne3Zmb5XMnevt1d7Dg01PTlySCstcUzKz0quUhV5OakXkpILFSLQiZVXj5ZdyoVMlKFJQ6laELShS0pTxD5QAAv8A25R2PZV32TrkPdtn2tdB2V04sKzPcVvxM2ZoVSJnaqFbGk2jmqBVK0pU9EqkoetKVNStaUFAEaE+5A/sPrt+deKPqieAXg/aTwz8keMfUK1e6R9iCxpjm15AstbVgWTbsoRJVEklBWrBREgRFalCrIleR7Bu4KkqWlCqp0UoRSlKUPStBzYAAeSdfPkQau/RvzN9n88PWw8k6+fIg1d+jfmb7P54BhegAAAAADUq3RjG2Orp2R8bKXPYNlXHJ11FZlb1kZ61oKXf1QRUtvwSNXkgwcOKpJcY3g0/CcQnGrxS04ai0B7SeGfkjxj6hWr3SK2m5980BG+kfmn/AJLaFpkBQ+31uw7HtDT/AKG17Ss21LXXe5iykk8Wt23YiEVdpJ2VBnTScqRjNsddNM9anIRWpykNWpi0pWtajPIGjFvv3k9aEvPNlXsRBDOdATubtbCw1w7YvSlEz8TGTkW6fXnRzGzDBrJx7ihLOlzEouzepLtlaFNShi0UTNxTUpWnBWnCNc72k8M/JHjH1CtXukZIm7Lc83pL/wAfevY2YGwSA61Swxh5BVNZHE+NEVkVCKpKpWJa6aqSqZqHTUTUJFUORQh6UMQ5a0MU1KGLWlaUqOyaUpSlKUpSlKUpSlKU4KUpTxUpSlPFSlKeKlKf0D/QABi/be/njtoX6Q9xfVkONoEYv23v547aF+kPcX1ZDgIiBy+3sg37aTVVlal73fbLNwt7IXaW9cszCtVl+LQnh1W8a9bJKLcSlC+EOQx+LSheNwUpQcQAB2d7dmZvlcyd6+3V3sLdW53y8rlrXRn+EyrJyGTIZhp6M/YxGQXrm84xm+/PCKR9mtGFxqyTVu78EYyXslFIi3gzGJx+LWtK0xxco3K7y+9RXo3m7aRADSC9pPDPyR4x9QrV7pH7ozE+LIV+1lYbGmP4mUYq0XZSUZZtusH7NctK0Ks1eNY1Jw3VLStaUURUIelK1pSvjqOwAAB/laUrStK0pWlaVpWlacNK0r4q0rSvirStPFWlf6R/oAOtVcMYeXVUWWxPjRZZZQ6qqqtiWuoqqqoap1FFFDxVTnUOetTHOatTGNWpjVrWtaj+ftJ4Z+SPGPqFavdI7OABjy7ypCw1vbYvVZEwETGQcU1e2XRtGQ7BrGR7eh7PiDnogzZJINkqGPWpjeDTLxjVqavDWtaiCET47zXzzerP/G2T2NhxAcA0NdyksOx7vwDrkXu2zbUuhdlmDFqTNa4rdiJtVokpZc4dRJspJs3J0E1D0oc5EqkKc1KGNStaUqLuvtJ4Z+SPGPqFavdIpa7kD5Pmu3zyYq7EzovMAKme9zY2x1a2yNlJS2LBsq3JOmorDDekjA2tBRD+iCylyeFRo8j2DdxRJXil8In4TiH4tOMWvBQZaY1Yd8D5n6U9I/Cn/LcoyngH6Wb15HO27+PduWL5oqRw0eM11Wrtsumahk1m7hA5FkVUzUoYiiZynKalKlNSo7F9uzM3yuZO9fbq72HWIAOzvbszN8rmTvX26u9ht86DnTl7on0lvHrhd27dadMPOHLp0so4cuF1bDgzqrrrqmOqssqcxjqKKGMc5q1MY1a1rUYXA3QNAnkPaRPRvw12AgQHrgAAAFFXfXL0vG0LG0NntK7Lltc7268pleHt2dlIQzsqURBVTK5NGOm1Vyp1MapKK1PQla1qWlK1qL1QoYb79+wmhL525X+p4EBQk9uzM3yuZO9fbq72D27MzfK5k719urvYdYgA7O9uzM3yuZO9fbq72D27MzfK5k719urvYdYgA7O9uzM3yuZO9fbq72D27MzfK5k719urvYdYgA2vdi5IyEvsp9BknLP3spJPdOljuHshIul3r52udBfjrunblRVdwsf/AO5RVQ5zf2mqJOxFvsS+aZ0B+jfYv8OuJSAGZRvimRMgWptI8ax9rX1eNtMFNOlrOFGMBc83DM1FzTs4Uy520c+bImWMUtKGUMSp60pSlTVpSgqWe3Zmb5XMnevt1d7C1FvmfOX4y9G+1Pr+dFQ8BeO3LK/r7u/V/q/a3Zet23Q1aadbZcNW1xXHMTTdsubIzBMyzdGSeOU0VTJ1qQyiZSnqStS1NUviGjUM2jckPLG1j+jha/2kx40lwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwHK3wXZJ+YN49nZEc+HAcrfBdkn5g3j2dkQGDtkT4QL6+eNz/Xb4cOHMcifCBfXzxuf67fDhwDTp2Mewo2W2prZhaPs75s0uW7euU8k4yUnbzul3PXQ1czMpS5p9jR0q3ZTDdqkajVm3S4qKKZOBOleLw1rWsnnJsdjJ0M7U9Zby7+HOd3p5mTQJ5m1e2N0CZoBnYbd3LN/bALNWEsHbJ2fX0n4wzpjGXynlG2LaRb3A3ui+oe6HFqR064XutKZdILN4FsiwKk1WRQqQlDmTqpWpqwU8pO2zfTMuv1as3uETIb7h5Ymjb0cLq+0qQFJwBOnyk7bN9My6/Vqze4Q5Sdtm+mZdfq1ZvcIgsABaE0KbZHaMa+tYOnfRjqu1FzuVtN+pHJ1v4szLjiShrdj2F5WLcSqiUxBO3sVFs5Fsi8ImQp1WbpBcvB+goWovQ8mx2MnQztT1lvLv4ZkGxO52TQJ6SFifxC42sgEFnJsdjJ0M7U9Zby7+GRtqAtyHs/PObbSt1mSOt+1su5JtyCj0zHORjDwl5TUZGMyHUMZQ5GzJqggUyhjHNQlKmNU1a1rvODB/wBU/lO6jfPxl77QbhAdDgAAA956MtpnrW2frK9o/SXmqWxMzyK6i3t4IxkXCyFJhzDJLoRqitZaPemTq2ScrFLRGqdDUPWpqVrSlaeDAATp8pO2zfTMuv1as3uEOUnbZvpmXX6tWb3CILAATp8pO2zfTMuv1as3uEcVvneGdrvkizLrx9eWrq55m0r2t6XtW5olW3bRSSk4KeYLxsqxUURhE1kyOmTlZEx0jkULQ9akMU1KVpCsAAAAAAAANV/c++aAjfSPzT/yW0LTIqzbn3zQEb6R+af+S2haZAeLdZuz10jbQKBsm2dWmI4zLMJjqXlJ2z2MnIy8eSHlZlkhHyLpI0S9ZHVM5aNkUTFWMoQtCcJS0rWtax/cmx2MnQztT1lvLv4TpgAid05bEDZkaTcvWtnfAemW3rBynZajxS27pZTlzO3Mad+zWYOzJt38s5an8K1XVSr4VE9KUNw04K0pUSxAADrnMM1JW1iPKdxwrkzKYgMc3vNRLwhSmO0koq2ZN8xclKehiGMg6QSVKU5TFrUlKGpWla0GRfK7yRtl28pJN0dZV1kSQfvEUiUtqza0Kmk4UIQvDWC4f0SlpTx+PxDW7z98BGa/NJkjsdMjB2nP66mP80kP4tYBN/yk7bN9My6/Vqze4REFnHNuTNR+W79znmS5XF45QybPuLnva6HSDZs4m5t0miiu+WQZooNUjnTQSLUqCKZKcWnAWla1HVIAAvabrhsm9A+vbR/mzJGqvAkLlW8rWzf+asHMyUvPx6rGC/NaNf8AsEiUVJM0Tk9lrqq8c6ZlOE1acbgpSlKJY0ztyt8gbUZ6SH/ZUQAlX5NjsZOhnanrLeXfw9c6Pdk3oH0FX1P5J0qYEhcVXndFvVtWcmY2Xnn6r6Cq8Sf+wTpSsk8RKT2WgkrxyJlU4S8HG4K1oJGgAAAAAAAAAAAY/G81883qz/xtk9jYcQHCfHea+eb1Z/42yexsOIDgEgGjLaia4tn7A3tbOkvOExiaFyJLxc7eDKMi4OQJMSkMzXj450qaWj3p0zNmjhZIpUTJkNQ9amLWtKVp7T5Sdtm+mZdfq1ZvcIgsABc62Lus7UhtvtaDTRDtN8jv9TWmR5jG+spuMZXCyjoOPUvqwSRZ7UnavrZaxMnRaKNKv6pJUd+AU8ObwqZ+AvBbr5NjsZOhnanrLeXfwo47n5zwMX6OGa/+K2hqwgILOTY7GToZ2p6y3l38HJsdjJ0M7U9Zby7+E6YAILOTY7GToZ2p6y3l38KCOojbx7VHTdnrM2n3DWqe47NxJhPJ174sxnaTSBtZy1tmxbEuKQtu1oJu4ew7h2ujFw0czZJquV1l1CI0Mqoc9TGrrgjC/wBfflw6u/SQzL2/ngEjfKTts30zLr9WrN7hDlJ22b6Zl1+rVm9wiCwAE6fKTts30zLr9WrN7hHiDWbtNNa+0CZWTHatM1S+WWeOnUo9s9GTjIWPpDuZlFBCRVSrEsGVVKuUmyJTUWqehaE/RpStajwWAAJqt330v4P1h7T3DOCNRFkM8h4sua3shPZu1nzp8ybPXMNbDp/HKHcRzhq6LVs6TIqWhFi0NUvAahi8NBCqLFO6u883p7+amVexr0Bf85NjsZOhnanrLeXfw6j1AbupsfLPwNm27bd0f2tHXBa2Isk3HBSCdx3ec7GYhLNmpOMeEIpOGTOds9aoLlKoUxDVJShi1LWtK2Lx0Pqn8mLUb5h8vfZ9cIDB/AAAbWGxL5pnQH6N9i/w64lIEW+xL5pnQH6N9i/w64lIARsavNkXs+9duRY3LGqXT9CZSv2Jt5rarCekZi4GC7eCZrruWzEqMXJs29SJrOFj0OZKqlanrSpq0pSlPKfJsdjJ0M7U9Zby7+E6YAKK+3cxLYGwDwnhPOWydgENKGUM55OlsWZQui2lnFwObosWItdzdUfBOELrVmmqCLedbIPyqtUUVzHJQhlKp1qWtYLlJ22b6Zl1+rVm9wi2Jvt/kc6OPSPuj7NpAZtAC4dsZduxtSdTW090e4IzXqjuK9cWZJyeeBvO1ncDa7VtMxVLZn31GqrhlDt3SRfZTNurxkVkz8KdKcbgrWldOoYz+71883oD88ynY66BswAAAAAMyzbZbc/ah6XNp7qvwRg7VBcVj4sx7e8dFWjazOCtd02iGK1sQj5RBJd9EOHShTOnS6tarLHNwqVpw8FKUpppjG+3jLnm9cfnHiextuAPucpO2zfTMuv1as3uEXet1T2gGrPaA6eNVN5as8sSeWbjx/mi0bYtOSk4+Jj1ImEkbHLKvGKRIlkyTUIs/wCFeplSHPQ1eChqF8QyshpBbkR5KGtv0hrE+zYoC7sAAAAAAAAAAAAAAAAAAAAAAAAAAAgR2+G2DyJse8OYFybjvDdl5kfZgyZcNiSMXelwzlvNYZpC2sa4E37JeDbuFnDhdYvsc6S9CplT/TLWpvEJ7hSK33fyTtEnpD319mygDwBy3vU70GcD9ZmQe7h702Y29eZ71665tP8ApLuvSViGwLfzJdLy35K7revy85WYhUW0HKSxXDJhJMUmTlQyjAiNSLqFLQihjUrxqUGcOJtd3P55vQ15yZXsbcYDZDHAcrfBdkn5g3j2dkRz4cByt8F2SfmDePZ2RAYO2RPhAvr543P9dvhw4cxyJ8IF9fPG5/rt8OHALZ+hPeyM+6FtJWENJlraR8P35b+ErTNacZd0/ft6RcxONzS0lK+y37COYqsmy1FJE6Pg26hicRIpuHjGrQeteW96negzgfrMyD3cKPYANA7DGnmH3wCImNVeoe45LRxPaT5FLAUBaeGGjXIMRdsTcjYuQFrgmH98HYPWEi2dvjRyTRkRRsdsmVY56K1rQdzciE0xdObPHVnj7vEch3I/yO9ZPpH2r9mseLsYDLY25O7l4c2TWlW1dQtgaksmZcl7hyjD2Atbl4Wfa0DGt2knHSD08gk7hXa7o7lIzIpCJHJ4IxTmrWtK0oKlw1Ct8y5s7GnpIWn9Qzoy9QHpDSBqOmdIWp3CGpy3rajLxm8I5Ahb/jLXmXjqPipx3CqHUTj371iRR21br1PWh1m5DKl4P0aVFvTlvep3oM4H6zMg93Cj2AC8Jy3vU70GcD9ZmQe7h7hi9zt066koyO1FTWsvNVszGfGDPNMtbcXjyxnsbb8nlNunfL+Ejnjt+R07YxTqdVYNHLkhHC7dumqsUqhzUpnNDd/0r+TDpx8w2IPs9t0BT05EJpi6c2eOrPH3eIpg7XrQZamzY1zZJ0l2Xf8AcOTLfsaGs+Ua3ddEVGw0w/Pc0GhLLpOGESqsySI1UVqikZNStTkpQx6UMNsIZGW9Sc83qD+aWKexrMBXUFlLYGbC/Fu2HgNQszkXPF/4aUwvMWfGRqNlWvbtwkmyXMykXS6r4065bmbHamZFIkVvQ1D0Oap+CtKCtaNCfcgf2H12/OvFH1RPAOzeRCaYunNnjqzx93iIn9tFuy+EtlxocuPVlY2p/KeVJ+DyHjyykrRuyy7Sg4ddtesstHOXyj+HeLvSrsSJUUQSKTwapq1opWlKDTkFYne7OZpv/wA/GB+07sBk+jubTpi9jm3PuF8Oycq7g47KWUbGsB9MsEEXL2KaXbckdBuJBo3cGKgu5ZpPTLopLGKkooQpT1oWtajpkettA3lv6RPSQwz9oECAvfciE0xdObPHVnj7vEORCaYunNnjqzx93iLwgAKPfIhNMXTmzx1Z4+7xDkQmmLpzZ46s8fd4i8IADPZy3tNr33Vy7TbLHBGL7V1XWJHxzPPpMrZbmpexrtUlsuUUPIW+aCs5F7D0joetvo0Zu6L+yXFHCnhyF4heHrHlvep3oM4H6zMg93DwpvgnO/yXo4YW/wCO5RVmAXhOW96negzgfrMyD3cHLe9TvQZwP1mZB7uFHsAGkzspt6jzvtDtc2GtJd36UcSY5t/J7idQfXdbd83jLzEXSIg3ssmZowlGSTJeqyjQqJ6LKFoUh6mLwmpSguvjH23Zbnm9Jf8Aj717GzA2CQHUmfvgIzX5pMkdjpkYO05/XUx/mkh/FrDeJz98BGa/NJkjsdMjB2nP66mP80kP4tYB8sAAAFh/ZEbwzl/ZGYRv7CWPtOmN8wRl+5A/P93OXld1z2+/j3f5IaxH5PbtoRou3Vb+DalW8MoaivHPUvBxaUqK8AALwnLe9TvQZwP1mZB7uE4mwl3hrL+1z1GZNwjkHTpjbD8ZYeLq3+0nLNu657gfyDuk6yiPye4bTbRBuk28G6Mt4VM1VeOSheDi1rUZW4uUbld5feor0bzdtIgBpoAAAAAAAAAAx+N5r55vVn/jbJ7Gw4gOE+O81883qz/xtk9jYcQHALOWwM2C2KdsNjbUJfORc/ZCw06wxfFn2nGsLKtW27hbzbe5YGQmF3b5WcdN1GyzVRkVFJNvQxDkOYx60NSlBYC5EJpi6c2eOrPH3eI+XuQPk+a7fPJirsTOi8wAoW5b2Y9kbq7aRtqhgjKN1arr7jZFlgImKMtwkRY1pKxOXaqJyFwGnbOWezJZGHpb6NWTSiHsZxVwp4c5eIXh8u8t71O9BnA/WZkHu4Tu74HzP0p6R+FP+W5RlPANArSXviWorUbqbwRgaZ0aYVtuKy7lC0LAkJ+MyHfLyQh2lyy7aNWkGbV0wI2cOGpF6qpIrmKkcxaFPWlK1qL9ww99l5ziuir0kMV9qWA3CAAYX+vvy4dXfpIZl7fzw3QBhf6+/Lh1d+khmXt/PAPI4AAALEOwM2KuNNsPcOoWFyLm6+cNJYXhrPlI1eyrbgLhUm1LmfSLRdJ8WdctytiNSsinSM34xjmOah+ClKCu8L5+5A/t3rt+aWKPrieAepeRCaYunNnjqzx93iOvsn7GfG+7ZWfIbWfC+ar31MX/AIMVa2zF4iyfbkDZtnzyGSlqWm9dSE/ajh3NNVYxu7M7akboGIssSiatSkrWoviiutvUXMyahPnXirtkyAVtOW96negzgfrMyD3cOFZJ30fUpknHV/Y6e6JsHRjO/rKuqy3ck1yRfqzmPbXTBP4Nd83RVjqJKrtEnx10U1a0TUUTKU9aFrWopYAAAAANrDYl80zoD9G+xf4dcSkCLfYl80zoD9G+xf4dcSkAAAACIHbCbIXHm2AxRifFGRMxXnhxhii/5K/2EtZdvwdwvJd3JW+vb5494hOLt0UG6SK9XBVUTGVMoWhK04ta1FfnkQmmLpzZ46s8fd4i8IACiXf+70Yh2F1nz21nxbqKyRni/wDRGz9tm2MRX/aNsWvZ98yB1krUrET0/brpzNRjOiFxrO/ZEegov4ZsknxeIc9aeP8Alvep3oM4H6zMg93C25vCnMya/PMyn2xtcYz4C8/bW+zamZ247fhFdD2CkEpmbiopRdPJV/mURTkX6DQ6pCmjqFMdMq1TlKavFqYtKV8VRobWdOK3NaNrXIugm1WuC3IOcWbJGMdJurLRjV+ogmc9KHOmidxVMhjUoYxS0qanDWowWseft/Y3zwtn66ZDeJxP8FuNfmBZvZ2NAc/FT3XxuomBNe2rXMmrS69WuXrAuDMc+1n5G0besOzJWHhVW0THxJW7J/JPknrlM6bAi1TrplNQ6hi0pxaUqLYQAKPfIhNMXTmzx1Z4+7xE/ux42PmO9j3jLMOMsd5kvTMjLMF9wt9yMpelvQdvOoZ1C2/S30mDJCDcOEXDddGnshRVcxVCqfoFpUvjEw4AAAAAAAAAAAAAAAAAAAAAAAAAAAACkVvu/knaJPSHvr7NlBd1FIrfd/JO0SekPfX2bKAM3wSQ7I3VTjLRPtENNGp/MZZ8+N8T3g+nLoLa8YWYnasnFvS8YnSPjjOGpXSvsl8jxiVXT4E+Obh8XBWN4AGqJyxPZM/9HqQ6qW/4jHFr53vvZSXDZN4QDBpqM9nTlrXBDsvDYsQTR9lycS7ZNvCn/OKvET8MuTjn4K8UvDXgrwcAy5AAcgu2TbTV1XNMs+P7ElrgmpNr4UvEU9jP5Jy6Q8IThrxT+CVLxy8NeKbhpw14Bx8AAAAAGkruR/kd6yfSPtX7NY8XYxSc3I/yO9ZPpH2r9mseLsYCojvmXNnY09JC0/qGdGXqNQrfMubOxp6SFp/UM6MvUB3fpswDfOqfPOKtOuMzRBL/AMw3jF2PaZp99WNhizMucxGtZJ+VFwZo14xK+EWoirUlP/sqLIvI7NrN/wBZpv61nH4cESOxO52TQJ6SFifxC42sgGV3yOzazf8AWab+tZx+HBp6YQtCVx9hfENhTtW1ZyyMX2BaEzVmrVdpWVtq1ImGkatV6lJVZtV4yWqgrUhKqJcU9Sl4eCnaAAAyMt6k55vUH80sU9jWY1zRkZb1JzzeoP5pYp7GswFdQaE+5A/sPrt+deKPqieGewNCfcgf2H12/OvFH1RPAL6IrE73ZzNN/wDn4wP2ndizsKxO92czTf8A5+MD9p3YDJ9HrbQN5b+kT0kMM/aBAjySPW2gby39InpIYZ+0CBAboQAACs7m7ettmHgLL+SMJ3y1z+a8cW3jOWPc1YjGaD6LrM2++Vj39WDys+jVy18OifwK1Uk6qE4DcQvDwDq3lieyZ/6PUh1Ut/xGM63ai84vrW9JDKnal+PBoCbfb/bQHBW0q1+vNSmndO708eL4gxzZBC3vBlt6b/LNrFmSydax5Hb2lGtavkPY63h+FX9P9AvF8cJAAAAAAJR9jPq/xRoR2iGCNT+bCXGpjfHLq41rgLacUWanaklLekIxt7CjjOWhXFfZLlPwlKrk4qfGN4+Dgrf95Ynsmf8Ao9SHVS3/ABGMrsAGoRlPe8NlTeOMMj2jEtNRVJW6bDu+3IyrnFqCTekhOW9IxjKrhX84jeCR9kuk/CqcU3ET4xuLXg4K5gkk4I7kZB0lw+CcvXThPjU4DcRZdRQnGp/ZXimpw0/sqPxAACxppX3X3aSav9PGJdTWKHOCSY5zPaLS9LQLceRloqcLDvV3DdGknHFgnJWjrwjVTjI0XVpSnFrxq8IrljaA2B/M4bPT0ebe+tJkBQz5HZtZv+s039azj8OByOzazf8AWab+tZx+HBqiAAyu+R2bWb/rNN/Ws4/DgkE2d2lvJe64ZRuzWFtKjQLrE+arRrhCzyYHkjZIuQt51kULooaTilm8EVnFfk2NcU9mUcq19keDT8FwG41NEAU199R8gTTr6SBexcuA705Ynsmf+j1IdVLf8RhyxPZM/wDR6kOqlv8AiMZXYANUTlieyZ/6PUh1Ut/xGHLE9kz/ANHqQ6qW/wCIxldgA1ROWJ7Jn/o9SHVS3/EYcsT2TP8A0epDqpb/AIjGV2AC6prH2NerjbvahL62nuiZbGqGm/UUpHOrASyvdill30VK1Y9vbEn+WrcSjZUjA1ZKNcVb0K+X8Kh4NStS1NxaeX+R2bWb/rNN/Ws4/Dgup7spzMmkz/BXt2ymBPiAoR7ODJtubqdauTMNbTqj51d2re4ITJuLDYBb0yXGktzHsc5tWepcTtdSArFvqycs1qzblScUXb0UVqoTi0LWSjlieyZ/6PUh1Ut/xGIU99+8oPQl5m8q9toIUZwGjfr42imAt5TwGvs1tngnebbUPIXdbubkFM2wJMfWT+ZuLTPFLlKe4EXs2cspUs6y9gM/YNaOa0V4VU+J44ROR2bWb/rNN/Ws4/Dg+FufnPAxfo4Zr/4raGrCAzCML7tLtEtA2Wcd61s5OcIqYe0t3dCZvyWS0chLTdznszHz1K4J4sDDnhGhZKVqwZq0ZszOm9F1uKnVUlK8alkPlieyZ/6PUh1Ut/xGJxNqHzdWtX0b8qdln4w9wGqJyxPZM/8AR6kOqlv+Ixmaapsj2/mHUrnzK9p0eltfJGX8h3xb1JJvRpIUhrnuqUmI2j1rQ6lG7qjR2l4dGih6Jq8YnHNwcNehgAAAAAXz9yB/bvXb80sUfXE8KGAvn7kD+3eu35pYo+uJ4BoUiJLbfaKsw7QTZ35X0wYJPbCeSLznbHkYg14S5oKCo3t64W0m/wDZMiVq8Mif2MkbwJaIG8IpwF4S8PCJbQAZXfI7NrN/1mm/rWcfhwcWvjdGtqjj+yrwvydd6d6wdk2tcF3TNGeUV13dYq24l3MyNGqFbeJ4ZxVmyW8Alxy+EV4pOMXh4aato6H1T+TFqN8w+Xvs+uEBg/gAANrDYl80zoD9G+xf4dcSkCLfYl80zoD9G+xf4dcSkAIStott8dDuzDzPC4K1IIZbVvWes5jfDE1i2SlccT+RpB06Zt6KvTyzGpHXhmivHR8FWhS8WvHrw8FPAHLE9kz/ANHqQ6qW/wCIxWr3zPnL8Zejfan1/OioeA1ROWJ7Jn/o9SHVS3/EYcsT2TP/AEepDqpb/iMZXYANDbawbzts4dZuzw1TaYcQts5kyRmHHhbYtM1zY6RiIIslS4IWTrWSkSzjkzRD2MwX/WUQUrx+IXi/pcNM8kAAcwx5+39jfPC2frpkN4nE/wAFuNfmBZvZ2NGDtjz9v7G+eFs/XTIbxOJ/gtxr8wLN7OxoDn4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKf2+B6Y9QepzTNpBgNPeHb/zFNWznW85i4IuwLee3C8h4t1YB2TZ/IIMk1Dt2q7utG6ap6UKZX9CleEXAQAYifvTG0v6D2pDqzn/ALuOC5K2cuu7Dlkz2SMp6Ts42DYVrtSPbiu26LDmIqChmii6TYjiQfuECotkjOFkkaHUNSlVFCF/prQbkwhK3jDmZNcvm2iu2VuAMbwAAAAAAAAAF/vdA9Z2lHTJpV1X25qD1BYsw9O3Hny25mBib+uyNt59LRSGP2TJaQYoPVUzrtUnZDNzqkpUpVS1JWvDQW8ffZ9mh04dN/WZAfeBiJgA0Yd7G1x6QNSGz2x9ZWBtR2JMtXayz7bMy7t2xbwjJ6WbxTeFmklpBVozVOqRqkoqmQ6tacUpjlpWvjGc8AAJG9kPfNnYz2m2iW/8gXJEWfZVp59syZuW5594lHw0HFNV1quZCSer1Kk2ao0rSqiqhqFLStOGo10ffZ9mh04dN/WZAfeBiJgA27PfZ9mh04dN/WZAfeA99n2aHTh039ZkB94GImADbs99n2aHTh039ZkB94Gdxt8tLmorXdtL8wakdG2GMhalcC3db1gR9sZbw/bj68rFnXsDbTaNmmsbPxaarN0tGP01GjwiZ61QXIZM/AagqtDXN3VvmZNPnztyt2yeAMz73pjaX9B7Uh1Zz/3cXEN1sfstmLauq+L2hLlHR1I5TuDH7/HLPPx6Y8cXoygY6WbzTm3U5vwBpJGMXdNknh0ONRA66ZT8FT0F9wZ7G+/ftxoS+amV/reBAXG/fZ9mh04dN/WZAfeBBfvE+onBe0H2ad36cNEOVrI1S55lssYmuqMxLhWdZ3xfL627VnXD25JttAxJ1nisdCNFCOZFyUlU2yJynUrSlRlxiztuifPLWB5h88dmGgCJX3pjaX9B7Uh1Zz/3centE+y42ilp6wtLtz3Loy1BwlvW9n3E8zOTMjjqcbR8VExt7wrt/IPXCjehEGrRqkquuqetCppEMc1aUpUbJwAAAADHl2jezD2hd868tXV42fo5z/clrXNn3JMzb8/EY8m3kXMRT+43q7OQYOkkKpuGrlE5VEVSVqU5DUNSvBUeLfemNpf0HtSHVnP/AHcbdgAMRP3pjaX9B7Uh1Zz/AN3D3pjaX9B7Uh1Zz/3cbdgAMRP3pjaX9B7Uh1Zz/wB3D3pjaX9B7Uh1Zz/3cbdgAMNLKOzv1y4SsmYyRlzSpm3HdhW+VA83dt2WLLxEFFlcrkbNzPX7lEqKFFl1E0U6nNTjKHKWnjqPGg2Cd5p5mTVp/gLK7ZQ4x9gH7I6Pey0gxioxqs+kpN42j49k2JVVw8evVyNmjVumXhMos4XUTSSIWnCdQ5S08dR79T2Tm0sVIRVPRBqPOmoQqiZy40nqlOQ9KGKYtfY/joYtaVpX+2lR5RwD8O+FPO3jftjDDeJg/wCpYf8AyuP/AIREBiT+9MbS/oPakOrOf+7jWm2KGPb4xRspdC+OclWrN2RfdoYKg4i6LTuNitGzkFKIyMqoqwk2C5SrNXSZFUzGSULQ1KHLWtPGJRgAAAAAVQd7h04541K6JcD2ngHE185euWHz6WZlIOw4F5cEkwivzSlG35QdNmRFFEmvshRNHwxqUL4Q5S8PDWgtfAAxE/emNpf0HtSHVnP/AHccOyDs2te+KLLuPI2SdI+drIsS0I1WYui7LjsGZjYOBi0TEIq/k366BUWrVM6hCnVUNQtKnLStfGNx0REbe/mcdoX6PFxfWcOAxfgAAAAABqebvLtD9DWEtk1pkxvlzVVhLHd+2+0u8s3aV2X1ERE7FmdXZKuW5XrBysRZCqzdRNZOhy04yZymp4qibD32fZodOHTf1mQH3gYiYALj++EaotO2p3OWjGX09Zmx9mOLtXFGSo2439gXExuFtCv393wzpk0kVWSihWy7lukosimpWhjpkManipUU4AABaX3PzngYv0cM1/8AFbQ1YRlPbn5zwMX6OGa/+K2hqwgPB+1D5urWr6N+VOyz8Ye43CNqHzdWtX0b8qdln4w9wAAAAHrnDugfWjqEspvkfCGmPMmU7DdyEhFNrtsqy5Wcgl5KKVohJMk37RE6JnLJYxU3KVDcZI9aUNSlajyMNYHdEuZpsHz8547SswGcV70xtL+g9qQ6s5/7uLp+576RNT2mK89ZzvULgnJeHG11WxjRvbi9/wBryFvJzS7CVmlHqUcZ6mnRydqmskdYqfDUhVC1r/TQXnQAAAAAdD6p/Ji1G+YfL32fXCO+B0Pqn8mLUb5h8vfZ9cIDB/AAAa5+yF2lugHGWzI0SWBkHV7gaz71tPAVmw1zWvP5AhY+Zg5VqgtRzHyTJdcqrV0hWtKKIqFoYta8FaCR332fZodOHTf1mQH3gYiYALRu9j6hMH6kNoPjy9cC5TsrLVpMcBW1DPLhsWcaT0U2lUJuZVWj1nbM50iOkklUznSrXjFKcta08Yq5AADvHBmmfUBqampq3NPuIL9zDPW5GJTM7E2Db724X0TFLuiskZB83ZJqHbtVHZytyLHpQtVTUJSvDUem/emNpf0HtSHVnP8A3cWVdyQ8sbWP6OFr/aTHjSXAYifvTG0v6D2pDqzn/u4e9MbS/oPakOrOf+7jbsABie2LsodpQzvaznbrRHqNQbNbqt5y5XVxrPETRQQl2aqyqhqt+ApE0ymOc1fFQpa1r/QNovGbRywxvj9i9QVavGVkWo0dtli1Is3ctoFgiugqSvjIqiqQ6aha+Mpy1pXx0HNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJW8YczJrl820V2ytwTaiEreMOZk1y+baK7ZW4AxvAAAAAAAAa8WwS0qaYb42Qmhi67006YNu26JrEaruYuO5sUWLOzsq6pdtypUcyUtJwTp+9Xokmmn4Vyuqp4NMhONxSlpSXv3FOjnoo6cOpLG34bAYUQC5DvluJMV4j1a6RYvFONbCxpGS2nu5n8pHWDaMBaDGRfJZEfN03j5pAR8eg7dJoFKiRwumoqVKlEynoSlKCm8AALWu6F4wxtlbaM5Ft/J+P7KyNAt9PV0P0IW+bXhLsikXyU5CETeJR86yftE3SZDnIRwRKipSnMUp6UNWldKj3FOjnoo6cOpLG34bAYUQDdd9xTo56KOnDqSxt+Gw9xTo56KOnDqSxt+GwGFEA3XfcU6Oeijpw6ksbfhsPcU6Oeijpw6ksbfhsBhRDXN3VvmZNPnztyt2yeCZD3FOjnoo6cOpLG34bHeNmWLZOOIBramPbQtixbXYqLqsrcs+Bi7bgmirlSqrhRtEw7VmwQOurWqix0kCmVUrU56mNWtQHKhnsb79+3GhL5qZX+t4EaE4z2N9+/bjQl81Mr/W8CAoXCztuifPLWB5h88dmGgrEjmFjZCv3GM+ldeNr2uzH9zoNnLJG47LuKXtedSZvSUTeNUpaEdsn5G7pOlCOUSr0TWJShVCmpTgAb5ADCi92trG6V2o/rtyT+JB6o0M6w9Wk1rO0pxExqe1BSsTKahcQsJKMkcx5Cex8gxd33BoOmb1m5uFRu6auUTnRXbrpnSWSOZNQhimrSobWoAAAAxgtpbq81XW7tAtYsFb+pnP0HCROoXJzCKh4jMGQI2LjWLa5nybdmwYM7gRas2qCZaERbt0k0kiUoUhC0pSg8P8Au1tY3Su1H9duSfxIA3XQFZndNcjZByjsnY66Ml3zd+QrlNqEzCwNcN7XJMXTNmYtD27RqzrKTjx8+q1bUUU8A3qv4JHjn8GQvGrw2ZgAAABAhvNPMyatP8BZXbKHGPsN9K77Ls/IMA+tS/LVty9bXk6J0krcuuFjbhgn9EVCrJUexMs2dsHVElSEUTosgehFClOXgNSlR0V7inRz0UdOHUljb8NgMP3APw74U87eN+2MMN4mD/qWH/yuP/hER4rzXo80lwuGstzMPph0+xUvE4yv2TipSNw5j1jIxskwtWVdMZBg9bW8k5aPWbpJJw1dN1E1266aaqRyKEKamM3Ma0tYSMtKIpaqtRiSSUi9TSTTzXkciaaZHKpSEIQtyUKUhC0oUpS0pQpaUpSlKUAbpgDCi92trG6V2o/rtyT+JBsBbDW6LlvTZH6CbqvC4Jq6rnnMBwL6auK45R7Nzku9PJy5Tu5OVkl3L585OUhCmXdLqqmoUtKmrSlAErYAAAACopviGVcnYm0L4AmsW5FvnG8w+1ClYPZWw7rnbSknjH8z5VX2G6ewL5g5Xa+FKVT2OqqdLwhSn4nGpStAt1iIjb38zjtC/R4uL6zhxkM+7W1jdK7Uf125J/Egk+2LeofPuaNqlodxZmDN2W8qYyvjOcFB3pjvIuRbuvWx7thV4+UUXiLltW45eSg52MWUSSOqwk2LpqodMhjpVqQtaBBMA3XfcU6Oeijpw6ksbfhsfOmNFejskRKnJpT04lMWNfGKYuE8b0MUxWytSmLWlt8NK0rSlaVp46V8dAGFmA7Vzs1bMc35kZMm6LRmzyrkNq0atkiIN2zZvd0wkg3boplKmiiikQiaSSZSkTTKUhC0LSlB1UAAAAAAAC0vufnPAxfo4Zr/AOK2hqwjKe3PzngYv0cM1/8AFbQ1YQHg/ah83VrV9G/KnZZ+MPcb80zDRFxRUhBXBFR05CS7RdhKw8uybSMXJMXJKpOGb9g8TWau2q6ZjJrN3CSiSpK1KchqVrQedvcU6Oeijpw6ksbfhsBhRAN133FOjnoo6cOpLG34bD3FOjnoo6cOpLG34bAYUQ1gd0S5mmwfPznjtKzE7nuKdHPRR04dSWNvw2M1PeespZM0xbVm9cVabshXvgDGDLDOGZlnjrC11TmL7GaS8zbzpxLyja1LJfQkEhIyrgpV5F6mwK5eqlKo5UUPSlaBqjgMKL3a2sbpXaj+u3JP4kF4Xcxc4Zny9e2ttHK+W8l5MRhrVxerEJX/AHzc14JxarmWnCOFI4lwScgVkdcpCFWO2omZUpC0PU1C0pQL7AAIAN5vvq9scbIPPV14+u+57GuhjdGMEmVx2hPSltzrRNzd7NJwm2lod0zfoEXSrVNYqS5Sqp1qQ9DFrWgCf8dD6p/Ji1G+YfL32fXCMRr3a2sbpXaj+u3JP4kH5nusnV1JM3cdIao9Q75g/bLsnzJ5mbIrlo8ZukjoOWrputcR0XDdwiodFdFUh01UjmTOUxTVpUPNoAAAAAAAAALsO5IeWNrH9HC1/tJjxpLjBJx5lvKmI37+VxVkq/caScq0Iwk5Gwbun7QfSLFNajhNm+dQEhHru2pFylWI3XUUSKrSihSUPSlR2z7tbWN0rtR/Xbkn8SAN10BkN7BPVXqfvja96FrUvTUXnK7bXmsvHaTNuXLle+pyClWv5pXKr7GkomTnXTB6h4VNNTwTlBVPjkIfi8YtK015AABxO/lVULFvRdFQ6KyNp3GqiqkcyaiSqcO8OmomctaGIch6UMQ5a0MU1KVpWlaUqMQjKOs/WA2yZkRs21Uai27dvfV3IIII5qyOkiiilPyCaSSSZLjKRNNMhSkIQlKFIUtClpSlKUAbkYDCi92trG6V2o/rtyT+JA92trG6V2o/rtyT+JAG66AwovdraxuldqP67ck/iQaFW5l5dytl3S7rLksrZLv7JkjEZ8shjFP7+u+4LveRjJbHhXCzRg5uCQkFmbZVf9cog3OmkdX9YYtT+MBczAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJW8YczJrl820V2ytwTaiEreMOZk1y+baK7ZW4AxvAAAAAABsvbvTzMmgTzNq9sboEzQhl3enmZNAnmbV7Y3QJmgGbVvuHliaNvRwur7SpAUnBdj33DyxNG3o4XV9pUgKTgC3duZvOY5L9G+7Pr6CGoUMOjQVtDdS+zay3LZt0tT1s29fs3aj2y37y6bUjbvYHgpBy2duUU46U/UJLmWaI1K4L+sIWhi08RqiYPlbm2b+VPDPUVZwDWUAZNfK3Ns38qeGeoqzg5W5tm/lTwz1FWcA1lAGTXytzbN/KnhnqKs4an+CrsmL8whhu+biVRXuC88VY9uydWbIEat1pi4rRiJiTVQbJ/q26Kj14udJBP8AQRJUqZf0S0AdqgAz79uzvCu0r0GbSDLemvTvfmNYTFloW/YchCx1xYqtu55VJzP242kpEy8xIf8AqnBVHSpzJkP4kiVoQv6NKANBAZ7G+/ftxoS+amV/reBESXK3Ns38qeGeoqzhGBtDNq/rF2oMjjiU1aXRZ1yO8VMpphZ5rSseIswjVtPrtnEiV4SK8T4x1WiNUjLeNKlDUL4jVARtAAm53fTQ7gDaGbRy09NupeFuCexbL4rypdb2Ptq5H9qSh5i1IRu+h1SS8b/6pNFJwoYyyFP0Fy1oU/ioAhGHrbQN5b+kT0kMM/aBAjTe5JHsZPkszN163iOtsybtNsrtJuJcl6oMN47ypF5a082LdOZ8aSUzmC6J2JYX1jaGeXdazyThXn/pJZi3molmq6jnP6h4gQ6Cv6ChgFq0Bk18rc2zfyp4Z6irODlbm2b+VPDPUVZwCI3ai84vrW9JDKnal+PBo7JzFle8c65UyBmTITpm9vjJt1zN6XW7j2KMYxczs88VfyKzSPb/AKhmgdwqcybdL9WkWtCl8VB1sA1X9z75oCN9I/NP/JbQtMjGj0L7e3aK7OrBiWnbTHfGOoDGSN13Beacfc+MLeuyTpO3NVpWVWrLSf8A6mqClWTfwTf/APZo8U3E/wDdUeyOVubZv5U8M9RVnANZQBTu3Y3bJa4tqDl3VNZ+rS7rHuSExVjew7ls9G0sfwlmLtZWeueUi5FR44iv03ySjRqiVNFb9BI9KnL4zVFxEAARSbbDVlmTRFs38/ak8BykNDZTx81tpa25Gfg2dxxSB5O446Nd1cw7/wD9K6oZq5VKSin/ALDVoenjpQZ43K3Ns38qeGeoqzgGpzn74CM1+aTJHY6ZGDtOf11Mf5pIfxaws6WZvTe12y3eFqYqvPJeInVn5NuSCx9dbVlhS0mLxzbV5yjW3J1Bo+R/XM3K0XJOk0HSX6xuqYixP0iUFwRpumWxslGjaTd4uzIZ3It0XzkxM53gQhnDtIrhYxSU8RC1UUNUpaeItOClPFQBk5jaA2B/M4bPT0ebe+tJkeE+SR7GT5LMzdet4irLrG2520D2Tmp/Nezh0cXpj619L+kC9n2HsKW/eWNYC+boibJh0Gz5k0m7umP/AKnPviOJJ0ZSQe/r1CmKU3iJQBp/AMmvlbm2b+VPDPUVZwuu7tZtI9Ue0x0o5iyzqruG1rivKzcy/mXBurUtCLs5mjBfm1HyfgV2MX+pcL+y3CpvZCn6ziVoT+ilAFjcU199R8gTTr6SBexcuLlA8G6/9m7pc2mGNLWxLqrt66LisyzrrpekG1tS7pOznqM7SPXjPDLv4v8AXOEPYjlUvsc/6vj1of8ApLQBh8iXfYIc8ds9PSHt36smBoO8kj2MnyWZm69bxHmnWNsMNn3snNMGa9o9o4svINr6oNIFkvsw4UuC8slT982vE3tDuGrFi7m7RmP/AKZPsSN5F0U8e9/UKGMUxvGSgC30PmTX9TS3+WP/AOFVGT9ytzbN/KnhnqKs4foab2dtk5N02jXeUcNmayDhFi5KTBlnkOZu7UKgsUp6eMhqpqGoU1PGWvBWnjoAr36gPh4zZ53MkdspodRjVvszdZdkTluz7UyteeNMuurwydbUFkK7HTLNV2sGbm5b0i2tyTrhoxR/Us2y0pJOlEGiX6tukYiKf6JKDkvJI9jJ8lmZuvW8QGTWA1lOSR7GT5LMzdet4hySPYyfJZmbr1vEBk1gNZTkkexk+SzM3XreIckj2MnyWZm69bxAVAtz854GL9HDNf8AxW0NWEUktpps/wDTfu62mVxtFNmRBXJYOptjfNqYYbz+Tbpkcs2yWxcmGfkutma07l/+mGfOSwjD2JI1/Xs6kU8F/wDtDCuxytzbN/KnhnqKs4BrKAMmvlbm2b+VPDPUVZwcrc2zfyp4Z6irOAaygDJr5W5tm/lTwz1FWcNRPSfkK5ctaYdPmUbzcNnV25Dw1ji9Lmcs2iTBo4nbktOKlpRZsyR/UtEFHrtY6TdL9WiSpUy/oloA9AjJ93uznlr/APMPgfsw7GsEIWNcOwF2ce0Mz1J6ktS9jZGnspS9t23aj2RtnKNxWpFnh7UaKMYdIkRG/wDpU1km6hirLl/TXNwGP46AMa4Xz9yB/bvXb80sUfXE8JxeSR7GT5LMzdet4iSXZ57IHRRsvpLJErpLtS9bbeZVZQsfeBrtv2avMjltALuXMaVmSW8TEyartaqp0fGrSpaG8RaAJPxXW3qLmZNQnzrxV2yZCxSPLOsrRzhDXlgS6NNeoiJnJvFl4PYV/Nx1u3A9tiVVcwD9OSjjITEf/wCqblI6SIZQpPEqThIbxVAYVoDWU5JHsZPkszN163iHJI9jJ8lmZuvW8QGTWA1lOSR7GT5LMzdet4hySPYyfJZmbr1vEBk1gPc20xwTj3THr71Y6f8AE7KQjcb4lzLdNl2YwlpNxMyTWCilUiM0Xso6/wDUvlyFPXjuFv1h/wCkw8MgAC8Nu4Wwx2fm0m0V3tm3VLZeQLhv2EzLPWXHvLWyVP2gwJBMIqKdtkVI6L/9OouVZ0tUzg36ZymoWviLQWDuSR7GT5LMzdet4gMmsBc23mfYs6EtmJp006ZH0nWffdt3RkfMk5Zl0OLsyHOXk1cQTGzHc03RatJX9U0XK/RIczhL9YZOlU6/o1qKZICZjd6+eb0B+eZTsddA2YBhA6X9SWUtIGe8Z6k8KSMXE5TxLP1uWzJGbiGs/FNZWrB5G1Uew73/ANK+S9ivnBfArfo8cxT/ANJaCerlbm2b+VPDPUVZwDVkyH+wF8/M+5vqV6MHbLHwpZK+f95dopIWF5Tey9sjMRkjEPco4bOylGLuOdkJg2z0zmavm6jZwUihf0iGMkqehT08Za1oanjoK3k1LvZ+Zlp6SORSRm5N/LvzpplSTO9knSrx0dNIv6KZDLrKVImX9Eha0LTxUAfMABow7Hbdwdl7rK2b+mDUnnHH2UJfKeUbNfzN3SMHly5rfinL5vcczGpnaQ7H/wBKyJRqyQLVNH9GpimPXxmqAznhpBbkR5KGtv0hrE+zYokS5JHsZPkszN163iJWtnrswdJuzBsrIVgaTLbuy27cyfdEbeF2IXZecreblzNxUTSFZqtHUr+sZIEYU4h26X6B1P1hv0gEhQAAAAAAAAAAAAAAAAAAAAAAAAAAAAhL22u2EbbHrFGE8mucML5nLmDIc7YhYpC5U7ZrDVhbbNcFZAzhRk9o5ovQvsbwNCEqWtePxq/0AJtBCVvGHMya5fNtFdsrcFcflv0X0En/AFrN+4R/Fxt/2m3rRPsl2mndzp9cayKe1+nmBxeKV4I2VWNr+dn5RPbiUdHHk6K0gKs/AleIVLVx4XjV4nFqGf0Av28iBlOnaw6qXHfw+BdW5OSds2vclx11zMHVLfgJibq2pitwSrikVHOH9UKH/LteJVb2P4Pj8FeLxuHgrwAKGID7FxRNYG4JyDqt7IrDTEnE1cULxKL1jnq7Pw3E4a8TwvgePxeGvF43Bw14OEfHAbL2708zJoE8zavbG6BM0M0LZ4b2VH6FdF+ANJaukF5fymEbMNaZrwTyKjEEnammZSV9mFjjQ7gzSlPyj4HwdVlP/wBlxuN+lwU9oct+i+gk/wCtZv3CA8r77h5Ymjb0cLq+0qQFJwTcbb7a+N9sDmTDOVm2GlsMlxPjaVsA0QvcqdymlzSVyuLg/KJXCbJlRtRKi/sbwNSHqapePxqcPAIRwABLjsbNlsvtZtS1y6em+V0cQHt7HEtf9bjWt89xlc0jH7Bl+TqMiO2dSVV9m+E8N4StC+D4OLXh4aWfORAynTtYdVLjv4BQSAX7eRAynTtYdVLjv4ORAynTtYdVLjv4BQSG7/pX8mHTj5hsQfZ7boo28iBlOnaw6qXHfwvnYqsquNcX43x0Z9SUNYNhWfZVZKiVUKSNbVt6OgqvqIVMaqNHdWHsiiVTGqnRTicavBw1DnoyMt6k55vUH80sU9jWY1zRkZb1JzzeoP5pYp7GswFdQAFgzYj7C11tiIPOsy2z43wvTC8rakYZBe0lLmrOVuZo/dUVKdOQZexfYvsLiVLWinhPCcPDTg4KhXzFnbdE+eWsDzD547MNBLvyIGU6drDqpcd/CUDZCbsq+2W+s639WS+qRrldODsK/bKraCNhrW+dxW9YtGOo+pInlXZSUY+C8LVLwNaq8PFoYv8ASAtljyTr58iDV36N+Zvs/nh62HUefsXmzbg7L+HSytII2UsbXpYBZozerssSa7bffwdJEzWh06uKM6vfZFUaHJVWifEoYvDw0DBjAX7eRAynTtYdVLjv4ORAynTtYdVLjv4BQSAX7eRAynTtYdVLjv4ORAynTtYdVLjv4BQSASkbX3ZuLbK3V650rr5NSy0o3xxZd/8A52owZ7eIal3FkzUjvyed07NSrP8AJ/jW8NwK+F/9peL44twF5bcgfKF12+ZnFXbedGjEM53cgfKF12+ZnFXbedGjEAgQ3mnmZNWn+AsrtlDjH2G37tOdEyu0O0XZc0lo30njdTJ7eEQLeCsUaaJFfkiZZy3GrGlXbGceG9ieB4KLE4vH43j4OAU7+RAynTtYdVLjv4BRtwD8O+FPO3jftjDDeJg/6lh/8rj/AOERFAku5oyWEDFzQbWwxnS4hrTKBoMuMHDQ0yWwK/nXWKK6rNqUbVkaRNWlHFSHojVbwlSG4vBX7vLbIyH/APpFdCz9asV/9N8N7arcvhfYP/pvC8X8hV4vhPBcfi8NeDh4OEBftGL9t7+eO2hfpD3F9WQ4tKct+i+gk/61m/cI+Mvu5TzbZLKbV1rqWbYMb66jVzsliJeyFbqWsEk7/wDTqQClxJybAkuZvWKqr7LKzb0P4bi+DpxeGoUDRpnblb5A2oz0kP8AsqIHh7kQMp07WHVS47+FnDYobJxxsi8A5Hwk4y8jmM9+5J/P+k6jbp7bLHl/IjOI/J1Wh3jyq1eFr4bw1FC0/T4vF8XCAmbABDjtotrE32ReA8d5ucYhWzGS/Mj0sCkEjcRLbNHmrCu5f8o1dnZvaLU4GvgfA0TLXhPx+N4uCoTHCIjb38zjtC/R4uL6zhxWJ5b9F9BJ/wBazfuEeQdfe9sx+tnRrqH0opaPXliqZ1x1I2IS7lMjoSpICr90zcflA0cWGQM7on7E4vgaLJ1Nx+HjU4AFLIfThf65if8AM2H8UkPmD6cL/XMT/mbD+KSAbxOn/wCAfCfmjxv2NhR24Oo9P/wD4T80eN+xsKO3AAAAAAAAVaN8D5n6U9I/Cn/Lcoynhqw74HzP0p6R+FP+W5RlPAADvbTBhY2o3URhbAxJwtsny7ke1bALcBmtXxYatyyjeNpImZ0USq5o18P4WqNFCVU4vF41OHhF3fkQMp07WHVS47+AUEhugaBPIe0iejfhrsBAilZyIGU6drDqpcd/C9dgDFxsI4NxBhw8tSdNi3G1mWAaaK3q0LLGtO32EJWRK1qdSrejyrLw9EaqHqlRTicY3Bw1Dt0AAAAAAAAAAAAAAAAYp+2052bX56SF9fxCAi3EpG2052bX56SF9fxCAi3AahG5mc2hk30kLr+oIIW8BUP3Mzm0Mm+khdf1BBC3gApPb7f5HOjj0j7o+zaQGbQNkHbfbIRxtgcNYaxQ3zKjhk2KMkyl/ml1raPcpZeklbTi3/ydRum9ZVbVSqv7J8NU56GoXicWnDwitXyIGU6drDqpcd/AKCQC/byIGU6drDqpcd/ByIGU6drDqpcd/AKCQC/byIGU6drDqpcd/ByIGU6drDqpcd/AKCQ2Qd3N5mTQ55uJbtlcYrV8iBlOnaw6qXHfw+w32/rTYJIk2S7vTw51BuNHFK2CpmBveKVno3rWTrW7KSJLcVjpE8ZRKk/RnVEzxepqt6q8alD8WgX8wFBLlv0X0En/AFrN+4RY52JW2EbbYXFObMmtsML4YLh/IUFYhote5k7mrNVmrbpcFJArhNkyo2ohSvsbwNSHqev6fGp/QAm0AAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIY4Dlb4Lsk/MG8ezsiOfDid/RT2esW9IOOIVWQmbTuOKYJnOVMij2Rh3jNqQ6hv0UynXWIUxzfolpWpq+KgDBkyJ8IF9fPG5/rt8OHCzReO6pbZGXu66ZZjhXHSjKUuOckWZz5is4hjtXsm6ctzmIZfhIYySpK1LXxlrWtK+Og45yUHbN/Iljjrls3+eArdALIvJQds38iWOOuWzf54clB2zfyJY465bN/ngK3QCyLyUHbN/Iljjrls3+eHJQds38iWOOuWzf54D1TuZvOY5L9G+7Pr6CGoUM4/ZP6Rc27ubqDuDWjtSoKMxRgS87Bk8OQNw2NNscoyri+p56ylY2PVgbXMs/Qaqs4t4c75QvgEjEKQ1aGOXhsV8q+2Mny25H6mry/kALIoCt1yr7YyfLbkfqavL+QHKvtjJ8tuR+pq8v5ACyKArdcq+2Mny25H6mry/kCxHZ91Q99Wla97W6uo5t+8bdhLqgnKyJ26riHuGMay8Yuq3U4FEFFWTxBQ6KlKHSMapDfpFqA5EMjLepOeb1B/NLFPY1mNc0ZGW9Sc83qD+aWKexrMBXUGhPuQP7D67fnXij6onhnsDQn3IH9h9dvzrxR9UTwC+iAAAAAAAAAAAAAyoN8E53+S9HDC3/HcoqzC0zvgnO/yXo4YW/47lFWYBeW3IHyhddvmZxV23nRoxDOd3IHyhddvmZxV23nRoxAADzlqw1VYb0V4KvTUbnybkbexZYKbBW5JaKh3k8+akknyEc0qjFsCmdOandOEiGomWvELWpzeKlRCPyr7YyfLbkfqavL+QAnqz98BGa/NJkjsdMjB2nP66mP80kP4tYar2Wt6e2O12Yqyba0NmjIi8xcuPrzgIlFXD94IprSUzbklHMUlFjocRIijpykQ6p/0Uy1qc3ipUZTcoum6k5FyjWpknD52ulWtKlrVNZwooStaV8dK1Kala0r46f0VAfhG0BsD+Zw2eno8299aTIxfxtAbA/mcNnp6PNvfWkyAl4AAABTX31HyBNOvpIF7Fy4uUCt7vL+zp1R7STSXh3FOlS1IO7bztDM9LxnGU9dEXarZvBUtqRjfZCTyVORFdX2W4SJ4BOtVOKap+Di0qAySQFkXkoO2b+RLHHXLZv8APDkoO2b+RLHHXLZv88BW6H04X+uYn/M2H8UkLGXJQds38iWOOuWzf54/dGbqRtl20lHuVcJ45ok3fNF1K0zJZta0TSXTUPWlKL8Na0KWtaU/t/oAapOn/wCAfCfmjxv2NhR24OvcSW/J2ninGVrTSREJi2se2Xb8sikqVZNGThrbjY5+kmsThIqRN02VIRUn6KhaUOXxVoOwgABCRqx3hPZkaKs63npyz7lK9reynYSjBO5ImJxnc0+xank2KEi0ojKMETNXPHauEjmqkavENWpK+OlR5x5V9sZPltyP1NXl/IAWRQFbrlX2xk+W3I/U1eX8gOVfbGT5bcj9TV5fyAHVu+B8z9KekfhT/luUZTwvs7xRt2tnTtCdnY/096ZMlXhdOTl8zYzvFOKm8d3FbLKsFbR5s0s4rJyaRGtFUaPUPBoVrx1eNXif+2ooTAPeGy85xXRV6SGK+1LAbhAws9DGU7PwhrG0z5fyC9cR1j42zPYd5XW/aM1pB00goKeaPpFwgxb0qu7VSbpHMRBKlVFDUoUtOGo1B+VfbGT5bcj9TV5fyAFkUBW65V9sZPltyP1NXl/IDlX2xk+W3I/U1eX8gBZFAVuuVfbGT5bcj9TV5fyBMjoq1s4A2gOC43UZpouKWujFsrcVxWqylpqAkLafHmLWdkZTCBouSKR0RNFwoQqaxi8RaleMThpQB60AAAAAAAAAAAAAYp+2052bX56SF9fxCAi3EpG2052bX56SF9fxCAi3AahG5mc2hk30kLr+oIIW8BUP3Mzm0Mm+khdf1BBC3gAAPBOvraVaUdmjY9jZE1Y3dPWha+Rbpd2da7uAtSVutd3OsYpWZcN12sSQ6rVIrBE6lF1aUTMelE6V41aCLDlX2xk+W3I/U1eX8gBZFAVuuVfbGT5bcj9TV5fyA5V9sZPltyP1NXl/IAWRQFbrlX2xk+W3I/U1eX8gOVfbGT5bcj9TV5fyAFkUY328Zc83rj848T2NtwX/ADlX2xk+W3I/U1eX8gVTteWxw11bYPVjmLaN6HLBte/NLOpyfbXjiO7LnvmCsedmIJhEsLccuJC1pxROUiVSykO+RKg7IVQxEyq0pxFC1qFP0aQW5EeShrb9IaxPs2KK4XJQds38iWOOuWzf54uc7sJsztWezOwFqdsPVnaEBaFx5MzBat3Wm2gLsibsReQkXZZYZ4u4cxJzptFSP6eDKgtWhzk/WF/RAWegAAAAAAAAAAAAAAAAAAAAAAAAAAFIrfd/JO0SekPfX2bKC7qKYm+e4uyZlHS1ozj8Z47vrIr+Lz9e7yTY2LaNwXc8jmauOzoJOnza34+QWaNlVv1Ka7giaR1f1ZT1P4gGaEJtd3P55vQ15yZXsbcYjQ9yLqv6MOobqWyT+GhL3sGcK5kwxtZdHOS8w4lybijHFq3/ACT658gZKsO6bFsm3GSlpz7ZN5PXXdEVFwUO1O5XRbkcSD9ukZdZJIp6qKELUNfcB54913pP6T+njrqxt+JR/RHVtpUcKpN2+prT4uuuoRFFFHM+OFVVlVTUImkkmS5DHUUUOYpCEIWpjmrQpaVrWlAHoMB/wkqmsmmsioRVFUhFUlUjlUTVTULQxFEzlrUpyHLWhiHLWpTFrStK1pWlR/2AAOk7j1LacrOm5G2buz/hO1bkiF/Y0tb9x5VsWDm4xzxCKex5GKk55q/ZL+DUIp4Jy3SU4hyH4vFNStfie670n9J/Tx11Y2/EoD0OA4NYuT8aZRZPZLGeQ7GyJHRrojKRf2LdsBdzKPeKJUXI0eurfkJBBq6OiaixG66iapkq0UoSpK0qOcgKiO+Zc2djT0kLT+oZ0Zeo1O978x3kDJezixzB45sW8b/mkNQ9rPVoeybYm7qlEWacHNkUdqx8Exfu02pDnIU7g6NEimMUpj0qalK5pXuRdV/Rh1DdS2Sfw0A88gPQ3uRdV/Rh1DdS2Sfw0HuRdV/Rh1DdS2Sfw0A88jd/0r+TDpx8w2IPs9t0Yg3uRdV/Rh1DdS2Sfw0NwHTE0dsNNenpg/bOGT5lg7EzR4zdoqNnbR22sKARcNnLdYpFkHCCxDpLIqkIokoQxDlKYtaUDvEZGW9Sc83qD+aWKexrMa5oyMt6k55vUH80sU9jWYCuoNCfcgf2H12/OvFH1RPDPYGhPuQP7D67fnXij6ongF9EAHFbyvqycdQily5BvG1bFtxFw3aLXBeVwxFsQiTp2eqbVspKzbxiwI4cnpUjdEy9FFj0qVMpq04AHKgHnj3Xek/pP6eOurG34lH7I7VXpel37OKidSOBJSTkXSDKPjY7MOPHr9+9dKFRbNGbNtcSrh06cLHIkg3QTOqqoYpEyGMalKh32AAAAOiJbVLpjgZJ9CzmozBENMRbpZlJRMtl7H8dJRzxueqa7R8weXCi6aOkFKVIs3cJJqpnpUpyFrStB8/3Xek/pP6eOurG34lAZk++Cc7/ACXo4YW/47lFWYWx96fx/fuo3amSGRtPVkXdnjHp8B4khSX3hm2pnKFmHmYwlwUkokl0WQynIQ0nH1XRo+YUfVdNKrJeyEk/CE4a33uRdV/Rh1DdS2Sfw0AuIbkD5Quu3zM4q7bzo0YhnVbnvGyOlzOms2Z1NMHunSIuvE2NYy1pXOzVfEUbcslH3hMun8fAPsgJ281mXzJqqk5dtI5Vyu2QVTWWTImcpq3zvdd6T+k/p466sbfiUBEvvNPMyatP8BZXbKHGPsNaPeQNR2nq+dj/AKqbZsnPGGbwuSQY2dRhb9rZQsi4Jt9VK74hVWjOKiZx2/c1TTKZRSiLc9SEKY5uAtK1GS4AAP7N27h44QaNEFnTp0sk3bNm6R13DhwucqSKCCKRTKLLLKGKmkkmUx1DmKQhamrSle/y6R9Vxy0MTTHqFMU1KGKYuF8kGKYtacNDUrS2q0rStPHStPFWnjp4gHnobQGwP5nDZ6ejzb31pMjIF9yLqv6MOobqWyT+GhsJ7DC3bgtLZFaBrbuuCmbZuKHwFAs5eAuGLews1FOyScuY7WSipJBs+YuSlMUxkHSCSpaGLWpaUrThCV8AAAABwq+MlY5xjHNpfJN/2Vj2JeuvYTOUvi6oK045298GZX2I2ezz+PbLuvBFMp7HSVOr4Mpj8Ti0rWgc1AeePdd6T+k/p466sbfiUfZt7Uzpvu2ajbatTUFhG5rimXJWURAW9lew5qalXh6GMRpGxUbPOXz5ycpTVKg1QVVNQpq0JWlKgO7gAf4YxSlMYxqFKWlTGMatKFKWlOGpjVrwUpSlKVrWta8FKeOoD/QHn5zqz0rs3C7R3qY0/NXbVZVs5bOcy45QcNnCBzJLILoq3IVRFZFQpk1UlClOmcpiHLQ1K0p/H3Xek/pP6eOurG34lAZP+81883qz/wAbZPY2HEBwnQ3kK7rUvnbAap7msm57evC25B5ZtY+4LWmo24IR9RK0IlJWrOViXLtg5omoUyalUXB6EOUxDcBqVoILwAB2VYmGcwZRbSDzGWKMlZFaRK6LaUdWJYt0Xc2jXLhMyqDeQXt+LkEma66RDKIpODJqKJlMchTFLWtOee5F1X9GHUN1LZJ/DQDzyA7avPAOdscw1bjyFhXLdh28V0gyNPXnji8bXhivHXH9jNKyk3DMWNHTjwZ/AN6r+FW4h/BkNxa8HUoAAAAAAAA1gd0S5mmwfPznjtKzGT8NSTdRNQOBcdbISxbayDm7EVi3GjnHODtW37yyTZtsTaTR3cbQ7V0pFTc0xfkbuSUqdusZCiaxaVMmY1KVqAtqAPPHuu9J/Sf08ddWNvxKOwbEzFiPKSkgljLKeOcjKxJEVJVOxL3tm71IxNwYxUDyBLfk5AzMi5iHKiZzRMqpimoSpqlrwB2MADjd23nZ9gwjm5r6uu2rLttmdFN5cF2zsXbkI1UcKUSQI5lZh0zYIHXVrRNEqrghlVK0IShjVpQByQB54913pP6T+njrqxt+JQ913pP6T+njrqxt+JQHocB54913pP6T+njrqxt+JQ913pP6T+njrqxt+JQGOtttOdm1+ekhfX8QgItxNHtesA53yhtN9beQsaYUy3kSwbuz7eU1ad8WNji8bttC54Z2ujVrLW9csBDSELNRjmlK1bv4165arUpWqapqUqI4vci6r+jDqG6lsk/hoBpBbmZzaGTfSQuv6gghbwFUHdAsdZBxps5MkQeRrFvKwJpfUPdD1CIva2Ju1ZRZmpBwhE3aUfOsWDtRqc5DkI4IjVIximKU9alrSlr4BSe32/yOdHHpH3R9m0gM2gaaG+a4wyVlDSNpFjcaY8vnIkjG6hrleyLCxbSn7tesGamO36Cbt61gI+QXatjrVoiRddNNIytaJlPU9aUGdr7kXVf0YdQ3Utkn8NAPPIDuu49NWoyz4SRua7sA5rta3IhD2TLXBceK76hISLbcciXsiRlZOBasGSHhFE0/CuXCSfHOQnG4xi0r0oAAAAA2Qd3N5mTQ55uJbtlcYxvhrr7vlqT062Xsf9Fds3jn3Ctp3JFY9lEZS37lynY0FNxqxrvuFUqL+KlJ1q/ZqmTORSibhumepDlPSnFNStQsQgPPHuu9J/Sf08ddWNvxKOzLEyjjLKTN/IYyyLYmRWEW5TZyb6xLut+7mcc8VS8Ok1fubfkJBFo5VR/XJoODpqnS/WFJUnjAc7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEJW8YczJrl820V2ytwTaiEreMOZk1y+baK7ZW4AxvBz7FPwo42+f1ndoo4cBHPsU/Cjjb5/Wd2ijgG8Tjv4P7F+Z1sfUjEcxHDsd/B/YvzOtj6kYjmIDGh3hbnm9ffnkS7HWuIZRM1vC3PN6+/PIl2OtcQygNJXcj/I71k+kfav2ax4uxik5uR/kd6yfSPtX7NY8XYwAAAAAAAAAAAZGW9Sc83qD+aWKexrMa5oyMt6k55vUH80sU9jWYCuoNCfcgf2H12/OvFH1RPDPYGhPuQP7D67fnXij6ongF9EVid7s5mm//PxgftO7FnYVid7s5mm//PxgftO7AZPo9baBvLf0iekhhn7QIEeSR620DeW/pE9JDDP2gQIDdCAAAYfO1F5xfWt6SGVO1L8eDR7y2ovOL61vSQyp2pfjwaA1X9z75oCN9I/NP/JbQtMirNuffNARvpH5p/5LaFpkBRp337yetCXnmyr2IghnOjRi337yetCXnmyr2IghnOgAAADtvAPw74U87eN+2MMN4mD/AKlh/wDK4/8AhERg7YB+HfCnnbxv2xhhvEwf9Sw/+Vx/8IiA+oAAAAAAApr76j5AmnX0kC9i5cXKBTX31HyBNOvpIF7Fy4DMvEu+wQ547Z6ekPbv1ZMCIgS77BDnjtnp6Q9u/VkwA2gR8ya/qaW/yx//AAqo+mPmTX9TS3+WP/4VUBg7agPh4zZ53MkdspodRjtzUB8PGbPO5kjtlNDqMAAAAaMG5A+T5rt88mKuxM6LzAoz7kD5Pmu3zyYq7EzovMAKtG+B8z9KekfhT/luUZTw1Yd8D5n6U9I/Cn/LcoyngAAAAAAAAAAAXz9yB/bvXb80sUfXE8KGAvn7kD+3eu35pYo+uJ4BoUiutvUXMyahPnXirtkyFikV1t6i5mTUJ868VdsmQDIwAAAAAAG1hsS+aZ0B+jfYv8OuJSBFvsS+aZ0B+jfYv8OuJSAAAAAAAAQz7wpzMmvzzMp9sbXGM+NmDeFOZk1+eZlPtja4xnwAAAAAAABpBbkR5KGtv0hrE+zYozfRpBbkR5KGtv0hrE+zYoC7sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAISt4w5mTXL5tortlbgm1EJW8YczJrl820V2ytwBjeDn2KfhRxt8/rO7RRw4COfYp+FHG3z+s7tFHAN4nHfwf2L8zrY+pGI5iOHY7+D+xfmdbH1IxHMQHg/J+zA2e2ab9uXKOV9IGDL/yHeL+kpdN4XNZTCRnZ6Qogi1o8knqv6xwvRu3QR45vH4NIhf7BwP3m/ZZ9A/Tf1exoksAB0Bp+0q6ctKcFPWxpwwzYWGLfueVRnLhiLBg28ExmJdu0KwQkXyLf9Fd0kzIRsRU3jKkWhKeKg7/AAAAABHTtccgXrirZn61sjY4uaXsy+rOwJeU5a11QDs7GZgZhmgiZrIxrxP8ATbukK1rVNUvjLWviGST78htTOnhqQ6wpIaw22x5pvX36N99/w6AxTQElnvyG1M6eGpDrCkhsy6cJiUuHTxgafm3zmUmpzDGLpiXk3ilVXcjKSdjwT1++dKm8arl27XVcLqV8Z1VDGr46jBuG7/pX8mHTj5hsQfZ7boDvkeJcx7NzQbqEv2Tyjm7SjhbJ+Q5pBk2lbwvCz2UtOv0I5ArVik5erfrFCNW5Soo0r/7E6ULQe2gARp+837LPoH6b+r2NFRHed5F9sobo0rxOzcdLaLY3LsDfsjk1lgE9bFb3w+t2Rim0G6uJOP8AFILRbd46RZnU8aJF1Cl8RqjQaGexvv37caEvmplf63gQFVr35DamdPDUh1hSQm93e/Uzn/aS7R+0tMGvTLl76sNPczirKt3yuIM1TK942M/ue0IRu/ticcwr39QpIwb1VRzHOK/pN1jmOXx1FRYWdt0T55awPMPnjsw0AaK3vN+yz6B+m/q9jR5/1YbLfZ3Ye0w6hMr4u0dYJsXJONsM5Iviwr1tyyWEfcFp3fa9pSszb1xQj9L9YzlYeVZtX7B0n+mg5QTUL4y0E1g8k6+fIg1d+jfmb7P54Bj0+/IbUzp4akOsKSD35DamdPDUh1hSQjTAByO8LvufIF0z973rOSNzXbdUq8nLjuGXcGdykzMSKxnD6RfuT/prunS5zqrKm8ZzmrWv9I44AAPZWDdobrg00WOTGmAdUWYcSWCSVkJwlpWRdryGhCy8rVGsjI0ZIfq6OnlUEfZCv9KngycP9A7i9+Q2pnTw1IdYUkI0wAepdQetzVvqvjLchdSWoTJ+aYm0X72UtiPv+5XU61g5GRbptHzyOScfot13TZFJBZQvjOmmUtfFQeWgABNNu+GHsXZ52r+mXF+ZbFtzJOPLje3aSds+7I9KUgpUjW1JV02K9Yrfq1qIuEk1k+N/7VCFNTx0GpN7zfss+gfpv6vY0ZkW7Lc83pL/AMfevY2YGwSAjgjNkDswYaSj5eK0NadWEnFPWklHPm1gRqbhk/YrpumbtupTxkWbuEk1kj08ZVCFNT+gSOJpkSTIkmWhE0iFTTIWnAUhCFoUhS0/soUtKUpT+ylB/wBgADJz2021G2h+Htqprkxji7WJnaxcfWXnOdhLTtC3L2fx8HARKEfFKIx8YyT/AFbZqmdVQxEi+KlTmr/aNYwYv23v547aF+kPcX1ZDgOtPfkNqZ08NSHWFJB78htTOnhqQ6wpIRpgAks9+Q2pnTw1IdYUkLHW7UZTyLtTdWOYcO7RS8p7WPi2ycM1vm0rEzw+Uve3Lfu+lyx8XS4ouPf/AKptKfk5y4Z+ySfp+AWOT+g1RSZFyjcrvL71FejebtpEAL0nvN+yz6B+m/q9jRHttXdAWi3R7s5tXmpzS9pnxJgvUFhbEExeuKMu45tVnb98WBdjF9HINLgtmabfr46TbouXCaTlL9IpFj0p/wC4WNRERt7+Zx2hfo8XF9Zw4DKq9+Q2pnTw1IdYUkP+FNsZtSVUzpKa7dR501CGTUIbIUlUpyHLUpimp/bQxa1pWn/xURrAA/bJyT+ZkpCYlXa7+UlXzuSknzk9VHL1++XUdPHbhSvjUXcuFVFlT18ZlDmNX+kfiAAAAABowbkD5Pmu3zyYq7EzovMCjPuQPk+a7fPJirsTOi8wAq0b4HzP0p6R+FP+W5RlPDVh3wPmfpT0j8Kf8tyjKeAezdnZaFsX/rs0lWTesHHXNaV1Z7xvB3Hb0u3K7i5mIkLjZN30c/bH/QXaukDmSWSN4jkNUtfFUa//ALzfss+gfpv6vY0ZEey85xXRV6SGK+1LAbhACNP3m/ZZ9A/Tf1exoe837LPoH6b+r2NElgAI0/eb9ln0D9N/V7GjNM3n7AmGNNu1avbF+Bca2lifHrLDGGJdrZ9lRSMPBN5OYt504lHybJD9WVy+XKVVypTxqHpStf6BrvjJ93uznlr/APMPgfsw7AViR6P0+av9T+lBzcbzTbnPIuFnV3IMm1zr2BcDmCUnEI5RRVilImb+NwRqosqdGhv/AGGUNWn9I84AAks9+Q2pnTw1IdYUkJhthHq31MbQjaRYi0va3M3ZC1Paeb0gb8kbrw9l+ecXZYs++t63HMpBupOEefqHK0XIJJvGZzeNFchTl8dBVNFindXeeb09/NTKvY16A0o/eb9ln0D9N/V7Gh7zfss+gfpv6vY0SWAAjT95v2WfQP039XsaHvN+yz6B+m/q9jRJYADIa2me0P1w6VNfurLTnpx1R5iwzgrDmZrpsfFuK7Cu15B2ZYloRCqRIy3bbiG/6iOimJTmK3apfoJ0NWlB4Y9+Q2pnTw1IdYUkPubbTnZtfnpIX1/EICLcBq77qLqTz3qg2fuQr71C5YvXMF4sM93JBsrkvqZXm5VtEN4WGWQjknS/6ZGqSqyqhEqeKhjmr/aLQIqH7mZzaGTfSQuv6gghbwAAAAHA8nYvx7miw7lxdlez4K/seXkwpF3TZ9zMk5GCno6i6LqjOSZK/q3CFHDdBbiG8XhEiG/sHg/3m/ZZ9A/Tf1exoksABFVfOx52XbKyrwetNCunJu6aWtcDpsulj6NKog4bxLtVFZM1PGU6ShCnIan9Bi0qMZLJbNrHZGv+PYoJNWTC9rqZs2qJaERbNWs6/QboJEp4iJIokImmWniKUtKU/oG8lkP9gL5+Z9zfUr0YO2WPhSyV8/7y7RSQDgAAAANILciPJQ1t+kNYn2bFGb6NILciPJQ1t+kNYn2bFAXdgAAAAAAAAAAAAAAAAAAAAAAAAAAFcPePdq5qP2UWDdOWRtN8ZYEnO5Wyvc1lXGnf8G4nGaUTEWgadbHYIt3zEyDqrylCqKGOpQyX6NC0r4xY8FIrfd/JO0SekPfX2bKAITuWR7Ur4p6b+r+T/EA9AaW9uXq923OeMebLvVtDYth9PWrSVWsXJUljC2nduX01h49g6uhA9vzTuSkm7F1WQg2hTqqMl6VQMqShaVNQ1KVom13c/nm9DXnJlextxgLuPI3Nlr8bNSHWBGfh8fNmd0N2ZOO4eVyBB3TqHUmrGjX14w5Hl+RqrQ8pbLVWajyOkqQJKqtjO2SNF06GLU6VTFoala8NLcg4Dlb4Lsk/MG8ezsiAzJZTe/Np3ZMnI2bE2rp2PFWk+d2xGHdWFJKOTR8C4UimRnClJ8tFFzNmidVT0KWhlKmNQtKV4B+Hlke1K+Kem/q/k/xAKr2RPhAvr543P9dvhw4Bt37KbVDkPWls9tLuqLK7aCZ5DzHj49z3S2tlkpHQSMgW4JqMoWNZKruVG6HsePQrUhl1K+Eqc3G4K0pSQkQy7vTzMmgTzNq9sboEzQCoTvHG3O1fbKXP+n3GWnCGxZJ2/k/EU3fFwqX9bTucfJy8feDqCQIxWbybEqLWrNElTpGIetVeE/GpSvAK5/LI9qV8U9N/V/J/iAekd9w8sTRt6OF1faVICk4A0tt3v2/mtHahaxbwwPqEg8SRtmwWIp2+Wa1i2s8hZY0vHScYzQIq6cSr0hmtUnatTpUSpUxqFrxqcAuhDL13M3nMcl+jfdn19BDUKAdGamdP9laqsA5Z055GXl21i5jsyVsa6XEA6IxmUoiXIUjo8a7USXI3dUoSng1TIqULXh/RqK0HI3Nlr8bNSHWBGfh8W0gAVLeRubLX42akOsCM/D4rnXhvYm0j093bdOA7JtjAC9mYPuObxBaK8xY0i7llrYxpJurMgFZR0ScSI5kVIqFaHeuCJJFWc1VUKmShqFpqBjB/1T+U7qN8/GXvtBuEBZa5ZHtSvinpv6v5P8QC9/sStbWWtoVs9cV6os3M7YYZDvOdviNlW1nxqsVBEQt24XEWxq2ZLOXaiZzN0i1WrVc3HU4TUoWleCmLcNc3dW+Zk0+fO3K3bJ4AsVjPY3379uNCXzUyv9bwI0Jxnsb79+3GhL5qZX+t4EBQuFnbdE+eWsDzD547MNBWJFnbdE+eWsDzD547MNAGsEPJOvnyINXfo35m+z+eHrYeSdfPkQau/RvzN9n88AwvQAAGkVot3TvZuagNJenXN163Pn9C7cqYism+bjRiL5jmsWlL3DCtZB8Rg2PBKnQalXWNRFIyh6kJwUqY1acI9Ocjc2Wvxs1IdYEZ+HxPBsuubo0U+jfivsswHvIBja7fPZ84T2Z+vd5powE+u+RsFDEeO74I4veVRmJv8r3SWYNIkq8Qas06tS1YI+x0vA8JOE/CY3D4oURaZ3wTnf5L0cMLf8dyirMAso7t9sltNW1gytqZsvUjKZBjInEWPbIui2D2BOtoNyrI3DcknEviyKjhg+o4QK2aJVRIUqdSKcY1TVpXgpbV5G5stfjZqQ6wIz8PiG/cgfKF12+ZnFXbedGjEAruaJd2f0C6DNSWP9UWG7iza9yHjhWTWgm12Xiwk4JQ0rGuYtx7NZIw7VRalG7pSqdCrk4qlC1rw0pwCxGAAAAAAK2Wq/dcNnjrD1G5e1O5QuTOzTIOabweXrdba3L0j4+DRlnqDZBYkYyVhXCjdrQjVOpUzrKVpWpq8avCLJoAKlvI3Nlr8bNSHWBGfh8ORubLX42akOsCM/D4tpAAqW8jc2Wvxs1IdYEZ+Hx4T18aWMdbrHja19Y2zscz1y5RzZdVMHXY0zw9TvW20bQqwXumq0ZHx6EIq2lfyjGty+yTuFCex6qE8Fwmoal74U199R8gTTr6SBexcuAgB5ZHtSvinpv6v5P8QDu7Tdt/NaO2FzpjHZjaoIPEkVp+1pXO1wrlaRxzazyAvhnac2iu/drWzMuZSQQjpMq0Y3ok5VZOSFJU9Kp143DSl+Jd9ghzx2z09Ie3fqyYAXr+RubLX42akOsCM/D4/HI7nJsuGse+dJ3ZqPqo2ZunCdDZAjKlqdFA6heNT83/AB04xacNP/gW3h8ya/qaW/yx/wDwqoDBVylbbCzcnZGtCKMseMtS+7vtuOO5PRRwZhB3BIxbMzhSlC0OsZu1TqqehS0MpUxqUpw8A4IO3NQHw8Zs87mSO2U0OowAAABowbkD5Pmu3zyYq7EzovMCjPuQPk+a7fPJirsTOi8wAq0b4HzP0p6R+FP+W5RlPDVh3wPmfpT0j8Kf8tyjKeAe8Nl5ziuir0kMV9qWA3CBh77LznFdFXpIYr7UsBuEAAzUNUW9tbS3DmpHPOJrWtfT4rbWNcu5CsaBVkrEkXEgpEWvdMnDRx3q5Z1MqzozVmlVdUpCUOrUxqFLSvBTSvGF/r78uHV36SGZe388AsNcsj2pXxT039X8n+IBM5ok2ZmAd5NwRG7UDXlI3vb2oS8bkuPEErHYVmULQsYtsYgdpwNsKtoV8zmHCciqycqVkV6vTFcK0KcqadKcAzkRrA7olzNNg+fnPHaVmA6k5G5stfjZqQ6wIz8PhyNzZa/GzUh1gRn4fFtIAFS3kbmy1+NmpDrAjPw+PYmhHdttB2z21JWhqiwlcGaX2Q7LYT0dFNrwu9jKwR0LhjVYt9VyyRh2iihyt1TVRNRcvEU4DVpWniFg4AAAAAAAAVodTW6u7OrVXn/LOo3I9y55a31mO85W+bpbwF7R7GGRl5c5DuSRrRSEXO3alqSng0zLKVLTh4TVHRfI3Nlr8bNSHWBGfh8W0gAZ2uu/Wnlfde8sRGhHZ7M7ZuPDt+WqzzjMvc6Ryt6XWS77icuId8i0k2DiFRSiitYhtVFsZqc5FaqGqrWhqUp4j5ZHtSvinpv6v5P8QD72+Z85fjL0b7U+v50VDwGoDu4+3O1fbVrUBqBxjqOhsWRlv4xxFC3xb6lg207g3ykvIXe1gliPlnEm+Ks1ozWOYiRSErRXgNx60pwVt7jNo3JDyxtY/o4Wv9pMeNJcAAAAfOl4xvNRMpDO6no1lo57GOapG4qlG79sq1WqmatK0KeiapqkNWleA3BXgqKqk/ueuy/uKdmrgfXXqMK+nZaRmXhUb+jCI0dSbxZ64okSsBWpU6LLnoQta1qUvBThrwcIteAAqW8jc2Wvxs1IdYEZ+Hw5G5stfjZqQ6wIz8Pi2kACpbyNzZa/GzUh1gRn4fEzOzF2UWm/ZRWDk7HWm+Tv+Tg8rXhFXrcil/zjeceJS0RC0gmpI9ZuxYlQa1Z04yiZiKVMr+lQ1KeIScgAAAAAAAAAAAAAAAAAAAAAAAAAAAAICtvtsfsm7YLDeA8ZYyy/YmIH+IMmXDfcnJ33DXBMs5dnM2sa30mDBK3ymWRcorG9kKKOP1Rkv0S/pifUAGb5yIjVh02tPHqLkn/wHvfZhbqNqL0F66dPurO8NVmFb8tvDl1PLglLTtq0b6j5uYQcwUpElbsHkoSjBFUqr8itTOK0JUiZ6U/SrQXjAABxy8YRW5bRum3G66bZe4LcnIRFysUxkm6srGOmCa6pSfpmTSOuVQ5SfpVKWtC+OtByMAGcxc25O6rJ65LhnEdauntBKZnJaVSQUsbI5lEU5F+4eESUMVPimOmVahDmL+jUxa1p4uAfD5ERqw6bWnj1FyT/AOA0gwAeF9mjpNuTQvoX046TLuuyEvm5MJWMe05a7LcZv2EJNuTTkvK0dxzOTpR+ghRORTS4jmlFOOmev/trQe6AABVn2+WwBzNtf834NyrjPP2McQx2J8XS9gyMVfVvXVMvZZ5JXU5uAj9ktb5aoItUkV6Nzpr18LVUtTU/Q4BApyIjVh02tPHqLkn/AMBpBgAqS7DDdzs4bJvVbdWoTI+orFWWIW4MWzNgIW9ZNtXdESjd7JyMc9TfquZ0tGhmqRGRyHTJXwtTHLUvipUW2gAB5y1eajoPSHplzbqbua3Ja7oDCVgTV/y1swTlmzmJtnCpkUVj451IVoyQdLUPSiajmtEi1pXjCovy3fSf0JdQ/r1jb/zFi/bY803r79G++/4dAYpoDSD5bvpP6Euof16xt/5jwBLbnjqc1IyklqJgtYOCLbhM9yDzNMNbstZmQHUrAxWUnCl8x8LJuWZKtHEhFtJ1Fi9Xa1q2VcoKqIV8EYoo9jd/0r+TDpx8w2IPs9t0Bn68iI1YdNrTx6i5J/8AAexMS7ZTF+7Z2THbJrOuG791I5Hwas8ueWyxiWbt62bJnG+S1zXYwax0ReNSTzdaNbOytHhnNOIquQx0eFOtBe/GRlvUnPN6g/mlinsazAWWOW76T+hLqH9esbf+Y85Z2tpffCV4C8dMjlHSA10YovLaulnnYh7zXvNfJZ05Rg5gD4/46bFGMThVUnhJHgOqdZOqP6JTCgSNCfcgf2H12/OvFH1RPAPJvIiNWHTa08eouSf/AAEsuxY3ZrPWy61zW3qxyDqXxFlC3ITHeRLLWtOzrXvOKm13V6RKMc1epvJslGBW7I6VVHCZq+EOStKJ+MXHgAB5J18+RBq79G/M32fzw9bDyTr58iDV36N+Zvs/ngGF6AAA3Btl1zdGin0b8V9lmA95Dwbsuubo0U+jfivsswHvIBT122u7U532qGtl1qmx5qTxJiy3nGLrDsEtrXnbF4y0yV5aJZUrl/V3Blqxq1d/lAngE6V8KTwZ/Cf00EQ3IiNWHTa08eouSf8AwGkGACsJsBdgvmHY9ZM1DX1k3PGNcwM8z2LZ9pxTGxLfuiFcwzm2p+QmF3cgpcBSpLoOUnhEUSNuFQqhDGP+jWgs9gADxRtDNa9qbPPSbk7VnetlXDkK28YoRC8hadrPo2Nm5OkvLNYlIrN5LVowSqiq6Kqp4evBVMhqF/SrQVYeW76T+hLqH9esbf8AmJht5p5mTVp/gLK7ZQ4x9gGlXZG+oaVr3vS0bLaaLtQLF1d90QFrtnri+McqN2biflWkUi6XIkfwh0W6jsqqpE/0zEIahP0q0F0Rm5K8aNXZC1IV02QclIatKmIVdIqtCmrTxVqWhqUrWni4aeIYNeAfh3wp528b9sYYbxMH/UsP/lcf/CIgPqCpbrX3tTTfoo1W500pXXpNzdetxYLvt/YkvddvXfYbGFnXjBu0cHfRrSSPR83bKFdlKVN1SitKkNWvirQW0hi/be/njtoX6Q9xfVkOAuGct30n9CXUP69Y2/8AMWFtkdtYMc7XHCd+5sxrii9sSRNhX9+YDyEviXgpiRfvfyQ1l/Z7ZeAqZsm18E6Kj4NWvhfCFNX/ANtaDFmGmduVvkDajPSQ/wCyogBcqFNffUfIE06+kgXsXLi5QKa++o+QJp19JAvYuXAZl4l32CHPHbPT0h7d+rJgRECXfYIc8ds9PSHt36smAG0CPmTX9TS3+WP/AOFVH0x8ya/qaW/yx/8AwqoDB21AfDxmzzuZI7ZTQ6jHbmoD4eM2edzJHbKaHUYC07s8t1g1C7Q3SbjHVnZOqXDOPbbycjLrR9p3Tad7yU3GUiJZ1Eq0ePIklWCtVlGplU/A14CkOUpv0qVHtjkRGrDptaePUXJP/gLSW7KczJpM/wAFe3bKYE+ICvtsBdjflDY9Y11DWNk3MdhZgd5nvmz7sin1iQtwwraGbW1ASEOu0kE7gKVVddyq8IsidtwplTIYp/0q0FgkAAVaN8D5n6U9I/Cn/Lcoynhqw74HzP0p6R+FP+W5RlPAPeGy85xXRV6SGK+1LAbhAw99l5ziuir0kMV9qWA3CAAYX+vvy4dXfpIZl7fzw3QBhf6+/Lh1d+khmXt/PAPI41gd0S5mmwfPznjtKzGT8NYHdEuZpsHz8547SswFncAAAHg/aSa8bP2bWk2+dWd9WJcuSLbsaTtqMd2naUhFxk2+UuWWRiUFWzyYrRgmRsotRVaiteMYlKlJ+lwD3gK629RczJqE+deKu2TIBFny3fSf0JdQ/r1jb/zHNMb76HpZyRkSwsdsNGOf419ft6WtZbORd3vjpVqwd3TOMYNu9cpon8Mo3arPiLrES/WHTTMUn6VaDNIHfGljyndOXn4xD9oNvAN4AAAAAAAZe++Z85fjL0b7U+v50VDxbw3zPnL8Zejfan1/OioeAnq2B214xpsgc4ZxytkzEV85ejsr4uiLBjoqxZmAhnsU8jrpbXAd+9WuAxUFmqiKFW5E0P1tFTUNX9DhFpnlu+k/oS6h/XrG3/mM3wAGppoY3sbTlrn1ZYS0mWjpQzZY1yZuuw1pxN2XHd1iP4SEclipGV9lyLOMPV+uh4OOUS4jalVOOoSv/toYWxBjP7vXzzegPzzKdjroGzAA+VOyqcFCTM2skddKGipCVVQTqUqiyce0WdnSTMb9Ep1Co1ISpv0aGrStfFwil1c2+uaVLZuS4LbcaK9Qble35uWhFnKN8Y4Ik4ViX7hgoukU5+OVNU7cyhCn/SKU1KG8dKi5VkP9gL5+Z9zfUr0YO2WPhSyV8/7y7RSQDRE5bvpP6Euof16xt/5i1voL1f2zr10m4c1Z2daE7Ydt5jgHM/F2ncryPkJuHRbSz+JM3fvIutWC6plGB1aGb14lCKFLX9KlRhijZB3c3mZNDnm4lu2VxgJtwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5B1fa89Jugu2bQvDVnmO38OW3fk69tq05S4G0s5RmZuPj6yjxg3LEsH6hVUGFKuDVVImSpPEU1TeIevhSK33fyTtEnpD319mygCcDlGGxk6cuNvoq8vw4O3sD7bjZeamssWdg7B2rSxr/AMp3/IKRdo2jFx9zov5p+i0cPlG7dR9BtWpTlatV1q1WXTLxU60pXh4KVxXhNru5/PN6GvOTK9jbjAbIYAAAAAAiizltwNltpsyxe2Ds2at7FsPKeOpWkJedoycfdCr+DlKtW72jRyoyg3LU6lWrtutworqE4qpacbh4aU6n5RhsZOnLjb6KvL8ODNW3hbnm9ffnkS7HWuIZQG59pD13aUNeVq3Xe2k7MMBmO17In21sXTLQDaVbIRE67j05RvHrllmDBUyqrBQjgpkkzp8Q3BU9DcNB66FJzcj/ACO9ZPpH2r9mseLsYAAAAj/2qmJchZ32c+sbDuKLaeXjkjIuDrutezLXjzt03s5OyCCRWce2UdrN2xFVzFrQpllkk6cH6R6DK85Oftm+g1kn6Vs38RjZDABjecnP2zfQayT9K2b+Ixryae7emLRwHg+07iYqRlwWxiDGlvTsatUhlo+YhbMhY2TYqmTMdMyjR62XQPVM5yVMnWpTGLwVr2+AAMjLepOeb1B/NLFPY1mNc0ZGW9Sc83qD+aWKexrMBXUGhPuQP7D67fnXij6onhnsDQn3IH9h9dvzrxR9UTwC+iPPGqDVbgDRlih9nDUvkeIxXi2OmoW3nt3TaMg4YITFwuDtIdkZONaPXVVHzghk06lQqShqfpmLTxj0OKxO92czTf8A5+MD9p3YD2DyjDYydOXG30VeX4cHS+o7bm7K3URp/wA14Ew3q8sO+MtZmxbfWMMaWbGx10pSF1X1fFtyNuWtb7JR5BNmibqXmpFmxQO5cIIFVXLVVVMlDGpkSD1toG8t/SJ6SGGftAgQHv8A5Oftm+g1kn6Vs38Rhyc/bN9BrJP0rZv4jGyGACuBpF21mzF0maX8C6ZtQeq6x8bZwwVi2z8YZWsCYj7mXlLPvq0YhvE3Fb79aPhHjFR1GSDdZssdo6cIGOStU1Tl4DV9Fcow2MnTlxt9FXl+HBlXbUXnF9a3pIZU7Uvx4NAbIfKMNjJ05cbfRV5fhwOUYbGTpy42+iry/DgxvAAbIfKMNjJ05cbfRV5fhwOUYbGTpy42+iry/DgxvAAaX23l21GzI1VbLzUdg7Aeq2yMi5TvJnaydt2jEx9zIv5Q7C6Ix87Kio/hGjUtUWqCqxvCrkpUpK0Lwm4KVzQQAB2PhyZjbcy9iu4Zl0RjDwWSLHmZZ6rQ1U2cbF3PFvnzpShCmPUjdqgqsehCmNUpK0KWteCldeyJ3ivY0N4qMQW1xY3IqjHs0lSVi7y4SKJtkyHLX/8Adz+kpi1pX/8AkMcwAGyHyjDYydOXG30VeX4cFEfaN7J3aCbRDXHqZ1t6N9N93Zv0vak8mymSsJ5Ztt7b7WCvyyZJqxaMp6MbzEtHSiTVdwydJlI9Ytl6VRNxkqUrStaug2gNgfzOGz09Hm3vrSZAZmnJz9s30Gsk/Stm/iMXx91j0Qao9C2jvN2O9VeJJ3EF5XNnH86IODn3EW5cyEF+asax/KCR4p8/RKl7LRVR4qihFOMSteJwcFa2fAABTX31HyBNOvpIF7Fy4uUCmvvqPkCadfSQL2LlwGZeJJ9j1mfGenfac6Lc25kuplY+L8bZqhLlva7ZJNyqxgYRswk0l37pNmg5dHSTUXSLWiCCp+E9OAtacIjYABsh8ow2MnTlxt9FXl+HB+R/vE2xrfMXrFprgxus6eNHLVsiWLvGhlXDhE6KKZeG3KU4TqHKWnDWlOGvjrSgxxx9OF/rmJ/zNh/FJAJ1sk7AHa7ZGyLf2QrM0X5DnbOvy9bpvO05ttJ2iRtMW1dE4/m4KVbkWuBNYqEhFvmrtIqqaapU1i0UIQ9Klpwvk5+2b6DWSfpWzfxGNefT/wDAPhPzR437Gwo7cAVLtk7tINFmyr0KYZ0O6+s621p01TYdQn0MkYju1pNPJ211Z6dfTkSR64gI2Wi1KvIt61dp+xny1KJqlofinpUtJHOUYbGTpy42+iry/Dgzrd5r55vVn/jbJ7Gw4gOAbIfKMNjJ05cbfRV5fhwOUYbGTpy42+iry/DgxvAAaHW8vbXrZ061NmjIYV0yamrOyvk5bOGK7nTtSDY3E3fGgoJSdrLSFFJOHZNfBM6OkKqUqvx6+EpxCm8fBnigAD15oByFZ+JtbOljJmQZttbdj2LnHHt0XXPvCLHaw8FEXCzdyMg4I3TWXMk1bpnVOVJJRSpS14pDV8Q1h+UYbGTpy42+iry/DgxvAAbIfKMNjJ05cbfRV5fhwZ7WpDYabVHUVqBzXnzDWkS/L4xJmfKV9ZPxnecbI2slH3VYt8XJI3Fa1wMknk62dptZeGkGb5AjluguVNctFUkz0MWleEboGgTyHtIno34a7AQIDJ05Oftm+g1kn6Vs38RjRT3bPSln/RjswLOwhqXxxL4rylHZfy9cLy0ZtePcP0Ie4Z1q6h3xlIx29a1TfIJnUTpRep6Up+mUtfEJ8AAB4u1gbQzR1oJZWZIatM225htnkF1Js7PXuBrMOSzbmHSQXkkm/wCSY6QqQzVJyic/hqJ0rQ9OLU1aV4PaIoYb79+wmhL525X+p4EBYa5RhsZOnLjb6KvL8OCMPbA7QHSHtctCmTNDuzvzTbupfVNkmZs6YsrEdntpdjOz0daE6hOXE6auLhj4iLISMi0FXa1F3yRjJkrROhz1oWuXwLFO6u883p7+amVexr0B0Xyc/bN9BrJP0rZv4jHb2nzd8NsHaOe8IXXcWijIsbb9sZexrcM5IrSdoGSj4eFvOFkpN6qVO4TqVTasmy656EIY9Sp1oUpjcFK68oAAAAAAAAoF70JsndoJrh13WHlPS1pvu7LlhRWDretd/cUE9t9u0bTrOYl3DmPOSUlmLiqqSLhFQxipVTrQ9OA9a8NKVsOTn7ZvoNZJ+lbN/EY2QwAYgerzZea7dB1qWpe+rHT3dWHbXvefc2xa8tcDyCcoS060j1JRxHoFiZV+qVVJgkdwYyqZE+IXgoepuCg8BjSX32/yOdHHpH3R9m0gM2gBMxu9fPN6A/PMp2OugbMAxn93r55vQH55lOx10DZgAcPyH+wF8/M+5vqV6MHbLHwpZK+f95dopIbxOQ/2Avn5n3N9SvRg7ZY+FLJXz/vLtFJAOADTq2Iu242XmmXZeaTcHZx1Z2NYGU7AseRi7utGUj7oWfwr5a6Jx8m3cKMYN01Oc7V0gtSqK6heKpSla0NStKZioANkPlGGxk6cuNvoq8vw4Pe+kHXnpM16Wzd94aTMx2/mO3LDnWVtXZKW+2lmyMNNyEfSUZsHBZZgwUMquwr7ILVIihKE8VTUN4hhijSC3IjyUNbfpDWJ9mxQF3YAAAAAAAAAAAAAAAAAAAAAAAAAABSl31y2rjuXSporb25b83cC7bUHfKzlGEin8qq3SNjg5CqrpsEFzpJmP+gU6hSlqb9Gla18QutD5UrAwc8mkjOQ0VMooHqqglKxzORTRUMXimUSI8RWKmcxf0anJQpql8Va8HiAYLXtU5R+Ta/vU64u7hM1u+NnXdaG2C0UXHdtq3Ha9vRmRZNaSnbig5OEho9E1oXCmVV9KSbVsxaJ1UOQlFHC6ZanMUtK8Y1KV17/AGu8f/EWzvViE+4iF/eFrYtq2tjxram7ct6Dt+aYY6i1WEvCRLCKlGStbwt0lVGkgwboO2ylSGMSp0ViGqUxi1rwVrSoTJ+2ti75SbB9cbd7xH/RMp4wUOUhMj2Gc5zFIQhLvt4xznNWlClKWkjWpjGrWlClpSta1rSlKcIwdPbEyB8erx9Z5v78OeYryFfx8n44Ie+LwOQ9+2eUxTXLNGKYprhjqGKYtXtaVLWla0rStK0rSvBXxAN4opinKU5DFOQxaGKYtaGKYpqcJTFNThpUtaVpWlaVrStK8NPEP9HD8emMawLHMatTGNZ9smMY1a1MY1YVlWta1r461rXx1rXx1r46jmADHS3gbHWQZfbHa85GKsW8pOPd5hSUav4+2Jt6zcp/mhbBfCN3TZiqgsTjFMXjJnMXhpWnDw0qIcvapyj8m1/ep1xd3DeTe2TZkk6WfSNo2w/euDcdw8ewEU6dLn4KF46zhdooqqbi0oXjHOavBSlOHgpQfl9rvH/xFs71YhPuICmJuYr1njXSPq9jsjO21gSEjqGth5Hsb1XStV4+aJ46YIndM206dgu6bEWpVI66BDpFUpVOpqGpWguXe2ti75SbB9cbd7xGdfvorp1YmrvR+yshyvZrN7p3uh09aWqspbzZ25JkZ+kRw6QiDM0nC5UqUTKqqQ6hU6UJQ1C04BTG9sTIHx6vH1nm/vwDeJ9tbF3yk2D64273iHtrYu+UmwfXG3e8Rg7e2JkD49Xj6zzf34PbEyB8erx9Z5v78A3ifbWxd8pNg+uNu94h7a2LvlJsH1xt3vEYO3tiZA+PV4+s839+D2xMgfHq8fWeb+/AN4n21sXfKTYPrjbveIe2ti75SbB9cbd7xGDt7YmQPj1ePrPN/fg9sTIHx6vH1nm/vwDeJ9tbF3yk2D64273iMl/ekJeJndsfn+RhJSOmI9a08WFSfxT1tIMlTJ2czKcqbpoqsgepDUqU9CqVqU1OCvBUQLe2JkD49Xj6zzf34cbkJKRlnR30rIPZN6pQtFHkg6XeulKEpxSUO4cqKqnoWniLQx60LTxU4KAPxDQH3Jy7bVtmydcxLkua37fM6urFZmxZuajYozkqcRO0OZCj9y3qtQla0oeqdDULWtKV4OGgz+B9mKuO4YGixYOemoYriparlipR9HUXqSlaEqtRmujRSpaVrQtT8apaVrwcHCA3ofbWxd8pNg+uNu94is5vat92PcGx1v2OgbytSbkDZ0wUqVhEXFESTwySVzO6qqFas3iy9U06VpVQ9CVKSleE1aUGWz7YmQPj1ePrPN/fh+CSu+7JlqZjMXRcUqyMcihmclNyT5qZROvCmczd05VSqclfGQ1ScYtfGWtKgOOj1toG8t/SJ6SGGftAgR5JHrbQN5b+kT0kMM/aBAgN0IAABh87UXnF9a3pIZU7Uvx4NHvLai84vrW9JDKnal+PBoDlUPYt73CzpIQFnXVOMKqHRo+h7el5NnVZPg8IlRyyZro+ET4accnH4xOGnGpThoPqe1TlH5Nr+9Tri7uGoBuhto2pNbImNezFsW9LPK6jMzpVdycLGv3NU01Lb4idV3TZVWpCcNeITj8UvDXgpThqLRPtd4/+ItnerEJ9xAYLU3aF2Wymgrclr3Fb6To502ys3CSUUm4UIWhjpoHftm5VjkLWhjlTqYxS1pWtKUrwjjo0R99otm3IHT7oYVg7fhIZRxmTKaa6kTFMI465CWTBmIRY7NuiZQhTVqYpT1NQta1rSlK1GdwA/fGRUpNPUo6GjX8tIOONRBhGM3D96tUpamNRJq1TVXU4paVMbiJm4C0rWvBSg5f7VOUfk2v71OuLu4TS7tLHR8rtkdJ7GTYs5Fks/vSizN+2ReNVaFs6XMWijdwRRI/FNShqcYleCtKVp46DXk9rvH/xFs71YhPuIDBzUxbk1JM6quOb7SSSIZRRRS0LgImmmQtTHOc5o+hSEIWlTGMatClLSta1pSg4LWlaVrStK0rStaVpWnBWlaeKtK0r46VpX+mg3bc94+sJPBeaFE7ItBNRPE2RjpqEtqGIchyWfMGKchisqGKYpqUqU1K0rStKVpWlaDCkm6UpNS9KUpSlJR/SlKeKlKUdq8FKU/spQB8wbQGwP5nDZ6ejzb31pMjF/G0BsD+Zw2eno8299aTICXgcamr0s623CbS4rstqBdLJ+GRbTU7FxbhVHjVL4VNF86QUOnxqVL4Qpal41K04eGnAOSjNO3z26bng9eendvCXHPQ7dXTl4VVCLl5CPRUV/POWL4RRJo4RIdTi0oXjmLU3BSlOHgoA0c/bWxd8pNg+uNu94ioRvjslHZI0J6forHj9lfsoz1DleO42y3SF0v2rT8zpZP2U4Zwaj5wg28IYqfh1UypcetC8bjVpQZtvtiZA+PV4+s839+FwHc13z2+dd+oOOvV46vCPbadjOmzG6XC1wM27n88olP2Qg2lju0El+JWpPCpkKpxK1LxuCtaAKhftU5R+Ta/vU64u7g9qnKPybX96nXF3cN4n2u8f/EWzvViE+4h7XeP/AIi2d6sQn3EBg7e1TlH5Nr+9Tri7uH0obFeTyy8UY2OL9KUskxMYxrPuGhSlo6SrUxq1jqUpSlKVrWta8FKeOo3d/a7x/wDEWzvViE+4j5szjywCw8qYtjWfQ1I19WlaWzC0rStGqtaVpWjLhpWlfHStPHSoDq7A+TsatMHYZaushWO2dNsU47buWzi7IBFduujaEOmsguipIFUSWSUKZNRNQpTpnKYpi0NStB2t7a2LvlJsH1xt3vEYZueb+vptnLM7dvel2oN0MsZFRQQRuOYSRRRSu+YIkkkkR4UiaSZClImmQpSkKWhS0pSlKDqj2xMgfHq8fWeb+/AJ4N5GtO6r02wWqi47Otq4Lst5+8syrGdtmGkZ6Ge0StCJTUq0lIts6YuaJqFMmeqK5+Icpim4DUrQQWe1TlH5Nr+9Tri7uGthu2NuW9dOx40qzdzwMNcc08Z3nV3Lz0Wxl5R1VO8JchKuZCQQcO16kIWhCVVWNxS0oWnBSlKCdn2u8f8AxFs71YhPuIDBUm7YuS2VEEbkt6ct9V0Q6jZKbiX8Uo5TTNQp1ECP27cyxCGrQpzp0MUpq0pWtK1pQfDF4LfaICCgdQGhhKDhYmGTcYdymounExzOOIucl6wZSHWIzRRKocpa1KUx6GqWla0pWlKij6A+pEQc1cLykfAQ8pOP6pnWoxiI93JPKopcHhFaNmSK61U0+MXjqcTik4acatOGg5V7VOUfk2v71OuLu4WSd0OiYqa2u8WymIyPlmddOeaFatJNk2ftqqJp23xFKoOk1UqnJw14h+Jxi8NeCtOGo1QPa7x/8RbO9WIT7iAwb3WM8jsWy7x7j+92bRsmdZy6dWpPN2zdFOlTHVXXVYESSTIWlanUUMUpaUrWtaUHCBtu7Tuw7GabPHWe5a2ZajZyhpyykqg4b27EIroqktd/UiiSqbMqiaha0pUpyGoYtacNK0qMSIAG6BoE8h7SJ6N+GuwECML8boGgTyHtIno34a7AQID1wAAAChhvv37CaEvnblf6ngRfPFDDffv2E0JfO3K/1PAgM9YWKd1d55vT381Mq9jXorrCxTurvPN6e/mplXsa9Aa54/mqqkgkouuomiiimdVZZU5U0kkky1OooooetCETISlTHOatClLSpjVpSlaj+g6K1RqKI6ZtRSqRzpKpYKy4omomYxFE1CWBcBiHIctaGIchqUMUxa0MU1KVpWlaAOb+2ti75SbB9cbd7xD21sXfKTYPrjbveIwdvbEyB8erx9Z5v78HtiZA+PV4+s839+AbxPtrYu+UmwfXG3e8Q9tbF3yk2D64273iMHb2xMgfHq8fWeb+/B7YmQPj1ePrPN/fgG8T7a2LvlJsH1xt3vEPbWxd8pNg+uNu94jB29sTIHx6vH1nm/vwe2JkD49Xj6zzf34Bou75y9Z5K0i6RI7HLttf8hHahrmeSDGyl0rqeMWimO36JHTxtBHfrtWx1q0SIuuQiRlK0Toapq0oM6/2qco/Jtf3qdcXdwuVbl26dX3q91esr3cr3kzZad7ZdMml1LKXC1aOT5FYJHcNW8uZ4k3XMlWqZlUiEUMnWpKmqWvANF/2u8f/ABFs71YhPuIDIB3fvHWQYjbHaCpGVsW8oyPa5jOo6fyFsTbJm2T/ADQucvhHDpyxSQRJxjULxlDlLw1pTh4a0GxeOMMrIsyNdIvo60bYYPW5/CN3jKAimrpA/BUvHRcINE1Uj8Fa04xDlrwVrTh4K1HJwHEcglMewr3IQpjHPaFylKUtKmMYxoZ7QpSlpw1qata0pSlKVrWteCnjGFhlXFmTlMoZIUTxxfhyHv28DkOS0LhMQ5DXDImKYpix1aGKalaVKala0rStK0rwVG74YpTFqU1KGKalSmKalKlMWtOCtK0r4q0rTxVpXxVp4qjiJse2CcxjnsezznMapjGNbUKYxjGrwmMY1WVa1NWta1rWta1rWvDXxgMHT2qco/Jtf3qdcXdwe1TlH5Nr+9Tri7uG8T7XeP8A4i2d6sQn3EPa7x/8RbO9WIT7iAwdvapyj8m1/ep1xd3DRf3KO2bjtrSrrVQuO35u313OoKxlmyM3FP4pVwkTHJSHVQTft251Uyn/AEDHTKYpTfo1rSviFyr2u8f/ABFs71YhPuI+5FQMHApqowcNFQyK56KrpRUczjk1lCl4pVFSM0USqHKX9Ghz0MahfFSvB4gH1QAAAAAAAAAAAAAAAAAAAAAAAAAAABU83sXXRqy0L6ctKF3aTM23XhK5L5zZd9uXZLWmWKM5m4RhYp5NnHO/yrHSKdEEH9KOSeCTTP4T+k9S/ogLYYhK3jDmZNcvm2iu2VuDNW5Qttm+n3mT/Ss78LiQXZYbTHXXtJde2nbRRri1H3zqK0s54ux5bOXMNXuSDJa98QTSBlZtvGyxoSIiZSiCUpGMXhfYkg2U8K2JwnqTjFqFWAc+xT8KONvn9Z3aKOGxByenYydATDf+reP4oH7I7d+djjEyDCVjtBmHmkhGPGsgwdJq3f4Rs9ZLkctXCfGuYxeOiukRQnGKYvGLThpWnDQBK7jv4P7F+Z1sfUjEcxH5WLJrGsmccxRK3ZMGrdkzbk4eIg1apEQbok41am4qSSZCF41a14C04a1r4x+oAAZdO2r21e1I057UjWRhTCmsjKGPcWY9ygnC2bZsKnbFYuAi62xb72rNnV7b7p1VKrp24W/XOFTcZU36XBwUpFvyhbbN9PvMn+lZ34XATk77h5Ymjb0cLq+0qQFJwaLG744vsHbmYKzxmfaxWyw1sZPwrlWGxpi68MrVXTk7OsWWtNtc8jbkXS1VrdbVYup5wtJKVdN3C/h1K0KsVPgJSwNyenYydATDf+reP4oAY0IDQH3o7ZW7PvRToMsPKGlrTDYGG79k8525bL+5bXPPmfuYJ5DzDhzGqUlJmQQ8Aqs3RUNxUSqcZMvAelOGlc/gAASCbKXFOPc5bR3RtiLK9rx9643yFnO0LZvO05WrikdPwT9dUryNeVaLtnNEHBS0ofwK6SnBT9E9Bqtcnp2MnQEw3/q3j+KAGNCA2XuT07GToCYb/wBW8fxQHJ6djJ0BMN/6t4/igBjQgNl7k9Oxk6AmG/8AVvH8UDNc3hzTdg/SdtSc0YT0747hMWYst228dPIWzLeq9NFx7mXtdq9kVkKyDt664zt0c6ynHcHpxzV4tC08QCEQAF1HdNdnTop11Wlq+f6tNPll5ud2DcWOmlnr3YaaKeCbS8ZMLSKTP8lSsdSpXardE6nhqK14Uy8WpacNKhSuAbL3J6djJ0BMN/6t4/igOT07GToCYb/1bx/FADGhHrbQN5b+kT0kMM/aBAjWo5PTsZOgJhv/AFbx/FA5LZuwZ2ROPrttm+rN0N4kgLts6dirmtmbZqXbV3ETsI9RkYuSbeGuRVLw7N63RcJeETUJx06cYhqcNKhLqAAAw+dqLzi+tb0kMqdqX48Gj3ltRecX1rekhlTtS/Hg0Bqv7n3zQEb6R+af+S2haZFWbc++aAjfSPzT/wAltC0yAo07795PWhLzzZV7EQQznRoxb795PWhLzzZV7EQQznQE9+7Lc83pL/x969jZgbBIx9t2W55vSX/j717GzA2CQHUmfvgIzX5pMkdjpkYO05/XUx/mkh/FrDeJz98BGa/NJkjsdMjB2nP66mP80kP4tYB8sbQGwP5nDZ6ejzb31pMjF/G0BsD+Zw2eno8299aTICXgZmO+peXzpz9G/wD71lxpnDwRqr2XugfW9eUHkHVXposPNF5W1BfmzBz91HnivI6C9lqvvyahSLmI5HwHstZVfhOkdTjnr+nxeClAw/hco3K7y+9RXo3m7aRAubcnp2MnQEw3/q3j+KB6i0qbL3QPohvOcyFpU00WHhe87kgvzZnJ+1TzxnkjBVdJPvyavSUmJFHwHstFJf8AQSIpxyU/T4OGlQ98AAjT2xeYsmaftmDrVzRhu7pKwsoY5wnN3HZN4w9G1ZS3pts/jEkJFlR4g6a1XTTWVKXwzdUnAevCSviASWD5k1/U0t/lj/8AhVRjacoW2zfT7zJ/pWd+Fx+uP3gzbJvn7Jk717ZiXavHbZq5ROlZ/FWbuFiJLJG4LYpXiqJnMQ3BWleCteCtKgIttQHw8Zs87mSO2U0OoxsT4z2DOyJyHjfH1/3nobxJP3hfNkWpeF2Tz1S7aPJu5bmgWE1Oy7vwNyJI+yZKUeuni/gkk0/CrH8GmQvAWnN+T07GToCYb/1bx/FADqjdlOZk0mf4K9u2UwJ8RllbXLaJa09l3r2zXoo0DagLz0z6WcQuLfQxvhqwiwx7XtNKcgWM3LEjjT0XMSlaPZR66eK+yZBevhVjcTik4C0jW5Qttm+n3mT/AErO/C4Cf7ffvKD0JeZvKvbaCFGcaHG702Xa+3UxjqOyLtaIZrrbvXAd+WZZeILgyxVVN7Ytr3bb8jOXFDRFLUUtxGrWVlmDN64q7Scq+FQJ4NQhOEtbE3J6djJ0BMN/6t4/igBQ43PzngYv0cM1/wDFbQ1YRHVpk2S+zq0a5OTzLpk0rY8xBk5KClrZTu+2T3CaTJBTlG9JaOpSSm37XwD2jVvRXhb1PTwZeIcvj4ZFQHg/ah83VrV9G/KnZZ+MPcb5GQbAs/Ktj3XjbIMEzuix74gpG2brt2QqtRlNQUs3O0kY11VuqivRB03UOkpVJVNTimrxTlr4xEryenYydATDf+reP4oAY0I3QNAnkPaRPRvw12AgR4d5PTsZOgJhv/VvH8UCXWzLPtrHtpWzYlmRDaAtKzoKLtm2YNnVWrSIgoRkjHxca2qsoqt4Bmybot0vCqKH4idOMc1eGtQ5KADOY3lba47RzR3tRbywrpo1W5FxHi2Ow/h+fZWbbRLdNFt5i4IBy6mH5KyUI/deGfuCFVW4XFScYtOIQtPEA0ZxQw3379hNCXztyv8AU8CKuHKFts30+8yf6VnfhcWR93omJLbqXHqOgNrQ7U1uQ+A4Sy5jD7DLHFTRsWSu1/JMrjdxH5qFtw9VJVrHs0XPswzktCtyeDKnXjVqFB4WKd1d55vT381Mq9jXo0NeT07GToCYb/1bx/FA7v08bHrZqaT8pwmbNO+kjG2LMp242kWkJedvHuQ0pHtpZqdlIpIUkJ1614rtqc6KnHbnrxDV4tS18YCSsdD6p/Ji1G+YfL32fXCO+B0Pqn8mLUb5h8vfZ9cIDB/AAAAAAAAABdh3JDyxtY/o4Wv9pMeNJcYWuk7XFqu0M3RdF6aTs1XVhO6L0gm9s3RMWoWKM6mIJo/JJt451+VY6RSogk/TI5L4JNM/HLThPUviHuzlC22b6feZP9KzvwuA2XgGNDyhbbN9PvMn+lZ34XDlC22b6feZP9KzvwuA2XgGNDyhbbN9PvMn+lZ34XDlC22b6feZP9KzvwuA2XgGNDyhbbN9PvMn+lZ34XGn/sPs55Y1J7LfSTmzON7SuRcp33Y0jJXdec5RpSUnHyN0TjJNy7oxbNGtFCNWyCNPAt0i8RMvDTh4a1CV8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIYAAAAAAxod4W55vX355Eux1riGUTNbwtzzevvzyJdjrXEMoDSV3I/yO9ZPpH2r9mseLsYx+dkTt+s47ITFmVsVYqwXi3K8Zle/Y2/pOTv6YuqNfRb6NgELfTYsU7fcoIKNVEECrnOuUytFTVKWvE4KCXHluGsTobacPWrJXeACaffMubOxp6SFp/UM6MvUX08Ca6b03sG7nez41O2VbOl6xMfxK+fGN+YMdylw3W/nLZVThW0E7Z32o9iSRblGZWWWWRSo7KoinQh6FqalfYXIj9HfTJ1H+quNe7wFLDYnc7JoE9JCxP4hcbWQo15B3ajT1sirJubaZ4s1E5hyrkXRNEuc+Wfjm/YOzY2zbynLMpRdpBXG+gGiE01i3hlqlcLRqybslKU8GalRH9y3DWJ0NtOHrTkrvABpKgM2rluGsTobacPWrJXeActw1idDbTh61ZK7wAaSoyMt6k55vUH80sU9jWYk45bhrE6G2nD1pyV3gPb+GtjdibeR7Bi9rFqCy5kHT1k/OK722JnF2IIy3ZyxYVtjVwa1I5zGyN4oOp5VaRatCOnhXSxiEXMYqNKJ8FAGd6NCfcgf2H12/OvFH1RPDu7kR+jvpk6j/VXGvd4nE2QexaxDsfofMsPinMGRcsI5mkrak5da/wCLtyNUh1LaavWrdOOpb7dAqpHJXpzLVc8YxTELQnBStQEz4AAAAAAAAAMPnai84vrW9JDKnal+PBo95bUXnF9a3pIZU7Uvx4NAar+5980BG+kfmn/ktoWmRVm3PvmgI30j80/8ltC0yAo07795PWhLzzZV7EQQznRs5bXzY54n2wNjYasbK2W8g4nZYZuu5LsiHtgRlvSTmYdXLEM4dw1kSXAgukkg2SZkVRM2oVQyhzUPWpaUEEXIj9HfTJ1H+quNe7wFVndlueb0l/4+9exswNgkVbtnzusumrZ66r8ZasbE1M5sv26MYrS68da11wFjsoKSNLxTqJVK9cRLNJ+nRJJ0ZVPwB6VqcpaG/RrUWkQHUmfvgIzX5pMkdjpkYO05/XUx/mkh/FrDeJz98BGa/NJkjsdMjB2nP66mP80kP4tYB8sbQGwP5nDZ6ejzb31pMjF/G0BsD+Zw2eno8299aTICXgAFTzb07wlnbZI6j8X4UxbgbFOVIe/MWfn89mb8mbsjpJi+/Lz2I9gtUoByg2O18E1Krx1S1V8IY1OHi8FAFsMBm1ctw1idDbTh61ZK7wE6OwX3hPO+1u1IZPwnlLAuKMVw9iYsrfzKZsSZu2Rknz6k8yiPYLpKfdLNiNfBOjK8dItFfCFLTh4vDQBbEERG3v5nHaF+jxcX1nDiXceYNaWl229aulbOOlO8LlmrOtnOdiv7FmrntxuxdTkKyfuGrg76MbyRFGKzpMzUpSkdEMlWhjcNOHgAYUw+nC/1zE/5mw/ikhpBciP0d9MnUf6q417vH/Cm5QaP4hM8qlrG1GKqxhDSCaSlrY3oRRRkWrkiZ6lYcahDmSoU1S+OlK14PGAuFaf/AIB8J+aPG/Y2FHbgzeJPfINWeEZKQwvD6SNPszEYifO8YRUxJXNkNKRlY2wXClqMZJ+k2fFbJPXzWJSdOk25aIEXVUKlSidC0H4eW4axOhtpw9asld4AIjd5r55vVn/jbJ7Gw4gOGiXiLYeYa3hawYTaxZ3zPknAuT9TRXDu4sXYoirZmbFtw1oLqWo1JDSN2t3U8uV21iknTir1c9SrqqFT4E6FpTsrkR+jvpk6j/VXGvd4DhW5A+T5rt88mKuxM6LzAz9NQ2VpPc/JS3MHaU4tjqwhtZjB7la7ZrPqi9tyVoSeNXCdoR8XbyWPqsWzpjItZlV28UkSqLpuEUyo1onU1K+deW4axOhtpw9acld4ANJUBm1ctw1idDbTh61ZK7wDluGsTobacPWrJXeADSVAZ+mkbfCNVuovU/gXBE/pNwDb8JlzKdnWDKTcTcuQV5OKY3JMNo1w+YIvHxmqjpumuZREjgpkjHLSh6VLw0GgWAAAz09SG+Qas8J6gc2Yeh9JGn2ZisXZTvuwY2XkrmyGlISTG07kkYRq+epNnxW6bp0iyIsuRApUiqHNROlC0pQBoWDJ93uznlr/APMPgfsw7Hu3luGsTobacPWrJXeA9p4O2V+NN6FsJttXtSGTb3015OvaSksLvMX4Wj4OfsZnEYXVLb8RMNpG9kXc6aRmG7oy8ikqtVskqQtGxSkrWgDPJF8/cgf2712/NLFH1xPD2NyI/R30ydR/qrjXu8ebdQ1sNtz8bW3eelNytqwd6zV3tsXczz8Ultt7QbY0TSlY5zbx8fUYqOlpFWaWSeFkaqEIRFOqNCmqbhC/qAzauW4axOhtpw9asld4By3DWJ0NtOHrVkrvABpKjofVP5MWo3zD5e+z64Rnxctw1idDbTh61ZK7wH0obfCNVupCYitPFwaTcA29A56kmOF5ufiLlyCvLQcRlF0lY8lMRaLx8ZotIxjKdWesknRTNlHKCRFy1SqalQpFANJXkR+jvpk6j/VXGvd4ciP0d9MnUf6q417vAZtQDSV5Efo76ZOo/wBVca93hyI/R30ydR/qrjXu8Bm1ANJXkR+jvpk6j/VbGvd4ciP0d9MnUf6q417vAZtQDSV5Efo76ZOo/wBVca93hyI/R30ydR/qtjXu8Bm1AL1W0y3T/TFoa0J6kdWNmaoc5XrdGErELdkPa1y29YjSCmXRpyIivYsk4jGab9JDwUiorxmxyqcdMlOHi1qKKoAA+5bMUlO3Jb0IsqdBGYnImKWWSoWqiKUg/btFFU6G4S1OmRapyUNSpampSlfFwjRVs3cq9INzWhatyONYeots4uC24ObXbo2vjgyKC0rFtX6qKRjsKnMmkdwYhKnrU1SlpU3j4QGccNkHdzeZk0OebiW7ZXGIU+RH6O+mTqP9Vca93jwflTb65w2DV/XFsncJ4Mxbm/GGjt2SwrTyjk+YuqIvq7WMmgldaj64I61nLaBbOk3U8u1ISPRTSqggkY1PCGPWoaKYDNq5bhrE6G2nD1pyV3gLTGwB2v2Vdr/hrP2S8q4nsHE8jiDJtu2LFR1gyVwSTOWZTVq0n1nr9S4F11knKK9fAJkb1KlVL9I1Kn8YCf0AAAAAAAAAAAAAAAAAAAAAAAAAABSK33fyTtEnpD319mygu6iufvGOyc1CbWTB+nXHGnu4LBt+axPlW5b2uFe/5N7GMnEXL2iaCbJMFGTJ6dV0V2ah1CHIQtEv0qGrXxAMjcTa7ufzzehrzkyvY24xJzyM3aY/KXpv9bJ7uISKbJ3dfNd+h7aCabtUuVL7wdKWFiO7ns7cTC17il3k64aOLfloshI9s4iG6KqtHD5IxinWJSidD1pWtaUpUL+wAPkXBMtrcgZu4XpVDs4KIkpl2RGlDLHbRbNZ8uVIta0oZQySB6EpWtKVNWlK1pTxgPrgKkczvj2zWhJiVhXWNtRp3URJPotyZK1IIyRl2DpVosZOtZ2lap1USNUla0pWpa0rWlB83lmWzO+TTUh6pwPfoCkfvC3PN6+/PIl2OtcQyiQPapapLC1rbQTU/qlxewnYuwsyX+S6LaYXM2RZzrZgWAhouqck2brOEUl/Dx6xuKmsenEqSvDw1rQR+AACa/ZebCnVftYcb5Kyfp8uvFlvwWLr1YWNPIX9MyMY+XlZGERnkVWKbKOekUa0aLFIc5zkNRWlS0LWnjEn/Izdpj8pem/1snu4gDczecxyX6N92fX0ENQoZ3mibRNlHdb8oymvTXpKWzfmJL8tl5guJicGPHFx3WlddxuG8wydu2Uw3iGxIsjaHclWWK5MoVQydKJ1pWtaSq8sy2Z3yaakPVOB79ATUbbHmm9ffo333/DoDFNGlpnPeLNGG1bxDkPZw6frMzFb+atZNsyGDMaTV+wMXGWbG3Xd5SoRrq5H7KUeOmkUmdI1XKyDVdQlK0qVM39Ag55GbtMflL03+tk93EAqIgLd3Izdpj8pem/1snu4g5GbtMflL03+tk93EAqIjXN3VvmZNPnztyt2yeCpByM3aY/KXpv9bJ7uIXq9ipogyns8Nn3izS1mWUtiZv2y5y9pKUf2e8cP4JVC47gcSjIrZy6btVjnI3VKVahkS0Kpw0pWtPGAlfABDxtSdtVpg2TMriiI1DWxku4XGX4+4JG2zWBER8mm2Rtxy0bPSyNXr9lVI51HiVUaJ0UoYtDVNUvBThCYcBUR5Zlszvk01IeqcD36PdGzs3jXRZtLNSsRpcwfZeZIS/Zm07svBq/vWBio+CLG2exTkJJNVy0lHa1HCiKhStiURqU5+GhjFp4wFgYAAAAAAYfO1F5xfWt6SGVO1L8eDReH1nbpdtDNQWrDUPnCzshYAZ2rlbLd631b7WXueaQlG8TcU05kGST9FKFVTSdERWKVYhFDlKelaUNWnjHmbkZu0x+UvTf62T3cQCzjuffNARvpH5p/5LaFpkQt7BfZ6Zj2ZOg1npmznMWhOXyhlvId8nfWQ+dSMJWKuo0OaPSo4dtWi3spOjBbw5PBcUvCTimrwiaQAARW7Una4adtkzZ2KL11C27kG4YvL9yz9rW4lYEWxk3LZ/bsW0lnqkiR69ZFSQO3eJlRMmY9TKUNStKUpStYY+WZbM75NNSHqnA9+gLdwCuPoc3mvQxr31L490tYjsfNsRfuSFpRGEf3Zb0SygkDRUY5lHFXrltLOVk6GbtVCp8RE/CpUtK8FK8IscAOpM/fARmvzSZI7HTIwdpz+upj/NJD+LWG9XlC2n1540yJZ8YdBKSuuxbttqPVcmqRsm+nYCQi2h3By0MYqBF3SZlTFKapU6GrSla04BmdyW5q7S53Iv3aeStOFE3L104Toa7J2hqEWXUULQ1PyF4q0KanD/8AqAqCDaA2B/M4bPT0ebe+tJkUbeRm7TH5S9N/rZPdxDQc2Yumi+NHGgPStpfyU+hJK/MKYqirJuh/bjhZ3BupRk9kHCqsY5XSQWWa1I6ToU6iKZq1obhLTgAe7hmY76l5fOnP0b/+9ZcaZwp67wzsEtXG1V1PYnzJgC7cUQFtWPiT8xZVtfk3JRskrLfnC/lfCtUWca8TO19juUy8cyhTeEoanF4KcIDMRFyjcrvL71FejebtpEDgvIzdpj8pem/1snu4h7W0PaVb/wB1XyHcmsnX7IQN/Y0zdbNcF2tG4HcrXLcbW66vkbqo7lGkyjDoIxf5PjV0/DJrqKeHMQvg+LWpqBoaAKiPLMtmd8mmpD1Tge/Q5Zlszvk01IeqcD36At3D5k1/U0t/lj/+FVFSTlmWzO+TTUh6pwPfo/HI75Vs0Xce+ap411H0Ucs3TclTWnA0LQ6yB0y1NX8u+KlDGpw//oAzXdQHw8Zs87mSO2U0OoxzrKNysbzyZkS8IwiyUbdd9Xdcsem5LQjhNjO3BISjQjghamKVYiDpMqpSmrQqlDUpWtKcI4KA2B92U5mTSZ/gr27ZTAnxGevsd95r0M6B9n3g7S1l2x82y9+43b3ElNv7Tt6IewS5pa4H8o3qycuZZsspQrd0mVTjok4FKGpThpThEnXLMtmd8mmpD1Tge/QERu+/eUHoS8zeVe20EKM4sjbxrtcdO21mynppvTT1buQbei8QWBe1r3Glf8WxjHLl/cVxRssyUjiMnr0qqBG7RQqxjmJUqlS0pStK8IrcgAAAD3hsvOcV0VekhivtSwG4QMJ/RnmC29P2q/Tzm+8G0i8tbFWW7Kvq4GsQkmvKOIm3ZprIvUmCKqiSaro6KJiokOoQpj1pSpqU8Y0cuWZbM75NNSHqnA9+gLdwwv8AX35cOrv0kMy9v54aKXLMtmd8mmpD1Tge/Rm06n8lQmZdR2dstW0g9bW7kvLeQL6g28kmRKQQibpuiTmWCT1JM6hE3SbZ4mVchDnKVWhqFMalKVqHRY1gd0S5mmwfPznjtKzGT8NYHdEuZpsHz8547SswFncUMN9+/YTQl87cr/U8CL54rLbxrseNSW1mtrTTD6erkx1bznEE5e8lchr/AJV9GJuULjYRjVkWOqyYvaqnIozVqtQ9CUKWpa0rXhAZOAC3dyM3aY/KXpv9bJ7uIeNNfG7V63tnjpovHVLmW9sLTNhWVIQEdKMLQuCWfTqq1xSSUWyM2bOolsichHCpTLVMsWpU+GtOGviAV3B3xpY8p3Tl5+MQ/aDbw6HHfGljyndOXn4xD9oNvAN4AAAAAVitUG9XbP8A0oahMu6b8g2BnmQvbDV6yti3M9gLahnUM5log5COVY1wtMIqrNTVPTwZ1EkzVpw8JaDoblmWzO+TTUh6pwPfoC3cAqI8sy2Z3yaakPVOB79DlmWzO+TTUh6pwPfoC3cAhP2Xm3X0obWDJOScX6fLUynb89i+ymF8zy9/Q0dGMV4qQm0YJFJioykXp1HVHaxTnIchC0SpU3G4fEJsAEM+8KczJr88zKfbG1xjPjZg3hTmZNfnmZT7Y2uMZ8BzDHn7f2N88LZ+umQ3icT/AAW41+YFm9nY0YO2PP2/sb54Wz9dMhvE4n+C3GvzAs3s7GgOfjG+3jLnm9cfnHiextuDZBGN9vGXPN64/OPE9jbcAQkDSC3IjyUNbfpDWJ9mxRm+jSC3IjyUNbfpDWJ9mxQF3YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHXOWsu4zwRj25cr5ivaAx1jezmZJC6Lzuh6WPgoNkq4RaJuZB4ahioJHcuEUCmrSvCoqQv9oDsYcByt8F2SfmDePZ2REe/v2Oyb6fem/wBe2/8AIHC8kbaTZSyWO79jmGvTTm7fSFl3SyZNUb5bnWcu3UG+QbN0i+A/SUWWUImQv9pjUp/aAxssifCBfXzxuf67fDhw5TfLps+va8XzNZNw0eXTcLpq4SNxkl2ziWdrILJm/wDuTVSOU5Df2lNSo4sAAAANJXcj/I71k+kfav2ax4uxik5uR/kd6yfSPtX7NY8XYwFRHfMubOxp6SFp/UM6MvUahW+Zc2djT0kLT+oZ0ZeoCUbYnc7JoE9JCxP4hcbWQxGdknkWxsR7SvRZkzJl0RFlWDZWebOn7suyfc0Zw0BDM11jOpKSdGoaiDVChqVUUrStC0qNaD37HZN9PvTf69t/5ACUYBFz79jsm+n3pv8AXtv/ACA9+x2TfT703+vbf+QAlGARc+/Y7Jvp96b/AF7b/wAge7cJ52w9qQx7FZXwTkS2Mp43nF3zWIvOz5AspBSDiNcGaP0WzwhSlUO0ckMitSlP0FC1LUB2yM9jffv240JfNTK/1vAjQnFILe79DurrV9d+jd5pj0+ZLzc1s228ktrpXsCAUmk4JxJSkMqwSkTJnJ4A7tNFU6NK8PHKmatP6KgM4QWdt0T55awPMPnjsw0EZ/vJ21k6AmpD1EcfzxYR3YvZqa9tMG1VsrK2oPSjmTEeOGWGsywru8r1tdaKgm8rNW+2bxTBR4dU5SuX65TJNk+DhOelaUAaUIAPhXRc9v2Vbc9eF2S7KAti14iQn7hnJJWiEfEQ0S1VfSUk9XrStEWrJogq4XUrStCJJmNX+gB90BFz79jsm+n3pv8AXtv/ACA9+x2TfT703+vbf+QAlGARc+/Y7Jvp96b/AF7b/wAgPfsdk30+9N/r23/kAJRgEXPv2Oyb6fem/wBe2/8AID37HZN9PvTf69t/5ACtfvv3k9aEvPNlXsRBDOdF6/e79d2jvV9g/RxB6Y9RWMM3S9m5WyRLXTH2BcCU06go2StGHZsHsimmmSqCDp0iqgievDQyhDF/sFFABPfuy3PN6S/8fevY2YGwSMafd+M04p0+bVnTRlfNl+25jPG9svbsPcF53Y+LGwUSR3aso0bGevDlMVKi7lVNFPhpXjKHKX+0aiXv2Oyb6fem/wBe2/8AIASjAIuffsdk30+9N/r23/kB79jsm+n3pv8AXtv/ACAEowCLn37HZN9PvTf69t/5Ae/Y7Jvp96b/AF7b/wAgBKMAi59+x2TfT703+vbf+QPYunfVZpx1aWvLXrprzJY2abTgZf8AIEzP2HLkmI2OmfY6bv8AJrpdMhKJuvYyqa/g604fBnKb+0B6BFNffUfIE06+kgXsXLi5QKa++o+QJp19JAvYuXAZl4AAAAAAAAAAAAAAAAAO6sCacs6apL9Ji7Txi278v5DUiJGeJaFkRh5abNDRFEayclRoQxDVasqOEKuFOHgJ4Uni8Y9ue8nbWToCakPURx/PARcgJIL02QO06x1adxX3fGiHP9r2faUQ+n7luKXstdtFwsNGoHcv5J+4qtWiLVqgQ6qylaVoUha14BG+AAAkptfY67US9bbgbwtPQ1qDn7YuiIj5+3pyNspwvHy8NLNUn0bJMlqLUoq1etFknCClKUodNQpuDxgI1hrA7olzNNg+fnPHaVmM8T3k7aydATUh6iOP540oN2K085u0wbKqy8U6g8Y3biPI7LM2ZZp3Zt6xp4mdbxU1PtXEU/UZnMYxWz9EhlW6nDwHIWtaALCQAAAK629RczJqE+deKu2TIWKRXW3qLmZNQnzrxV2yZAMjAd8aWPKd05efjEP2g28Ohx3Lpzmoq29QmCbhnX7aKg4HMuMJqZk3ilEmkbFRd7wb6Rfula8NE2zNogs4XUrStCJJmN/YA3kwEXPv2Oyb6fem/wBe2/8AID37HZN9PvTf69t/5ADKV22nOza/PSQvr+IQEW4sS7SnZs68tXOvTVZqY0z6VMxZrwFmvMVz37ifLFhWutM2Zf1mzKqR4u5LblU1SEfxT4hDmbuSlLRSha1pQeIPeTtrJ0BNSHqI4/ngIuQEo3vJ21k6AmpD1Ecfzw95O2snQE1Ieojj+eAsN7kh5Y2sf0cLX+0mPGkuM5ndqce3tsitQ+ofKm0ztmW0T46yrh6EsLHN458bVs2DvG8o68mk++tyDeL1WK7lGsKgtJLNy0pUrVMynDwU4Bcg9+x2TfT703+vbf8AkAOrd4U5mTX55mU+2NrjGfGq3tv9q1s4s47KbWpijEWsnBmQskXrikkTadmWzd6D+dn5Kl0266qyjWZUimXX9jt11uJStK8RI9f7BlSAOYY8/b+xvnhbP10yG8Tif4Lca/MCzezsaMHbHn7f2N88LZ+umQ3icT/BbjX5gWb2djQHPxjfbxlzzeuPzjxPY23BsgjK+27Oyr2jGd9qzq/yvh3R1nHIuN7wvyNf2vedr2ivIQU4yTtWBaKOY94VUpV0iOUFkTGpSnAomcv9NAFUgaQW5EeShrb9IaxPs2KKYfvJ21k6AmpD1EcfzxfK3RXSHqb0h6bNXFtam8JX/hKfu/ONmzlsxN/wqkK8m4hlYRWDqQj0lDnqs2Qe/wDplFKVpQqv6PAAt0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEreMOZk1y+baK7ZW4JtRCVvGHMya5fNtFdsrcAY3gAAAAAAAAANJXcj/I71k+kfav2ax4uxik5uR/kd6yfSPtX7NY8XYwFRHfMubOxp6SFp/UM6MvUahW+Zc2djT0kLT+oZ0ZeoAAAAAAAA1zd1b5mTT587crdsngyMhrm7q3zMmnz525W7ZPAFisAAAAAAB5J18+RBq79G/M32fzw9bDyTr58iDV36N+Zvs/ngGF6AAAAAAAAAAAAAAAAAAAAAAADTO3K3yBtRnpIf9lRAzMRpnblb5A2oz0kP+yogBcqFNffUfIE06+kgXsXLi5QKa++o+QJp19JAvYuXAZl4AAAAAAAAAAAAAAAAtL7n5zwMX6OGa/8AitoasIyntz854GL9HDNf/FbQ1YQHg/ah83VrV9G/KnZZ+MPcbhG1D5urWr6N+VOyz8Ye4AN0DQJ5D2kT0b8NdgIEYX43QNAnkPaRPRvw12AgQHrgAAAAAABXW3qLmZNQnzrxV2yZCxSK629RczJqE+deKu2TIBkYAAAAAADaw2JfNM6A/RvsX+HXEpAi32JfNM6A/RvsX+HXEpAAAAApPb7f5HOjj0j7o+zaQGbQNJffb/I50cekfdH2bSAzaAAAABzDHn7f2N88LZ+umQ3icT/BbjX5gWb2djRg7Y8/b+xvnhbP10yG8Tif4Lca/MCzezsaA5+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACl9voeSMiY30s6MX2O79vSwn0ln+92ki8su6Zy1nT9qljo6yTZ64g3zFZ03TW/WpornUTIp+mUtDeMXQRSK33fyTtEnpD319mygDP091Pqd6RueOt7IP4hEwOwRy/lnLm1r0a48yvlDImTsf3NkCSZ3HY2Qr2uW9LOuBoS059wRrN2zcknJQsq2I4RSXKg/ZOEirJJq0LQ5CmpAMJtd3P55vQ15yZXsbcYDXK9yvph6OOBuqDHv4eHBco6XNMyGM8iroadcFIrI2LdyqKyWI8fpqpKp2/IHTUTUJb9DpqJnpQxDlrQxTUoYtaVpSo9ZjgOVvguyT8wbx7OyIDBzyAmmjfl7JJEIkkld1yJppplKRNNMky9KQhCFpQpCELShSlLShSlpSlKUpQcRHMcifCBfXzxuf67fDhwDX92BOnnAN2bH3QncV1YNw9ctwSuIVHEnO3BjOy5mYkXFLuuVOi7+TkYRy9eLeDIQnhXC6h+IQpeNxS0pSYL3K+mHo44G6oMffh4RvbvTzMmgTzNq9sboEzQDhll44x5jdm8j8d2HZlhMJByV4/Y2Xa8HazN87InREjp42g2LFFy5IjSiRV1iHVKnShKGoWlKDmYAAqI75lzZ2NPSQtP6hnRl6jUK3zLmzsaekhaf1DOjL1ASZ7GiEhrk2p+hOCuGIjJ6DldRFkM5OGmmDWUipJoq4Woq1fxz5Jdo8bKUpSiiDhFRI9KfpFqNkz3K+mHo44G6oMffh4Y42xO52TQJ6SFifxC42sgHQ3uV9MPRxwN1QY9/Dwe5X0w9HHA3VBj38PDvkAHQ3uV9MPRxwN1QY+/Dwy4t5UyZkfCG1rznjzC+QL3xDj+JtfGa8XY2L7rnrAs6NXfWm0cPVo+2bUfxMKzVeODGXdKN2SZ3CxjKq1OetTDWWGRlvUnPN6g/mlinsazAQme6n1O9I3PHW9kH8Qi/TuW2UMl5JsrW+rkXIl9X8pGXTi5ONUvW7Z+6Tx5F4mcMuRiedkH5mhFjEKZUreqdFKlLU9K1pTgznhoT7kD+w+u3514o+qJ4BfRFa7ewL0vGwtkDfdw2Ldly2XPpZxwc1SnLTnZS3JhNs6uR0Ry3Tk4d0zekQcEpQi6JV6JrFpQqhTUpwCyiKxO92czTf/n4wP2ndgMvX3U+p3pG5463sg/iEeoNEmonUDdOsXS1bVzZ0zHcduT+f8Sw87ATuTb1l4WaiZG+IRrIRctFSE24YyMc+aqqtnjJ4gs2ct1FEV0jpnMWsc49baBvLf0iekhhn7QIEBtk+5X0w9HHA3VBj38PB7lfTD0ccDdUGPfw8O+QAdDe5X0w9HHA3VBj78PB7lfTD0ccDdUGPfw8O+QAdDe5X0w9HHA3VBj38PB7lfTD0ccDdUGPvw8O+QAdDe5X0w9HHA3VBj38PB7lfTD0ccDdUGPfw8O+QAdDe5X0w9HHA3VBj78PB7lfTD0ccDdUGPfw8O+QAdDe5X0w9HHA3VBj38PB7lfTD0ccDdUGPvw8O+QAdDe5X0w9HHA3VBj38PB7lfTD0ccDdUGPfw8O+QAdDe5X0w9HHA3VBj78PDPC3u24rg06a28CWtp8nZnBNsS+APyxK25huTe4wgZOW/O+UbflSQiLJXg497I+x000PZrluq58CQiXheIUpaaWwzMd9S8vnTn6N/wD3rLgKpvup9TvSNzx1vZB/EItk7oncVwai9buerW1Bzszna2InAFZiKtzMko9yfAxktS7otvSUj4e9l5yPZSPsdRRD2a2bpufAnOl4XiGMWtL4XKNyu8vvUV6N5u2kQA0V/cr6Yejjgbqgx7+HhE9t0dO2n61tkTr7uG2cF4ctyficAXA7ipyCxjZURMRjsklEFI5j5OPhG71m4KUxqFWbLpqFoY1KGpStRO0IiNvfzOO0L9Hi4vrOHAYvwAAAAAAAAAAAAC0vufnPAxfo4Zr/AOK2hqwjKe3PzngYv0cM1/8AFbQ1YQH4ZOLjJuPexEzHMZeKkmyrORjJNo3fx79ouWpF2r1k6TVbOmyxK1IqgukokoWtSnLWla0HSnuV9MPRxwN1QY9/Dw75AB0N7lfTD0ccDdUGPfw8MZrW7qI1AWtrG1S21bGdMxW5bkBn/LMPBQEDk29YiEhYmOveaax8XExUfNt2MdHMWqSTZmyZoItmyCaaKCREyFLTbeGF/r78uHV36SGZe388A6/91Pqd6RueOt7IP4hD3U+p3pG5463sg/iEdDgA7491Pqd6RueOt7IP4hF5bctsr5SyTe+t9LIuSr/v5KMtXFykanet43FdKceovLzhVzsSTsi/K0OsUhSqmb0TMoUpaHrWlKcGfiL5+5A/t3rt+aWKPrieAaFIrrb1FzMmoT514q7ZMhYpFdbeouZk1CfOvFXbJkAyMB3jpiatn2pTT0yet0HjN5nHEzV20dIpuGzps4v2ASXbuEFSnSXQXSOdJZFUhk1EzGIcpimrSvRw740seU7py8/GIftBt4BuD+5X0w9HHA3VBj38PB7lfTD0ccDdUGPfw8O+QAfMhYSGtuKYQVuxEZAwcU2TZxcNCsGkXFRrRKnAk1YRzFJBmzbJ0rWiaDdFNIlK8BS0H0wAAAAAcMvTHGPMkM2cfkSw7Mv1hHuTPGDG9LXg7pZsXZ06ondM204xfItnJ0a1SMuiQipk61JU1S1rQdc+5X0w9HHA3VBj78PDvkAHQ3uV9MPRxwN1QY9/Dwe5X0w9HHA3VBj38PDvkAHly+9L+mhpZF5O2unfBjZ02tW4XDZy3xJYKLhu4RiHiiK6CydvlUSWSUKVRJVMxTpnKU5DUNSlaYrWTdTmpNjknILJlqEzizZM74uxq0aNcs363atWreekEW7Zs3RnyJIIIJEIkiikQqaSZSkIUpS0pTcYyH+wF8/M+5vqV6MHbLHwpZK+f95dopIBzn3U+p3pG5463sg/iEa8e73XJcV3bHzRTcV1z01c9wSWPJRaRnLhlH01MSCpbvuFMqr2Tkl3L10pRMhCUOuuoahClLSvFLSlMaQbIO7m8zJoc83Et2yuMBNuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPB2vHZtaTdpNZ9iWJqzsaTvm28b3LIXbabSLuWWtpRjNycXWHeOVXESqko5IowrVKiKtakKb9MtOMPeIAK6nJW9jJ0fLt61ry++DvfTPu9my80i5wsHURg7DFx23lPGcotMWjNPMiXRMNmD9di6jlFVY586O1dFq1eLkoRYhi0qahqU4S0E2gAA4Dlb4Lsk/MG8ezsiOfDgOVvguyT8wbx7OyIDB2yJ8IF9fPG5/rt8OHDmORPhAvr543P9dvhw4BN3pu3hzak6TsH47074TzRbdu4sxZCVt6zIV5jq15dzHxZnruQqgtIvWp3Ts3sp64P4RY5j8B6F4eAtB3hyqTbN9IO0uqmzfuYrqAAsV8qk2zfSDtLqps37mHKpNs30g7S6qbN+5iuoACV/W/tq9oJtD8WReGtUuU4O9LChrnZ3gwi42ybft1dKdYN3DVs5M9i26Tg5CIuli1RMbwZqmpWtOGlBFAAAO2cE5syFpvzDjvO2KJVCDyRiy54+8LMl3TFvJN4+dizGOzcrMHZTtnZEzGrWqKxTJn/AKDUE6XKpNs30g7S6qbN+5iuoACxXyqTbN9IO0uqmzfuY1dcC3RMXxgzC96XE4I7uC78T46uiddJpEQI5mLgs+HlpNwRBOlE0SLPXa6hUk6UInQ1CFpQtKDBfG7/AKV/Jh04+YbEH2e26A75GRlvUnPN6g/mlinsazGuaMjLepOeb1B/NLFPY1mArqCSHQZtYNa2zXYZBjdJeRIixmmT3kQ+vBOUtKFuar9zBIuG8cdI0sgqZrRFJ0sUxUa0opxqVNw1pQRvAAsV8qk2zfSDtLqps37mJH9lVtAtTu3w1cwWzy2lt5R2YNLd1WRe+UJqy7et6MsCScXhi+NSmbOfkuK2km0okkwkF1FVWpFaIui1oRahi04BS1FnbdE+eWsDzD547MNAF1fkrexk6Pl29a15ffB1ZnHd1NlbpawzlXUphvCly2/lrAePbvy/jSdd5HumVaw99Y8gn11WtJuIx46O0kEWU1Fs3CjNyQyDkidUlS1Ic1K2fh5J18+RBq79G/M32fzwDLo5VJtm+kHaXVTZv3MOVSbZvpB2l1U2b9zFdQAFivlUm2b6QdpdVNm/cw5VJtm+kHaXVTZv3MV1AAWK+VSbZvpB2l1U2b9zDlUm2b6QdpdVNm/cxXUABYr5VJtm+kHaXVTZv3MOVSbZvpB2l1U2b9zFdQAFivlUm2b6QdpdVNm/cw5VJtm+kHaXVTZv3MV1AAWbcR70NtibqyvjG2JnPtqOIe5MhWXAyzcmLbPSOvGzFyRse+RKqRnQ6RlWrhUhVCVoYlTUMWvDSg1fItdRzGRzlavGVcMGa6pqUpShlFW6ah68FPFThMateCnioMHHAPw74U87eN+2MMN4mD/qWH/yuP8A4REB9QAAAEWGufYz6B9o1kS2cp6q8YTd7XlaNsfmfByEZek9baLaC9nLSPsY7SKcJIrH9luFT+GOWqnAaheHgpQSngArqclb2MnR8u3rWvL74Ij9sHpyxVu5uDbA1TbKmEc4SzLlvIVMP3xcFzSTrJDSSsWsO7uOsajFXUd0zZrflVg2X9mIEKvxSVT43ENWgvNimvvqPkCadfSQL2LlwFVrlUm2b6QdpdVNm/cx6r0O7avaCbUjVrgXZ76x8pwd/wCl/Vjf0fibNlmRNk2/aslcVkSzd29fRzO4odujKRCyriPamo7ZKkXJQlSlNShqipSJd9ghzx2z09Ie3fqyYAaK3JW9jJ0fLt61ry++D8MnusOxobRsg4S0/XaVVBi7WTNXKt5VpRRJuocla0q84K8Bi0rwf2ixyPmTX9TS3+WP/wCFVAYLuXYCMtXLGT7XhUTN4e28h3rARLc6hlToRkPcknHMETKnrU6pkmrZIhlD1qY9S1MavDWo68HbmoD4eM2edzJHbKaHUYDRj2HmwA2ZGs3ZqafdRGfcOXFdGU77a3Opck0xyDc0K2dnjblkY5pVOOYOU2rfwbVukStEyU41S1NXx1qJauSt7GTo+Xb1rXl98HOt2U5mTSZ/gr27ZTAnxAV1OSt7GTo+Xb1rXl98Dkrexk6Pl29a15ffBYrABETot2G+zp2f+aUs/wCmTE89Z2TkLYnbPTmZG+riuFuWCuOjWks2/J8m5Va1OvRm34q1SeES4teJWnGqJdgAB5Q115QvDCmjXU3lzHz9KKvjHOFr+vC1JJdqi+RYzsHAu30c5VZuCmQckRcJEOZFUtU1KU4pqVpUZcPKpNs30g7S6qbN+5jTd2ofN1a1fRvyp2WfjD3AWK+VSbZvpB2l1U2b9zEA2RL9uXKd+3nku83ichdt/XPOXhcz9Fuk0SeTtxSLiVlXKbVGhUW5F3rpZQqKVKJplNQhKULSlBw0AAaAW7vbCzZx6+NmxaWofUviWfvDKUrljK9rvZqOvy47fbKQ9rzbZnDt6R0a5SakO3bqHKdUpOOrWvGPWtaDP9GsDuiXM02D5+c8dpWYDszkrexk6Pl29a15ffBCFtmIGN3a+Ewnc+yXRNg2Y1Oyl0QOYF7oUNksk9G2M0YyFuItErsq7JFmaOpR4dRRnQhl6KUKpWtCFF+gUMN9+/YTQl87cr/U8CAgB5VJtm+kHaXVTZv3MeaNW+3t2lmt/B9yad9RGX7euvFl2PIh9NwrCwLag3LlzBviSMcckjHtk3SNEnSZDmKQ9KHpTim8VRDWAAOQWldExZF12zeluuCNLgtC4YW6IJ0okRcjaYgJJtLRjg6ClKprERetEFDJKUqRShakNSpa1HHwAWK+VSbZvpB2l1U2b9zDlUm2b6QdpdVNm/cxXUABYr5VJtm+kHaXVTZv3MOVSbZvpB2l1U2b9zFdQAFivlUm2b6QdpdVNm/cw5VJtm+kHaXVTZv3MV1AAaUO6/7YXXbtI9SGpHHurHJcLfFr49wvBXfa7KMs2CtpRlOvb1Zw7hyo4iUElXBDsFTpURVrVMpq8elONSlRdXGbRuSHljax/Rwtf7SY8aS4AAAA/FJR7WWjpCKekqoyk2TqPdplNUhlGr1BRs4JQ5f0i1MkoctDU8Za14aeOgr5TG64bHGdlpSbksA3YtIzMi+lX6pcp3imVV7IOVXbpQqZXlCkoddZQ1CFpQpaV4tPFSgsNAArqclb2MnR8u3rWvL74JtNM2m7E2kXB9g6d8HQbq28WY0jFoe0YV5Ju5hywYrvnUiokrIvjndOjVdPFz0OsepqUNQtPEWg73AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfBumELc1sXHbZ16tS3BAy8IZyUlFDNiyse4YVXKStaUPVGjiqlCVrShql4K1pw8I+8ACiNcO5L2RPT85OG10XU3NMzEnLGQpiuIPRCsi9XeVRoes7SpqJ1W4lDVpSpqF4eCnCPj8iBsfp23X1UxHfwvogAoXciBsfp23X1UxHfwciBsfp23X1UxHfwvogAoXciBsfp23X1UxHfwciBsfp23X1UxHfwvogAoXciBsfp23X1UxHfwciBsfp23X1UxHfwvogAoXciBsfp23X1UxHfwciBsfp23X1UxHfwvogAoXciBsfp23X1UxHfwvL4vsomNcZ47x0k+PKJWDYtpWUnJKJUQPIktWAj4Ij46BTGKid2VhRwZIpjUTqpUlDVpThrzoAAZGW9Sc83qD+aWKexrMa5oyMt6k55vUH80sU9jWYCuoLFWwt2FsFtiILPkzM58lsL1wvLWlGIIRlpM7mpOUuZnIOjqqndSDKrWrWrKhClJRTwnhK1rUvF8ddUaE+5A/sPrt+deKPqieAORA2P07br6qYjv4SXbJndlbY2W+sOB1ZRWqSeyu7g7Gvqyi2hIWHH2+2XJesYlHHfVkW0q7VIdjRKipEqI1orWvFqYv9ItRgADqjO+L0s24Uyzh1eVUgkcpY6vGwFZpJuV2rEp3bAP4M8im1OdMjg7Mr2q5UTHIVSqdCVNSleEdrgAoXciBsfp23X1UxHfwciBsfp23X1UxHfwvogAwhdVOFUNOGpHN+BW04rczfEOS7ssBG4F2pGK0ynbUq4jSyKjNM6pGx3VEPCmRKocqdTcWhq0pwjoEe8tqLzi+tb0kMqdqX48GgLZmxt3aW2dqlo4a6qJXVBO4lduMl3vYFbSj7Fj7hblTtE0YUkj+UHMo0Uqd5+UK8ZHwPFS8HTgMbjeKVvkQNj9O26+qmI7+EnG5980BG+kfmn/AJLaFpkBkn7dLYJwGx4x1gS+obUHMZoPmi9bttJePk7PZWySDJbUEwmCPElmsi9q6M6q9qiZM5U6J0ToahjVNwUrbjRi337yetCXnmyr2IghnOgAAADtvAPw74U87eN+2MMN4mD/AKlh/wDK4/8AhERg7YB+HfCnnbxv2xhhvEwf9Sw/+Vx/8IiA+oAAAAAAApr76j5AmnX0kC9i5cXKBTX31HyBNOvpIF7Fy4DMvEu+wQ547Z6ekPbv1ZMCIgS77BDnjtnp6Q9u/VkwA2gR+Z63o8Zu2lTVJR02Xb1PSnDUlF0jpVNSni4al43DwcPj4OAfpABRav3cqrJvi+r0vVTXHdLA933Zcd0HYkxZEqkZHuCYeSxmhVTTpaqlb1d1RKpUpanoShq0pWvAOJ8iBsfp23X1UxHfwvogA8I7NbRKx2eGjrFOkuOvp1khpjFGaRSvB7FIwrmVpMTDuWqZSNQXcpN/A1dVRpQqx+NQlDV4K14Ke7gAAAAARTbZLaRyWyt0bu9VEVjJjlp22yXY9gfmlITji3m5k7vNKFPI/lBs1dqUOz/J9KlR8DxVfCV4TF4tOGpjy36+OglanWtL9wiZDfA+Z+lPSPwp/wAtyjKeAXXtTe+K3lqN09ZmwM50XWzbLfLuOrpsBa4EMmSr5aGTuWLXjTSKbNSESI5O1ov4UqJlCFUqXi1NTh4RShAAAAAAFqPZMbzTc+y30ewOk2K0twOV2kJfV9XqW75C/JC33K571kkZA7Gsc2inaRCMapUTIrRatVaV41Sl4OAVXAAX0eW/Xx0ErU61pfuEQWbazbpzu2Ig8GwszgOIwuXC8tdUoivGXa8uas5W5mbBoZJUrqPZUa0a0ZUOUxKnqpVStK0pwCAEAASQbKDQaw2k+tbHWkuSyA8xg0vqJuyTUvBjDozrlhW2oVeWKkSNcOGqS1HRkaImMZYvg6G49KGrTgrG+LFO6u883p7+amVexr0BP9yIGx+nbdfVTEd/ByIGx+nbdfVTEd/C+iAChdyIGx+nbdfVTEd/ByIGx+nbdfVTEd/C+iAChdyIGx+nbdfVTEd/ByIGx+nbdfVTEd/C+iADGP21ey2itkxqetfT1EZXkMvt7ixpE3+a45G321uLtlJOQfsqxxWTZ28TORKjKilFqq0MaqlaVLTg4aw7i3hvmfOX4y9G+1Pr+dFQ8Bdh3JDyxtY/o4Wv9pMeNJcZtG5IeWNrH9HC1/tJjxpLgPFW0V1Zu9C2inUJq0YWe2v55hGyi3ahZ7uRViG06c01FRXsNaRRRcKtC0LJVW8IRFSvClQvBwGrWlK3lv18dBK1OtaX7hFo/eFOZk1+eZlPtja4xnwF9Hlv18dBK1OtaX7hDlv18dBK1OtaX7hFC4AF9Hlv18dBK1OtaX7hDlv18dBK1OtaX7hFC4AF9Hlv18dBK1OtaX7hFlrYY7YSY2wuJM5ZNmMMRmGFcP5GgLERi4y5nVzJzSc1bNLgrIKuHTJkZsdA1fY1ESkOU5f06mpXxDHUGkFuRHkoa2/SGsT7NigLuwAAAAAAAAAAAAAAAAAAAAAAAAAACO7aJbUTSfsurIx5kHVjOXpB25lC6pKzbTVsuy5G9Ha83FRFZt4m9axyqR2TcrClTEcKVqRRT9XSnD4xIiKRW+7+Sdok9Ie+vs2UAe/+V2bGn4/546h7m+9hyuzY0/H/ADx1D3N97GT6ADWC5XZsafj/AJ46h7m+9hyuzY0/H/PHUPc33sZPoANYLldmxp+P+eOoe5vvYcrs2NPx/wA8dQ9zfexk+gA1guV2bGn4/wCeOoe5vvYcrs2NPx/zx1D3N97GT6ADWC5XZsafj/njqHub72HK7NjT8f8APHUPc33sZPoANYLldmxp+P8AnjqHub72HK7NjT8f88dQ9zfexk+gA1guV2bGn4/546h7m+9hyuzY0/H/ADx1D3N97GT6ADWC5XZsafj/AJ46h7m+9iyjZd2Q9/Wdad9W8ourb96W1BXZBqukDNXKkPccW1mIxRw2PWp2652TxAyyB61MipUyZq1qWowLBu/6V/Jh04+YbEH2e26A75GRlvUnPN6g/mlinsazGuaMjLepOeb1B/NLFPY1mArqC2/uyu2G0V7Le2NUkVqyuG/4N3leesOQtAtlWBKXqRdtb8fKtpGr48cslRicirtGiRFeGqtKmqXgoWoqQAA1guV2bGn4/wCeOoe5vvYcrs2NPx/zx1D3N97GT6ADWC5XZsafj/njqHub72HK7NjT8f8APHUPc33sZPoANYLldmxp+P8AnjqHub72HK7NjT8f88dQ9zfexk+gA9T64cs2fnfWDqUzNj5w+dWPk7Ml9XrajmTYqxkgvBT846fxyr2OWqZZk4O3VJVVspWp0jVqU1eGg8sAAC9tu9O342duzk2ezLTnqauvKMPkxDMeSb0UZ2li6au6IpBXOeFrFK0l2DhNCrg9GK/hm/F46PAXjVrxqCczldmxp+P+eOoe5vvYyfQAXCN5q2zeh/akYj0t2dpNuPIU5N4oyPfdy3eneuPZWym6EXP2zFxccdi4kVlSPlju2qxVUUqUMkShTm8RqCnuAAAAADtvAPw74U87eN+2MMN4mD/qWH/yuP8A4REYO2Afh3wp528b9sYYbxMH/UsP/lcf/CIgPqCv7qZ3mLZZ6Sc95S025jvTMTDJ+HbqdWberOCw7PzsO3m2aLdddOPl2zkiEg3om5SqVwkUpDVqalKeIWAhi/be/njtoX6Q9xfVkOA0C+V2bGn4/wCeOoe5vvYl82fO0p0vbTfGV15b0rTN4TVm2Zdn5lTji8rPf2a/TnfyehJ+CbsJBRVVw39iOEjeySVoTj1qTg4aVGICNM7crfIG1Gekh/2VEALlQpr76j5AmnX0kC9i5cXKBTX31HyBNOvpIF7Fy4DMvEgeyp1E400lbRPSPqSzG8lmGMMO5diLyvV5BRK87Lt4RkykUF1I+HbGI4kHFFHKVCt0jFOala1pXgpUR+AA1guV2bGn4/546h7m+9j+zfe5dja6cINkr/zvVVwskgnQ2CLmKWqixypkpU1XfBSlTGpw1/sp4xk7j6cL/XMT/mbD+KSAb5NsXFG3fbVvXZDHVUh7og4m4olRwkZuueNm2DeSYnWQPWpkVTNXKRlEjVqZM9TErXhLUfcHUen/AOAfCfmjxv2NhR24AAAAAAACDXeFdBmoTaN7PV9py0yxVsTGTXGY8a3omzu252VoxH5Ctg80aVVrLv01EKOCUfIeBb8XjrcJuLWnFqKI/JE9st8QMD9fFs/dBrBAAyM8ybrXtZ8EYpyFmbIFj4Va2RjG0pq9bqcRmardk5BCCgGSr+RUZR6LUqr1yRuieqTZM1DqmpQpa0rUV0xuEbUPm6tavo35U7LPxh7gAse4x3Vfa5ZcxzYuU7NsXCTi0si2lAXrbS7/ADbbjB6tBXLGNpeLUdslGplGjk7J2iZZsetToqVMmatalqK4Q3QNAnkPaRPRvw12AgQGZryRPbLfEDA/XxbP3QOSJ7Zb4gYH6+LZ+6DWCABk+8kT2y3xAwP18Wz90EaW0U2POtTZbxuNpXVlb1gQbPK76bj7QNZV/wAXep13NvoNnMiV8nHIpVYkIk7RqkdXhorWpil4KlqNq8UMN9+/YXQl87crfU8CAz1hYp3V3nm9PfzUyr2NeiusLFO6u883p7+amVexr0BrnjjV53ZD2FZ92XzcKi6UBZdtTt2TirVAzpylD25FupiTUbtiVodwuRkzXMigStDLKUKmWtKmoOSjofVP5MWo3zD5e+z64QEAPK7NjT8f88dQ9zfew5XZsafj/njqHub72Mn0AG8np5zxj7VBhDGOoPFDqTfY4y7aUbetmu5qMWhZVxBSpTHZqP4pwYy7ByYpDeEbKmqclf6ajuURb7EvmmdAfo32L/DriUgBl775nzl+MvRvtT6/nRUPFvDfM+cvxl6N9qfX86Kh4Cytu0G090p7L3UTqKyTqvm7zhLYyThyDsu11rLsyQvR4tOsLyaTbhJ4zjlUlGbejBE5iuFK1IZSlE6U4ai5ZyuzY0/H/PHUPc33sZPoANObWXtwdBe2G0xZg2aWiu5skXDqk1c2xTGmG4W/8by9gWfIXSSTYXJVGevCUXWj4Fn+S4KQP7MdJnT8MRJHg4ypRWP5IntlviBgfr4tn7oPEO71883oD88ynY66BswAMm6V3SXbGw0ZJS72wcFFZRTB5JOzJ51tlRQrVi3UdOKkTo0pU56JJHqUlPGY3AWnjqK1c3EPbfmZeBkipkkISTfxD8iSlFUivY12qydFTVL+iomVdFShFC+I5aUNTxVG9rkP9gL5+Z9zfUr0YO2WPhSyV8/7y7RSQDgAAAANILciPJQ1t+kNYn2bFGb6NILciPJQ1t+kNYn2bFAXdgAAAAAAAAAAAAAAAAAAAAAAAAAAFIrfd/JO0SekPfX2bKC7qKRW+7+Sdok9Ie+vs2UAZvg5PZtlXhkS5YqzbCtefvO7ZxczaGtm14l9OTsq4IkdYyEfFRqDh67VKikoqZNBE5qJkOetOKWtacYE2u7n883oa85Mr2NuMB4A9wPrf6IupDqZv/uEPcD63+iLqQ6mb/7hG6EADC99wPrf6IupDqZv/uEPcD63+iLqQ6mb/wC4RuhAAwvfcD63+iLqQ6mb/wC4Q9wPrf6IupDqZv8A7hG6EADC99wPrf6IupDqZv8A7hD3A+t/oi6kOpm/+4RuhAAwvfcD63+iLqQ6mb/7hD3A+t/oi6kOpm/+4RuhAAwoLn0XavLKt+Xuu79MWebXtiAZKyU5cM9im9YqGiI9ClKrPZKSewyLRm1SpWlVF3CqaZKVpUxqDzMNrLbY803r79G++/4dAYpoAN3/AEr+TDpx8w2IPs9t0YQA3f8ASv5MOnHzDYg+z23QHfIytt5o0laosp7XbO95Y1075pv60pC1sYosbms/Gt3XFBPFWlotEXSbaViol0yXO3WLVJYqaxqpqUqU9KGpwDVJABhe+4H1v9EXUh1M3/3COoMoYIzXhJWKQzFibIuLVp1NwrCpX/Z0/aSksk0MQjpSOJOMGRnhG51CFWMhRSiZjloetK1oN6EZ7G+/ftxoS+amV/reBAULgAAAfQiYmUnpSOhISOey8zLvW0bFRUa2WeyEjIPViN2jJk0bkUXcunK6hEUEESHVVVOUhCmMalB88ettA3lv6RPSQwz9oECAe4H1v9EXUh1M3/3CHuB9b/RF1IdTN/8AcI3QgAYXvuB9b/RF1IdTN/8AcIe4H1v9EXUh1M3/ANwjdCABhe+4H1v9EXUh1M3/ANwh7gfW/wBEXUh1M3/3CN0IAGF77gfW/wBEXUh1M3/3CHuB9b/RF1IdTN/9wjdCABhI3vpD1U40tqQvLImnLNtj2lE0SNKXNdmMrwgIKOKuqVFGr2Vk4hsybUVWORJOqyxKHUMUheExqUr51GwTvNPMyatP8BZXbKHGPsA7TwY7asM2YefvnCLNkyynj528duVSIt2rVtdsQs4cOFlKlTSRQSIdVVU5ikTTKY5q0LStRtuw2vbRESHiSH1c6cCnJGsSnKbMtgUMUxWqVDFNSs9w0rStK0rSvjpWnAMM8AG6F7vjRB0utN/XNYHfwyE9uHd1rX5ta9ed4WTcUJdtp3DnufkYK5Lck2czBzDBSOiSpvIyUj1l2T1scxDlKu3WUTqYpqUNw0qIqQABpnblb5A2oz0kP+yogZmI0ztyt8gbUZ6SH/ZUQAuVCmvvqPkCadfSQL2LlxcoFNffUfIE06+kgXsXLgMy8chtO0bpvy5IezrJt2bu27LheEj4K27cjHkzOTD9QpjJs4yLYIrvHro5SHMVBuiooahTVoWtKVHHhLvsEOeO2enpD279WTADx97gfW/0RdSHUzf/AHCPow+gnW6SXizn0jajykJIsTHMbDV/0KUpXKVTGNWsDwUpSlK1rWvipSnCNzEAHVeC2jqPwlhxg+brs3rLFePWjxo5SOi5aum1pRCLhu4RUoVRJdBYh0lUjlKdNQpiGpQ1K0HagAA863vq80rY0uWQs3Imo3CVjXbE1SLKWzdmTbPgJ2PMsmVZGj2Kk5ds9bVVSORVOiyJKnTMU5eEtaVHE/d8aIOl1pv65rA7+GVdvNfPN6s/8bZPY2HEBwDdC93xog6XWm/rmsDv4Pd8aIOl1pv65rA7+GF6ADdC93xog6XWm/rmsDv4Pd8aIOl1pv65rA7+GF6ADZ92hOr7Spk/Q5qvx5jjUfhG+79vTBORbctCzLRydZ9wXPc9wStuvWsZCQMHFy7qRlZWQcqEbs2DJus5crHKmkmc5qUrkce4H1v9EXUh1M3/ANwjnWy85xXRV6SGK+1LAbhADC99wPrf6IupDqZv/uEa+ujHWZpIsLSNplsi99TOCbRvG0cE4sty6bWuTKdlw1wW7cENZkOwloSbiJCZbvoyVjHyC7N+weIIuWrlFRFZMihDFpKaML/X35cOrv0kMy9v54BtFe740QdLrTf1zWB38Hu+NEHS6039c1gd/DC9ABuhe740QdLrTf1zWB38KQ++XagsF5tsrROhh3MOM8pLQV05PWmkrAvW3rtViUnUTCEbKSJIOQemZpuDpnKgZeidFDEPQla1LXgoagACxTurvPN6e/mplXsa9FdYWKd1d55vT381Mq9jXoDXPHSWphg9lNOGoCMjWjl/IyOEsrMI9izRUcO3r15Yk83atGrdIp1V3LldRNFBFMplFVTlIQtTGpSvdoAML33A+t/oi6kOpm/+4Q9wPrf6IupDqZv/ALhG6EACNTY5WvcllbLnQzad4QMva9zwGnyyo6ct6fjnUTMxEgggvRZlJRr5JB2ydJVrSiiDhJNUla0oYtBJWAAMvffM+cvxl6N9qfX86Kh4t4b5nzl+MvRvtT6/nRUPAAAAEzG71883oD88ynY66BswDGf3evnm9AfnmU7HXQNmABxO/UVXFjXm3QTOsuvadxIoopFMdRVVWHeETTTIWlTHOocxSkKWlTGNWlKUrWoxIsoaDtbDvJeQ3TXSVqMcNnN83a4buEcOX8oiugtPyCiSyShIKpFE1UzFOQ5a1KYpqGLWtK0qNwkAGF77gfW/0RdSHUzf/cI84XlZV4Y6uWUs2/rXn7Lu2DWK2mbZuiJfQc7FODpEWKjIRUkg3etFTIqJqlIuiQ1UzlPSnFNStd9EY328Zc83rj848T2NtwBCQNILciPJQ1t+kNYn2bFGb6NILciPJQ1t+kNYn2bFAXdgAAAAAAAAAAAAAAAAAAAAAAAAAAFIrfd/JO0SekPfX2bKC7qKRW+7+Sdok9Ie+vs2UAZvgm13c/nm9DXnJlextxiEoTa7ufzzehrzkyvY24wGyGADhGTHTljjjID1muo2ds7Iut01conqms3ct4F+qgukctaGIokqQqhD0rSpTFpWleGgDm4DEkvzafbRBpfF5tW2tDUag2bXXcTdugllK6CJooIy7xNJJMlH/AUiaZSkIWniKWlKU8VBxT30XaL9NXUh1qXR9/AbgwDD599F2i/TV1Idal0ffw99F2i/TV1Idal0ffwG4MAw+ffRdov01dSHWpdH38PfRdov01dSHWpdH38BuDAM47dLtZ2rDUFtDchWdnDUPlvK1qs8AXPLtbfvq9Zq4olvKITUKki/SZSDlZEjpJNVQhFqFocpTmpStKVqNHEBFztseab19+jfff8ADoDFNG1ltseab19+jfff8OgMU0AG7/pX8mHTj5hsQfZ7bowgBu/6V/Jh04+YbEH2e26A75AAABnsb79+3GhL5qZX+t4EaE46BzVpV03aj14NznrCGNMvOLZSdIW8tf8AacVcqkMi+Omo8SjjSTderUjk6SZ1ipVLRQxC1Nw1LQBhCgNwb3rrZ0dCrTf1V2v9wD3rrZ0dCrTf1V2v9wAYfI9baBvLf0iekhhn7QIEbKHvXWzo6FWm/qrtf7gPrQWzX0A2vNRNyW7o80+Qs9AyLOXhpeOxnbTWQi5SPcJumL9k5SYlUbumjlJNdBZM1DpqkKctaVpSoD24AAAAMc7aP7R/XtZevbV5aVp6vM/27bNu5/yVEQUFEZKuRlFxMWyuR6i0YMGiL0qLZq2RKVNFFMpSJkLQpaUpQeKvfRdov01dSHWpdH38BuDAMPn30XaL9NXUh1qXR9/D30XaL9NXUh1qXR9/AbgwDD599F2i/TV1Idal0ffw99F2i/TV1Idal0ffwGovvNPMyatP8BZXbKHGPsLNewo1T6j9Yu06066fNVObslagcH3y8uhK8cU5XuuVvOxbmTjrZkpBgSat2YcOY9+Vo+boO29F0T0TXSIoXgMWlRpN+9dbOjoVab+qu1/uADD5AbW2b9mRs9YvC2XpOO0Z6dWUhHYvv9+wetsX2wk4aPWdqSzhq6bqlY0Mms3XTIqkoWtDEUIU1K0rSgxW5khE5eVTTLQiack+IQhacBSkI6VKUpaU8VKFLSlKU/spTgAfNABrd7ErZ7aHMn7KDQpkDImlHBN6XvdWCYKVuS6rjx3b0pOTkkrJSxFH0nIOmajh26ORNMpllTmOahC0rXxAMkQaZ25W+QNqM9JD/sqIFjj3rrZ0dCrTf1V2v9wHpLDWn7CGniBkbXwXiqxsTW7LSP5Xk4Ww7ej7cjX8p4Ejf2e6axyKKSzrwCZEfDHLU/gylLw8FKUAdwCmvvqPkCadfSQL2LlxcoFNffUfIE06+kgXsXLgMy8S77BDnjtnp6Q9u/VkwIiByyxL8vPGF32/kDHdzzdl3takgnLW3dVuP3EXOQckkU5En0ZINTpuGjpMihylWSOU9KHNSlfHUBvmAMPn30XaL9NXUh1qXR9/H0YjahbRRSWi01Namo85FJFkQ5DZTuipTEM5SKYpqez/AB0NStaVp/bSoDb1AdXYPfvZXCuIJOSdLvZGRxdj9+/euVDKuXb15acS4dOnCp61Mou4XUUVVUNWpjqHMata1rUdogMfjea+eb1Z/wCNsnsbDiA4T47zXzzerP8Axtk9jYcQHAAAAAAAA94bLznFdFXpIYr7UsBuEDD32XnOK6KvSQxX2pYDcIABhf6+/Lh1d+khmXt/PDdAHiOe2a+gG6JuWuS4tHunyan56ReS81MSWM7adSEpKSDhR0+fvXKrEyjh07cqqLrrKGqdRU5jmrWta1AYcYDcG9662dHQq039Vdr/AHAPeutnR0KtN/VXa/3ABh8gNwb3rrZ0dCrTf1V2v9wFKPfFNKum3ThZmi5zgXCGNMROLmufJiFwrWBacVbSkyixioVRmnImjW6FXRGx1VDIlVqahDHNUvBWtQFFUWKd1d55vT381Mq9jXorrDsHF+WMl4UvGPyFiO+rnxxfEUk6Qjbrs+Xdwc6xReombvE20iyUScIkcoGMksUh6UUTrUpuGleABvbgMPn30XaL9NXUh1qXR9/D30XaL9NXUh1qXR9/AbgwDD599F2i/TV1Idal0ffw99F2i/TV1Idal0ffwG4MAw+ffRdov01dSHWpdH38PfRdov01dSHWpdH38BP9vmfOX4y9G+1Pr+dFQ8ds5hzxmfUHcja8M4ZPvXK10s45KIa3BfU+/uKVbxaCiiqLBJ5ILLLEapKKqHIiU1CFMc1aU4a1HUwAAt9bnzp1wTqM1X6r7fzxiSwsuQlv4BtyXhIq/rcjrkYxUovkBizWfsW8iism3dKNTmbnWTLQ5kjVJWvFrWg0DPeutnR0KtN/VXa/3ABlI7vXzzegPzzKdjroGzAPHtgbPrRBiq8YHIWNtKmDLHvi13n5Rty67Zx5b8TOwj6qKreruNkWjNNw0X8Ausl4RI5TeDUOXh4DVoPYQAA4rfbhdpZF5Omyp0HLa1bhcN10jVIoiujEPFElUz04KlOmoUpyGpXhKalK08dBitZN2ne0OY5JyCyZ6z9RjZozvi7GrVsjlG500W7ZvPP0UEEkyvqFIkkkQqaZC0pQpS0pSnBQBtnjG+3jLnm9cfnHiextuDx176LtF+mrqQ61Lo+/jyDkPI1+ZavGbyFk27p++74uRwR3P3XdEk5l52YdJoptyOJCRdnUcOVSoIpJUOqcxqJplLw8FKAOFjSC3IjyUNbfpDWJ9mxRm+jSC3IjyUNbfpDWJ9mxQF3YAAAAAAAAAAAAAAAAAAAAAAAAAABSK33fyTtEnpD319mygu6ikVvu/knaJPSHvr7NlAGb4Jtd3P55vQ15yZXsbcYhKE2u7n883oa85Mr2NuMBshjgOVvguyT8wbx7OyI58OA5W+C7JPzBvHs7IgMHbInwgX188bn+u3w4cOY5E+EC+vnjc/12+HDgAAAAAAAW7tzN5zHJfo33Z9fQQ1Chl67mbzmOS/Rvuz6+ghqFAIudtjzTevv0b77/AIdAYpo2sttjzTevv0b77/h0BimgA3f9K/kw6cfMNiD7PbdGEAN3/Sv5MOnHzDYg+z23QHfIAKC23I3jLaL7P/aK5Y0x4Ae4XRxlZsDYsjDJ3fjIlxztHNw263k5CrmVrNs6rkq5VN4Evscngk+AnCbg4ahfpAZUHLBNr/8A3lpw6lk/xKHLBNr/AP3lpw6lk/xKA1XwGVBywTa//wB5acOpZP8AEomp2A+8LbQnaN7RK1NMuox7hxfGcxi7KN2vE7LxsS2J2svaMKg/iKpStJp9Ujei6hvZKPgK+GJwF4xeDhAXtgAAAAABh87UXnF9a3pIZU7Uvx4NGtdmrdVtldnvLeRs1X7H5+PemUbvnL3ug8Rl08dFmm7geqv5CrBjS3lqNGtXCx/AoeFU8GTgLxzcHCOsOR97ID+7dR/XSp+GgGVAA1X+R97ID+7dR/XSp+Gg5H3sgP7t1H9dKn4aAZUADVf5H3sgP7t1H9dKn4aDkfeyA/u3Uf10qfhoBSP3Zbnm9Jf+PvXsbMDYJFLrWvscdHWws04X/tN9C7bJTTU1p2SjXeO18r3sbIFikWuiRb2zKflm1TRkQWTLWMknNG5av0PBL8RX9Li8WteXlgm1/wD7y04dSyf4lAagmfvgIzX5pMkdjpkYO05/XUx/mkh/FrC1Lae9f7V3MF021iW75HT6a0so3BDY6ugsbh8jKRNbt7SLa2psrB5S4lKtHtY2Tc0auaJqVQX8GrxDcTi1tPtd0K2REq2byjqN1GVdSSCL9zVPM6hE6uHiZXC3EJ+bdeKTwihuKXhrxS8FOGvAAypxtAbA/mcNnp6PNvfWkyI3uR97ID+7dR/XSp+GhYe0u6cccaQ9PuKNNGIiTSeNMNWm0syzU7jk6zU4WGZruHCNJOVqg2q+c+Ecq8ZeqCXGpxacWnB4w77ABTC3j3bpa59l7qoxDiHTA7xS3tC9cPfnvNFvywC3ZJVm/wA5H8XwtXppZh4Br7FbJ/8Ap/BH/WcY/H8fBQLnopr76j5AmnX0kC9i5cVyOWCbX/8AvLTh1LJ/iUR8bRXbpa59qDi20sQan3eKXFoWXd9L3hS2Hj8tpyVJukcvF8Lp6WWf1Xa+xXKlPY/gifrOKfj+LgqENoAPfuyx04451d7QzSXpoy6SaUxpmXLcRZl5J25J1hZw0M9ZSC61IyVog5qxdeEbJcVeiCvFpxqcSvCA8BD6cL/XMT/mbD+KSGqZyPvZAf3bqP66VPw0P4Od0J2Q8W2cSbWN1GUcxyCr5vVTM6hyUXaJmcI8cn5t04xPCJl4xeGnGpw04acICyJp/wDgHwn5o8b9jYUduDLAuzev9q5h66rmxJZ8jp9LaWLbgmcc2sWSw+R7IltyyJFzbMIV+8rcSdXb2kZGNaOnNU06rr+EV4hOPxacf5YJtf8A+8tOHUsn+JQHlfea+eb1Z/42yexsOIDhpZaJ9jno726unCwdpvrobZJd6mtQ6Um6yGvii9jY/sU6trSLi2Yv8jWqWMlyxpaRka2o4pR+t4Zfjq/o8bi09W8j72QH926j+ulT8NAMqABqv8j72QH926j+ulT8NByPvZAf3bqP66VPw0AyoAF6DeCN312fuzb2fj3UlpuZ5hQyQ3zBjeyUz3tkc10Qn5Euk8yWUoaLNDMaVdVoxQ9jr+Hp4L9P9A3G8VF8B7w2XnOK6KvSQxX2pYDcIGCrhbLd24Fy1jrNNhGjiXpi674O97XNLs/yjFlm7ffJSEfV+x8Kj7La0cIk8M38Kn4QnCXjl4eEWS+WCbX/APvLTh1LJ/iUBqvgMqDlgm1//vLTh1LJ/iUOWCbX/wDvLTh1LJ/iUBqvgMqDlgm1/wD7y04dSyf4lF7bYDa787bRzZ22rqa1GLWmvkyXyllG0XillW9S2IOsRaUy3YxFE4qjt9QjmiCpvZC3h6+GPwG4peDgATUihhvv37C6Evnblbx//wCHgv8A/X//AEXzxGDtI9kdpI2qUZjKJ1UNsiOGmJX85I2lSwLyNaKhXNwt2raQrInLGyHswlUmaPgS8CXgjcavCbjeIMUUBqv8j72QH926j+ulT8NByPvZAf3bqP66VPw0AyoAGq/yPvZAf3bqP66VPw0Ors4bpRsl7Awrl++4CO1DlnbKxdkC7YWrzMajlpSXtu05aZjaum/5uE8O3o8ZI1XR45PCpcYnGLxuGgZeIAAAAAAAAALsO5IeWNrH9HC1/tJjxpLjNo3JDyxtY/o4Wv8AaTHjSXAAEdm1n1NZN0bbOrVVqbw2pBJZNxBjolz2gpcsVScgiydbhhI2tZKKqu1o9Q9jP3FPBVXS/TqQ/G/R4K52fLBNr/8A3lpw6lk/xKA1L8h/sBfPzPub6lejB2yx8KWSvn/eXaKSFmuI3uDa23lLRdnzMjp3rD3XIsrblaNsNpoOaxs65Si31G6/5xn8CvVq6VokrxTeDU4p+LXg4K2n4DdKtkxkKChb+uGO1DGn74iY68JwzPMZ2zQ0xcrNGak6tW1LcP7HbVevV6oIcc/gkuKnxjcXhqGVsA1X+R97ID+7dR/XSp+Gg5H3sgP7t1H9dKn4aAZUA0gtyI8lDW36Q1ifZsUe3eR97ID+7dR/XSp+GhLxs3tlfpZ2V9jZIx7pZb383t7Kd2Rl53SW/ruNdzw0zEQ9IRpVg5NHx/sRtRjSlFEOIpx1f1nGp/QAkhAAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIY4Dlb4Lsk/MG8ezsiOfDgOVvguyT8wbx7OyIDB2yJ8IF9fPG5/rt8OHDmORPhAvr543P9dvhw4AAAAAAAFu7czecxyX6N92fX0ENQoZeu5m85jkv0b7s+voIahQCLnbY803r79G++/4dAYpo2sttjzTevv0b77/h0BimgA3f9K/kw6cfMNiD7PbdGEAN3/Sv5MOnHzDYg+z23QHfIyMt6k55vUH80sU9jWY1zRkZb1JzzeoP5pYp7GswFdQAE72xt2FuRdsPDZrmbFz3ZWF08LydsRj9C7bSnblPOHuZo+dIqszw79kVqVqVkYihVqHqpVSlS1pSlaVCCEWdt0T55awPMPnjsw0EkHIgtQvTtwz1VXv36Of402VN57rhdKO1kzFlu2NVtlWQzeYWcYhxpb0rYN0v5DNKdLdj5xG4rpdysSkzg1WtXLxqdoZd0mehEDkNStQGhGAo08t909dBLM3WrZHcQ7Swfvl2Bs25lxXh2P0T5dgn+Usg2jYDOae5Os120iXN2zrGDRkXTVCFTWcIM1HpV1UUjkUVInUhDFMalaBdEAAAAFNbUlvimCtOOfswYFldF2WrmksQ5BuawH1wR+S7OZMZl1bUkvGrSLRm5hlHDZB0dCqqaKyh1CFNQpjVrThr0ly33T10EszdatkdxALywCNTZR7SO09qlpTb6qLNxlcOJYZxkG8LApadzzkbcEmVzaJo4q8jWQimzRrVB5+UC+CRol4RPwZuOY3GpwSVgACGLbJbZKw9jxYeFL6vrCl3ZobZou657SYMLSueGtpeDXtqGZTCrx4rMMnqbpJ0m9KimmiUh0zkqY1alrSlIBuW+6euglmbrVsjuIBNPvNPMyatP8BZXbKHGPsLqW1U3qXDW0O0O5j0l2vpMybjebye3gkGd4T+QbVmoqKrETjKWUM5jo6JbO3FFiNDIkoksTinPQ1eGlK0FK0B23gH4d8KedvG/bGGG8TB/wBSw/8Alcf/AAiIwdsA/DvhTzt437Yww3iYP+pYf/K4/wDhEQH1AAVEtb+9s4S0Tas88aUbg0fZTvmawVfr+xJG7obI1pRUXPuWDZo4NIMo57ELu2iClHZSlRXWUUpUla1NwVoAt2jMx31Ly+dOfo3/APesuJOOW+6euglmbrVsjuIdCZV0jze90TLHW1hC8YrR1b2BWPtAyVi5VjXeR5m4JPwpru/OFjK2itDsWbHwEoRn7DcIKOPCpGV8JxDULQKDAC8tyILUL07cM9VV79+hyILUL07cM9VV79+gKNIl32CHPHbPT0h7d+rJgWH+RBahenbhnqqvfv0cls3dysqbE66ITau5B1LY+znZehV8TO1x4js2ybjta6L+jYEpo9WAhLhm5J9ExL5weVIoR2/aOECFRMUydampwBoej5k1/U0t/lj/APhVRR85b7p66CWZutWyO4h/yffbdPkuU0STQvmRE8oWscRY+VLJMVI72lWxVDFpB0qYqdVaGrSlaVrSlaU4KgM/vUB8PGbPO5kjtlNDqMXn3u5pZ5zg8d5pjta+IoGPy+5Xyixg3uMbydvIZnf6p7sbRTt0hNJoOXMchLEZruESESWVROomQpDUpT83IgtQvTtwz1VXv36As47spzMmkz/BXt2ymBPiKG9g7crHe7w2tG7JfKOBr01IXtpios0mMwWDdkHZdrXSa71TXYgeNty4mElLMKM0JUjNajp4rVVVEyhOKQ1KU5ly33T10EszdatkdxALywCjTy33T10EszdatkdxBy33T10EszdatkdxAPf++B8z9KekfhT/AJblGU8Leu2o3lvEu1S0WO9K9maX8i4lmXOT7Fv+l23PfVtXBGFbWgaUMvHVj4qMaOqrvPygXwS3hvBpeCNxym41OCoUAAAAAALoeDtzSzzm7DWK8xx2tfEUEwylj60b/Zwr3GN5O3kS1uyDZTaMc5coTSaLhdmm9KgqskQiah06nIUpa0pQKXg1gd0S5mmwfPznjtKzECnIgtQvTtwz1VXv36PRuNNqrZm64Wujsm8xYlufVdetkPXmanGXsaXDFWBaz+PzSctwx8Gjbt0tJWWSeQaTWrZ46O7Mg6UPQ6BCFpWgC+qAo08t909dBLM3WrZHcQm32Nu3TxztiJrNcLYuA71wupheLtiUkF7tu2CuYk2S5nb5okkzLDsGRmpmpmRjqGXqeilFKULSlaV4QnfAB4G2l+vK29mxpGvzVpdmP5zJ0JYsnbMY5s+3ZdhByr89yy6MSiqhIyTd00SK1OtRZQqiJqqFLUpa0rXhAe+R0Pqn8mLUb5h8vfZ9cIpw8t909dBLM3WrZHcQ69y3vpOAck4pybjppogzBGOr+x7ellNpJxlCy128e4um25KCRfLoJwhVFkWij8rhVJMxTqETMQhqGrStAz3wAAAAAAAAAXYdyQ8sbWP6OFr/AGkx40lxjxbBza92Psfs25tyvfOG7rzMyyvjCJsBlEWnckRbTqIdRt0NrgNIunEwzeIuEFUkKtiopEIoVQ1D1NUtK0FoflvunroJZm61bI7iAT/bwpzMmvzzMp9sbXGM+NDm9d4Yxft0rWmdkvjnTjfuBL21utfamt7L963nb122tYj0iqd11mJm3YKOYS0q1qjbirP2MxeIK0VcpqcfiJmLXy5yILUL07cM9VV79+gKTOPP2/sb54Wz9dMhvE4n+C3GvzAs3s7GjPhQ3KzP9irI3u51xYeft7NVTupwwQxdeqSz1G3j0l1WiKqk2YiSrlNmZFNQ5akIc9DGpWlK0HsFtvo2AsZN0Mbu9EOYJR3j5FKyHUm2yhZaDeRcWoQsCu/QQVhDKIou1GBnCSShjHTIoUhzVNStQF5wBRp5b7p66CWZutWyO4hbQ0BawILXtpGwzq0tqzJbH0JmO33U+ws+ck2cxKwqTWXkImrd3IsEG7Ryoc7Ay1DookLQqhS1pWpa1qHsYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNru5/PN6GvOTK9jbjAbIY4Dlb4Lsk/MG8ezsiOfDiGQYx7NWFe8NHJeyJCWtC5YxghQxS1Wev4Z61apcY1aFL4RdUhOMatC043DWtKAMGfInwgX188bn+u3w4cLCl6btLtkZW8bsk2Ok9+sykblnX7Nal52cWirV5KOnDdTiml6GL4RJQhuA1KVpw8FaUqONcmW2zfRLf+utm98AIEAE9/Jlts30S3/rrZvfAcmW2zfRLf+utm98AIEAE9/Jlts30S3/rrZvfAcmW2zfRLf+utm98APf8AuZvOY5L9G+7Pr6CGoUKF27KbHnaCaCNc98Zc1S4NdY3sKXwlcNpsJta4bflSrzr2XiXLZlRvFv3TgtVEWyx/CGTonTicFTUrWgvogIudtjzTevv0b77/AIdAYpo2sttjzTevv0b77/h0BimgA3f9K/kw6cfMNiD7PbdGEAN3/Sv5MOnHzDYg+z23QHfIyMt6k55vUH80sU9jWY1zRnNbwBsPtpXrN2m+Y8+ad9Pju/MWXPbuPmMLciVzW1GkeOYW2WzCRTo0kZJu6J7HdJnSrU6RaGrThLWtPGAo2DQn3IH9h9dvzrxR9UTwrj8mW2zfRLf+utm98C5LurWzX1i7PG1NWkdq0xQvjB3ki4cevbPSXmYeX/KraFjZdCRULWJeO6I+x1XKJa0WqSpuPwl4aUqAtyCsTvdnM03/AOfjA/ad2LOwgi3jbSBn/XFsy7wwJposdXIWUpPLeJLkZW2jIMIw60Pbc64eTDujuSXbNS0aNzlUqQytDn4eAlDV8QDHkHrbQN5b+kT0kMM/aBAiTnky22b6Jb/11s3vgdvaf9gJtUtNOc8P6h8yaa3lp4lwdkqy8r5LuhS67Wekt6xbBuFhc90zR2bOUWduixsLGvHdW7ZJVdaiXg0kznMUtQ1qwECHKadjJ0tGHqVeXc4cpp2MnS0YepV5dzgMujai84vrW9JDKnal+PBos16p9hRtOtYuo/N2qnT5p1eXzg/UDkq68r4pvFK6LZjk7msW85VxMW7NEYSEk3fNCv49yivRu7QSXTofiqJlNStB0HyZbbN9Et/662b3wAu4bn3zQEb6R+af+S2haZEA+7baNtQ2hXZuscF6nLEVx3k1HNmULrUt1aRj5Q5YK4DwdYp77KjHDltWjmjRfgT8LxycT9MtOGgn4AUad9+8nrQl55sq9iIIZzo0Yt9+8nrQl55sq9iIIZzoAA74006acyau8yWngPAdpqXvlO91HqVt22k9Zx55A8ezWfu6Udv1kGqXgmqCqv6xUvG4vBThrWlBLvyZbbN9Et/662b3wAhrwD8O+FPO3jftjDDeJg/6lh/8rj/4REZJ+H92x2xNs5axdckzpTfNIe38i2TOSzqt52eejaNibljH75xUhJepz0Rat1VKlLSpjcXgLSta0oNbWKRUbxca3WLxVUGDNFUvDSvFUSbpkOXhp4q8Bi1pw08XiAfvGL9t7+eO2hfpD3F9WQ42gRmJbXfYD7VDUttLtZWeMN6bHl2YvyjmaaumybjTuu1mRJiEdMY1FB4Vq8lEXSFDqIKl8GukQ9OLw1LwVoAp6DTO3K3yBtRnpIf9lRAqQcmW2zfRLf8ArrZvfAvSbr5oK1R7P7SFmrGmqvG62NLyurNv52QcStKxcsZ5BfmvHR/s2i0U6dIp09loKpeDOcqn6PDxeCtKgLMoAAAIiNvfzOO0L9Hi4vrOHEu4iI29/M47Qv0eLi+s4cBi/D6cL/XMT/mbD+KSHzB+6LWTbycc4VNxUkHzRZQ39PFTScJnObgp468BS1r/AP2Abx2n/wCAfCfmjxv2NhR24K5WHt5N2O1sYkxbbc1qsYtJi3sc2RByzStm3geraTibZjGD9vU5IipD1RdN1U6mJWpTcXhLWtK0qOxuU07GTpaMPUq8u5wGfPvNfPN6s/8AG2T2NhxAcLd+0/2YetPa761Mua+dAuInGbdLObF4NxjfJLabhbfRuBK3oVnAyxyRU88YSjb2LKMXTatHLVOp6p8cnCStK1j/AOTLbZvolv8A11s3vgBAgAnv5Mttm+iW/wDXWze+A5Mttm+iW/8AXWze+AECACe/ky22b6Jb/wBdbN74Dky22b6Jb/11s3vgBAgAm1ydu721rw7jy9MqZB0wPYKx8f25K3Zdcya7rTcFjIKFaqPZF6ZBvKqLrUbt0jqVTSIdQ3BwFLWtaUEJQAN0DQJ5D2kT0b8NdgIEYX43QNAnkPaRPRvw12AgQHrgZPu92c8tf/mHwP2YdjWCGenvG2xU2jmuLaaXhnvTRgJ1kLFsniTEltsrkRuW3Iwi0xbcE5ZzDT2JJSLZ0WrRwcpKnMlQh+HhIatAFDMXz9yB/bvXb80sU/XE8IH+TLbZvolv/XWze+Bbj3VrZe61tnjdmrSS1aYhcYwaZIt3HzGz1V5yFl6SrmFkpdeRTKWJeuzI1bpOUTVqtQlDcelC1rWlQFyYV1t6i5mTUJ868VdsmQsUiFzb/wCljN+szZkZkwHp3s5S/Mp3RcOPnsJbST5jHHeNoW5mr+RUo7kV27VP2O1TOrWh1S1NSnAWla8FAGNUAnv5Mttm+iW/9dbN74Hwro3brbB2bbNxXfcWlV8wt+1IKXuScfVvK0FKM4eCj3EpJu6ppy5lFKN2TVdapCFMc1CcUtKmrSgCC0AAAAAAAEnOjjY87QTXxjWTy5pawa5yTYURcbq05CbRuG34oqE6yQQcuWVW8o/armqmi5RP4QqdU68fgoataVHrbky22b6Jb/11s3vgBAgAkd1q7JvXbs9bPs+/NWOF3OMbXvy43Vp2vJLz0FL0kp1nGqSzhlRKJfOlUqpsEjreEVIVOvBxaG41aUEcQCZjd6+eb0B+eZTsddA2YBiebGzPmLdL2030gZ8zXchLQxZjPJp5+87kUaOnxImKrbU8wo5M0ZJLOlqeynjdPiIpHN+s4eDgpWtNNTlNOxk6WjD1KvLucBN/kP8AYC+fmfc31K9GDtlj4UslfP8AvLtFJDWxuLeTNjvdFvztswmqxi8mbihpSCiGlLNvAlXUnLsl49g2oc8QUhKru3CSVDHNQpeNwmrSlK1FB67d282wV63Vc15W5pWfP7eu24Jq5oF/S8bQSo9hp6ScysW7ompLlUTo5Yu0FqEUKU5KH4py0NStAFfAbIO7m8zJoc83Et2yuMZ1vJlts30S3/rrZvfA0vdirp6yzpV2ZGlPAecbYPZuU8dWTIRN3W2o8aPzxb5e5pt+kiZ2xVXarVM1doK8ZFU5aUPxa1oalaUCUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUit938k7RJ6Q99fZsoLuopFb7v5J2iT0h76+zZQBm+CbXdz+eb0NecmV7G3GIShNDu9E3C25tidEszcMvFwUOxyNKKvZaZftIuNZp1s+4iUUdPnyqDVuSpzFJQ6ypC1MYpaV4a0oA2VwHUnt/YI+WvEnWRZ3fIe39gj5a8SdZFnd8gO2wHUnt/YI+WvEnWRZ3fIe39gj5a8SdZFnd8gO2wHUnt/YI+WvEnWRZ3fIe39gj5a8SdZFnd8gO2wHUnt/YI+WvEnWRZ3fIe39gj5a8SdZFnd8gO2wHUnt/YI+WvEnWRZ3fIe39gj5a8SdZFnd8gPCm2x5pvX36N99/wAOgMU0bM22ezVhub2VevCJhstYzl5WQ063w2YRkZflrP5B64Ubo8Ru0ZNJVVy5WPwV4iSKZ1Df2FqMZkAG7/pX8mHTj5hsQfZ7bowgBu/6V/Jh04+YbEH2e26A75AAAAAcQujIVg2QdoS9L4tC0DvyqHYkui5YWAO9IjWlFTNCyz1pVwVKpi0UMjQ9CVNShq0rWgDl4DqT2/sEfLXiTrIs7vkPb+wR8teJOsizu+QHbY8k6+fIg1d+jfmb7P54dt+39gj5a8SdZFnd8jyzrizRh2f0aaqoOCyxjSampfT5l2NiYiJvu1pGUlJF7Ys23ZsI6PZyqzt69drqEQbNWyKq66xyJpJnOahahiEAO2/aBzv8imW+re8e5g9oHO/yKZb6t7x7mAbVey65ujRT6N+K+yzAe8h4Y2ZDB9F7PTRnHSbJ3HSDLTri9s8Yvm6zR40cJWwxIq3ctXBE10FkzUqVRJUhFCGpUpi0rTgHucAAAAUad9+8nrQl55sq9iIIZzo0Yt9+8nrQl55sq9iIIZzoCe/dlueb0l/4+9exswNgkY8G7Yz8FbO2J0pzNyTUTb8O0fXnV3LTkiziY1rQ9ny5CVcPn6zdqjQ560IWqipeMatC04a1pQa4nt/YI+WvEnWRZ3fIDtsB1J7f2CPlrxJ1kWd3yHt/YI+WvEnWRZ3fIDtsB1J7f2CPlrxJ1kWd3yHt/YI+WvEnWRZ3fIDtsB1J7f2CPlrxJ1kWd3yHt/YI+WvEnWRZ3fIDtsB1J7f2CPlrxJ1kWd3yHt/YI+WvEnWRZ3fIDtsREbe/mcdoX6PFxfWcOJHPb+wR8teJOsizu+RFVtw8oY0v3ZKa87OsXIli3pd1w4En46AtW07tgLjuSckFJGJMmxh4OHkHknJvFCkOYjZk1XXMUhqlJWha1oGNuA7b9oHO/wAimW+re8e5h/lcBZ2LSpjYVy1QtKVrWtccXjSlKUpw1rWtYbgpSlPHWtfFSgDqUB/RZFVuqq3cJKILoKHRWRWIZJVFVI1SKJKpnoU6aiZymIchy0MQ1KlNSlaVoP5gNgfdlOZk0mf4K9u2UwJ8RXJ3a/L+JbZ2O2lSGuTKOOremGjK86Oomcva2omSbVPeEuclHDF/Jt3SNTkrQ5fCJF4xa0NThpWlRO37f2CPlrxJ1kWd3yA7bAcWte+bJvdF24su8LWu9uwVTRfL2vcETPos1lS1Okk7ViXbsjdVUhTHTTWMQxylqYtK0pWo5SAAAAPB+1D5urWr6N+VOyz8Ye43CNqHzdWtX0b8qdln4w9wAboGgTyHtIno34a7AQIwvxugaBPIe0iejfhrsBAgPXAAAAAAAAA+NPXFb9qxq01c87DW5DtzJkcS09JsoeNQOqahEirP5Bdu1SMqetCJlOqWpzVoUtK1rwAPsjofVP5MWo3zD5e+z64R932/sEfLXiTrIs7vkdGan874PdaadQ7VrmXFLly5wZlpu3bt8h2isuuutYNwJoooopzBlFVVVDFImmQpjnOYpSlqatKAMNUAAAAdmRmFcyTce0lobEuTJeKkESOWEnGWHdL+Pet1P/Y4aPWkUq2con4K8RVFQ6Zv7DVH7/aBzv8AIplvq3vHuYBpW7mZzaGTfSQuv6gghbwFTDc8bRuyzNm9kqMvC2LhtSSV1FXS5Tj7khZKCfKNzwUGUjgjSUbNVzomMUxSqlTqmapa0oataVFs8BSe32/yOdHHpH3R9m0gM2gaS++3+Rzo49I+6Ps2kBm0AAAADmGPP2/sb54Wz9dMhvE4n+C3GvzAs3s7GjB0x+cid+WSoocqaad3W2c5zmoUhCFmWRjHOY1aFKUpaVqY1a0pSlK1rWlKDczxXnrBiOMMcJK5oxOkqlYdoJqJqZFs8iiahLejinIchpihiHIalSmKalDFNStK0pWlQHpcB1J7f2CPlrxJ1kWd3yHt/YI+WvEnWRZ3fIDtsB1J7f2CPlrxJ1kWd3yOaWve9l3u3dO7Lu+17vasViN3rm15+Kn27NwoTwpEHS0U7dpt1jp/rCJKmIcxP06FqXxgOTgAAAAAAAAAAAAAAAAAAAAAAAAAAKRW+7+Sdok9Ie+vs2UF3UUit938k7RJ6Q99fZsoAzfB/RFZZuoVZBVRFUleEiqJzJqErwVpwlOSpTFrwVrThpWnirWg/mAD6n5cmv74lPpB3/OD8uTX98Sn0g7/AJw+WAD6n5cmv74lPpB3/OD8uTX98Sn0g7/nD5YAPqflya/viU+kHf8AOD8uTX98Sn0g7/nD5YAPqflya/viU+kHf84Py5Nf3xKfSDv+cPlgA+p+XJr++JT6Qd/zg/Lk1/fEp9IO/wCcPlgA+ipLyyyZ0lpSRVSULUp01Hrk6Zy1/pKchlalMWv9tK0rSo+cAAA3f9K/kw6cfMNiD7PbdGEAN3/Sv5MOnHzDYg+z23QHfIAAAM+LfdXz5nfGhSjR46a0PamVqno2cLIUPWkvA8FTeCOXjcH9nDw8H9g0HRnsb79+3GhL5qZX+t4EBRC/Lk1/fEp9IO/5wflya/viU+kHf84fLAB9T8uTX98Sn0g7/nD1loLl5ZfW3pIRWk5FZFXUbhtNVJV65UTUTPf0EU5FCHVqU5DFrWhimpUpqVrStK0qPHI9baBvLf0iekhhn7QIEBuXfkOF/ueL+j2n8kPyHC/3PF/R7T+SPqAA/wCSEImQqaZCppkpQpCELQhClp4qFKUtKFLSlPFSlKUpQf8AQAAAAAKNO+/eT1oS882VexEEM50aMW+/eT1oS882VexEEM50B/VFdZuoVZusqgqXh4qqKh0lC8PirxTkqU1OGnirwVoP3/lya/viU+kHf84fLAB9T8uTX98Sn0g7/nB+XJr++JT6Qd/zh8sAH1Py5Nf3xKfSDv8AnB+XJr++JT6Qd/zh8sAH1Py5Nf3xKfSDv+cH5cmv74lPpB3/ADh8sAH1Py5Nf3xKfSDv+cH5cmv74lPpB3/OHywAfU/Lk1/fEp9IO/5wlw2DUlIvtsNs+Wj1+9dtV9QlvJrtnTpdw3WJWNmK1IqiqodNQla0pWpTlNSvBTxCHsS77BDnjtnp6Q9u/VkwA2bfyHC/3PF/R7T+SPmTUJC0h5bgiIv+rH//APD2n/Sq/wD9EcnHzJr+ppb/ACx//CqgMHXP1KFzvmspaUKUuW8kUKWlKUpSlLxmaUpSlPFSlKeKlKeKlB1IO3NQHw8Zs87mSO2U0OowH70ZWUbplRbyT9BIvDxUkXjhJMvDXhrxSEUKWnDXx14KU8Y/r+XJr++JT6Qd/wA4fLABo07kU8ePNP2uozx05dGJmPFZSGcrqrmIWtlTla0LVU5qlpWvjrSnBStfHUXjxRn3IHyfNdvnkxV2JnReYAAAAHg/ah83VrV9G/KnZZ+MPcbhG1D5urWr6N+VOyz8Ye4AN0DQJ5D2kT0b8NdgIEYX43QNAnkPaRPRvw12AgQHrgAAAAAABXb3pxwu22NGoNZssq3VLdeK6FVQUOkoWlbyZUrSh0zFNThp4q8FfHQWJBXW3qLmZNQnzrxV2yZAMkT8uTX98Sn0g7/nD/DTUyYtSmlpMxTUqUxTP3VSmLWnBWlaVV4K0rTxVpXxVp4qj5gAAAADaf2KERErbJzQKqtFxyqp9OFjGOooybHUOardfhMY5kqmNWv/AM1rWolF/IcL/c8X9HtP5IjL2JfNM6A/RvsX+HXEpAD+Ddq1aEqm0bINU6141U26KaJKmr/SapUylLWtf/ng4R/cAAUnt9v8jnRx6R90fZtIDNoGkvvt/kc6OPSPuj7NpAZtAAAAAUrWlaVpWtK0rw0rTxVpWn9FaV/srQfTpNzNKUpSXk6UpSlKUo/d0pSlPFSlKUV4KUpT+ig+YAD6n5cmv74lPpB3/OD8uTX98Sn0g7/nD5YAPqflya/viU+kHf8AOGjvuSDx280pa2TO3Tl0YmoWxCkM5XVXMQtcblrUpaqmNUtK18daUrSla+MZug0gtyI8lDW36Q1ifZsUBd2AAAAAAAAAAAAAAAAAAAAAAAAAAAeXNUmijSlrYt617U1W4LsXOluWVMu7htSIvpi5fM4KafMaxruSYkbO2hk3LhjWrVQxjHpVKvBQtK+MeowARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkSxQEFD2tBQts29Ht4mAtyJjYKDimhakaxkPEM0Y+Mj2xDVMYrdmyboNkS1MapU0y0rWtacI+sAAAAADx3ql2fui/Wy6tN7qv06Y5zq7sVvINbRXvuOdPlIBvKqIrSKMfVs9aeDI7VQROtQ1D8YyZa04OAexAARD+8H7HD93pp59XpTvkPeD9jh+7008+r0p3yJeAARD+8H7HD93pp59XpTvkcitHYd7JSw7pty9rO0GYFt67LRm4y47anY+Bkk38POQzxKQi5NmoeWOUjpk9QRcIGMQ9CqJlrUtaU4BKsAAAAAAAAAAADytql0QaTNbMNadvar8D2HnWFsWTkJm0Y6+2Dl82gJSVapMZF7HlbO2hk13bRBFBYxjHpVNMtKUpXxjxh7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8h7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8h7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8h7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8h7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8h7wfscP3emnn1elO+RLwACIf3g/Y4fu9NPPq9Kd8jsXEmxq2XWB8k2dmHD2iXCWPsnY+mUbhsu9LehJBvNW5NN01UkJKNWVlFk03KSaypCmOkelKHN+iJMwAB/wAKpJrJKIqkodJVM6ShDf8AtOmoWpDkN/8AoYta0r/+lR/2ACJiY2EuyCn5aUnZnQBp/kZiakXstKyDiAkzOH0lJOVXj54uakwWhlnLpZVdWtC0pU5zVpSlPEPne8H7HD93pp59XpTvkS8AAiH94P2OH7vTTz6vSnfIe8H7HD93pp59XpTvkS8AA8q6WtD+kvRND3Zb+lDA9h4Khb6ko+Yu6OsRg5Ytp+UimqrKOeyBXLt3VRdo0XWQRMUxKUTUNStK18Y9VAAAAAA4nfli2hk+zLnx5f8AAR91WTekJIW5dVtyqZlY2cg5RudrIRj5Mh0znau26h0lilOStSGrShqf0iLP3g/Y4fu9NPPq9Kd8iXgAEQ/vB+xw/d6aefV6U75Eq1o2lbdhWrblkWdDs7etO0YSMty2oKOIZNhDQcMzRYRcYzTMY5iNmTNBFugUxzGKmmWlTVr4xyIAAAAAAAAB0znzTzhPVJjOZw3qExvbWWMX3A4j3U1ZN2tlXcJIuIpyV5HLOUEV26hjtHRCLo1KqXinLSteH+gdzAAiH94P2OH7vTTz6vSnfIe8H7HD93pp59XpTvkS8AAiH94P2OH7vTTz6vSnfIe8H7HD93pp59XpTvkS8AA4Hi/F+P8ACuPbQxRiq1Imxsc2FCNLcs60IJI6EPb0GxLUrSMjkVFFVE2zcpq0TKdQ5qcNeE1RzwAAAAAHmDVFot0ra1ratqz9VmDrGznbFnzS9x2xC30xcvmULOOmR41xJsiNnTQxHKrFQ7U5jHNSqRq04vD4x4m94P2OH7vTTz6vSnfIl4ABEP7wfscP3emnn1elO+Q94P2OH7vTTz6vSnfIl4ABEP7wfscP3emnn1elO+Q94P2OH7vTTz6vSnfIl4ABEP7wfscP3emnn1elO+Q94P2OH7vTTz6vSnfIl4ABEP7wfscP3emnn1elO+R7V0t6KNKWie37otTSlguxcF27esy0uG64ixWLli0nZpiy/JrOSfkcu3ZlHLdjT2KmYpiUol4qlrXxj1GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/2Q=="  # [TRUNCATED - Full base64 content here]
DONATE_QR_PATH = "donate_qr.png"

# ============================================================================
# CHEMISTRY KNOWLEDGE SOURCES
# ============================================================================

CHEMISTRY_KNOWLEDGE_SOURCES = {
    "functional_groups": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/functional_groups/functional_groups.json",
    "common_r_groups": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/common_R_groups/common_R_groups.json",
    "amino_acids": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/amino_acids/amino_acids.json",
    "common_solvents": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/common_solvents/common_solvents.json",
    "named_reactions": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/named_reactions/named_reactions.json",
    "organic_molecules": "https://raw.githubusercontent.com/Sulstice/global-chem/master/global_chem/miscellaneous/organic_molecules.json",
}

JEE_ADVANCED_LOGIC = {
    "mechanism_decision_trees": {
        "substitution": {
            "primary_substrate": "SN2 - Rate = k[Nu][RX], Inversion, 180° backside attack",
            "secondary_substrate": "Check NGP! π or n participation within 2-3 atoms gives 10^3-10^14 boost",
            "tertiary_substrate": "SN1 - Rate = k[RX], Racemization, NGP → 10^6-10^14 rate increase"
        }
    },
    "NGP_detection_rules": {
        "pi_participation": {
            "rate_boost": "10^6 to 10^14 times faster",
            "groups": ["C=C (allylic)", "benzene (benzylic)", "C≡C (propargylic)"]
        },
        "n_participation": {
            "rate_boost": "10^3 to 10^11 times faster",
            "groups": ["-OR", "-NR2", "-SR", "-OCOR"]
        }
    },
    "common_jee_traps": {
        "trap_1_NGP_missed": "Always check within 2-3 atoms for π-bonds or lone pairs",
        "trap_2_rate_magnitude": "Must know HOW MUCH faster (10^X)",
        "trap_3_acetal_definition": "R2C(OR')2 - TWO OR on SAME carbon only"
    }
}

# ============================================================================
# CACHE FUNCTIONS
# ============================================================================

def load_chemistry_cache():
    global chemistry_knowledge_base
    try:
        with open(CHEMISTRY_CACHE_FILE, 'r') as f:
            chemistry_knowledge_base = json.load(f)
        logger.info(f"📂 Loaded cache: {len(chemistry_knowledge_base)} sections")
        return True
    except:
        return False

def save_chemistry_cache():
    try:
        os.makedirs(os.path.dirname(CHEMISTRY_CACHE_FILE), exist_ok=True)
        with open(CHEMISTRY_CACHE_FILE, 'w') as f:
            json.dump(chemistry_knowledge_base, f, indent=2)
        logger.info(f"💾 Saved cache: {len(chemistry_knowledge_base)} sections")
    except Exception as e:
        logger.error(f"⚠️ Cache save error: {e}")

async def download_chemistry_knowledge():
    global chemistry_knowledge_base

    if chemistry_knowledge_base:
        return chemistry_knowledge_base

    logger.info("🌐 Downloading chemistry knowledge from GitHub...")
    downloaded = {}

    try:
        async with aiohttp.ClientSession() as session:
            for name, url in CHEMISTRY_KNOWLEDGE_SOURCES.items():
                try:
                    async with session.get(url, timeout=30) as response:
                        if response.status == 200:
                            data = await response.json()
                            downloaded[name] = data
                            if isinstance(data, list):
                                logger.info(f"✅ {name}: {len(data)} entries")
                        else:
                            logger.info(f"⚠️ {name}: HTTP {response.status}")
                except Exception as e:
                    logger.info(f"⚠️ {name}: {str(e)[:50]}")
                await asyncio.sleep(0.5)

        downloaded["jee_advanced_logic"] = JEE_ADVANCED_LOGIC
        chemistry_knowledge_base = downloaded
        save_chemistry_cache()
        logger.info(f"✅ Downloaded! Total: {len(chemistry_knowledge_base)} sections")

    except Exception as e:
        logger.error(f"❌ Download error: {e}")
        chemistry_knowledge_base = {"jee_advanced_logic": JEE_ADVANCED_LOGIC}

    return chemistry_knowledge_base

# ============================================================================
# PROMPT BUILDING
# ============================================================================

def build_enhanced_chemistry_prompt():
    knowledge_summary = ""

    if chemistry_knowledge_base:
        knowledge_summary = "\n🔬 INTEGRATED CHEMISTRY KNOWLEDGE BASE:\n"
        knowledge_summary += "═" * 70 + "\n"
        for section, data in chemistry_knowledge_base.items():
            if section != "jee_advanced_logic":
                if isinstance(data, list):
                    knowledge_summary += f"📚 {section}: {len(data)} entries\n"
        knowledge_summary += "═" * 70 + "\n"

    return f"""You are THE ULTIMATE CHEMISTRY EXPERT with complete chemical knowledge.

{knowledge_summary}

JEE ADVANCED LOGIC:
{json.dumps(JEE_ADVANCED_LOGIC, indent=2)}

CORE MECHANISMS:
1. SN1: R-X → R+ + X-, Rate = k[R-X], Racemization, NGP boost: 10^3-10^14×
2. SN2: Nu- + R-X → Nu-R + X-, Rate = k[Nu][R-X], Inversion, 180° attack
3. NGP: π-participation (10^6-10^14×), n-participation (10^3-10^11×)
4. E1/E2: Anti-periplanar, Zaitsev (or Hofmann with bulky base)

TRIPLE-STRATEGY ANALYSIS:

STRATEGY 1 - SYSTEMATIC:
Step 1: Observe image, list molecules, options
Step 2: Compare features (carbons, groups, leaving groups, NGP?)
Step 3: Test each option mechanism
Step 4: Eliminate impossible
Step 5: Deep analysis of remaining
Step 6: Verify against JEE traps
ANSWER: Option [?], Confidence: [?]%

STRATEGY 2 - MS CHOUHAN:
Find THE ONE KEY DIFFERENCE between molecules
Quantify rate effect: 10^X because [reason]
ANSWER: Option [?], Confidence: [?]%

STRATEGY 3 - PAULA BRUICE:
Orbital analysis, complete mechanism, Hammond postulate
ANSWER: Option [?], Confidence: [?]%

FINAL SYNTHESIS:
Agreement? [YES/NO]
JEE Trap Check: [verify]
ULTIMATE ANSWER: Option ([Letter])
ONE-SENTENCE REASON: [clear explanation]
FINAL CONFIDENCE: [90-100%]

FORMATTING: Use _X for subscripts, ^X for superscripts, -> for arrows
BEGIN ANALYSIS:"""

# ============================================================================
# IMAGE ENHANCEMENT
# ============================================================================

async def enhance_image(image_bytes):
    try:
        img = Image.open(BytesIO(image_bytes))
        if img.mode != 'RGB':
            if img.mode == 'RGBA':
                bg = Image.new('RGB', img.size, (255, 255, 255))
                bg.paste(img, mask=img.split()[3])
                img = bg
            else:
                img = img.convert('RGB')

        if max(img.size) > 2048:
            ratio = 2048 / max(img.size)
            new_size = tuple(int(dim * ratio) for dim in img.size)
            img = img.resize(new_size, Image.Resampling.LANCZOS)

        img = ImageEnhance.Contrast(img).enhance(1.3)
        img = ImageEnhance.Sharpness(img).enhance(1.2)
        img = ImageEnhance.Brightness(img).enhance(1.1)

        output = BytesIO()
        img.save(output, format='JPEG', quality=98)
        return output.getvalue()
    except Exception as e:
        logger.error(f"Enhancement failed: {e}")
        return image_bytes

# ============================================================================
# GEMINI API
# ============================================================================

async def call_gemini(image_bytes, user_question=""):
    global current_key_index

    image_bytes = await enhance_image(image_bytes)
    img = Image.open(BytesIO(image_bytes))
    if img.mode != 'RGB':
        img = img.convert('RGB')

    output = BytesIO()
    img.save(output, format='JPEG', quality=98)
    b64 = base64.b64encode(output.getvalue()).decode('utf-8')

    prompt = build_enhanced_chemistry_prompt()
    if user_question:
        prompt = f"Context: {user_question}\n\n" + prompt

    for attempt in range(len(GEMINI_API_KEYS)):
        try:
            api_key = GEMINI_API_KEYS[current_key_index]
            logger.info(f"Using API Key #{current_key_index + 1}")

            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={api_key}"

            payload = {
                "contents": [{
                    "parts": [
                        {"text": prompt},
                        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
                    ]
                }],
                "generationConfig": {
                    "temperature": 0.05,
                    "topP": 0.9,
                    "topK": 30,
                    "maxOutputTokens": 8192,
                },
                "safetySettings": [
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"}
                ]
            }

            async with httpx.AsyncClient(timeout=300.0) as client:
                resp = await client.post(url, json=payload)

                if resp.status_code != 200:
                    raise Exception(f"API Error {resp.status_code}: {resp.text[:200]}")

                result = resp.json()
                solution = result['candidates'][0]['content']['parts'][0]['text']
                logger.info(f"✅ Solution generated ({len(solution)} chars)")
                return solution

        except Exception as e:
            logger.error(f"❌ Key #{current_key_index + 1} failed: {str(e)[:200]}")
            current_key_index = (current_key_index + 1) % len(GEMINI_API_KEYS)
            if attempt < len(GEMINI_API_KEYS) - 1:
                await asyncio.sleep(3)
                continue
            raise

# ============================================================================
# PDF GENERATION
# ============================================================================

LIGHT_MODE_CSS = """
@page {
    size: A4;
    margin: 2cm;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Helvetica', 'Arial', sans-serif;
    font-size: 11pt;
    line-height: 1.6;
    color: #1a1a1a;
    background: white;
}

.page {
    padding: 20px;
}

.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 30px;
}

.header h1 {
    font-size: 24pt;
    font-weight: bold;
    margin-bottom: 8px;
}

.header .subtitle {
    font-size: 11pt;
    opacity: 0.9;
}

.header .meta {
    margin-top: 12px;
    padding-top: 12px;
    border-top: 1px solid rgba(255,255,255,0.3);
    font-size: 9pt;
}

.section {
    margin: 25px 0;
    page-break-inside: avoid;
}

.section-title {
    font-size: 15pt;
    font-weight: bold;
    color: #667eea;
    margin-bottom: 12px;
    padding-bottom: 6px;
    border-bottom: 3px solid #667eea;
}

.subsection-title {
    font-size: 12pt;
    font-weight: bold;
    color: #2c3e50;
    margin: 15px 0 10px 0;
    border-left: 4px solid #667eea;
    padding-left: 10px;
}

.strategy-box {
    background: #f8f9fa;
    border-left: 5px solid #667eea;
    padding: 20px;
    margin: 20px 0;
    border-radius: 6px;
    page-break-inside: avoid;
}

.strategy-header {
    font-size: 13pt;
    font-weight: bold;
    color: #667eea;
    margin-bottom: 12px;
}

.answer-box {
    background: #e7f3ff;
    border: 3px solid #2196F3;
    padding: 20px;
    border-radius: 10px;
    margin: 25px 0;
    page-break-inside: avoid;
}

.answer-label {
    font-size: 10pt;
    font-weight: bold;
    color: #1976D2;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 6px;
}

.answer-content {
    font-size: 12pt;
    font-weight: bold;
    color: #0d47a1;
}

.confidence {
    display: inline-block;
    background: #4CAF50;
    color: white;
    padding: 4px 12px;
    border-radius: 15px;
    font-size: 9pt;
    font-weight: bold;
    margin-left: 8px;
}

.formula {
    font-family: 'Courier New', monospace;
    background: #f5f5f5;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10pt;
}

.step {
    background: white;
    border: 2px solid #e0e0e0;
    padding: 15px;
    margin: 12px 0;
    border-radius: 6px;
    page-break-inside: avoid;
}

.success-box {
    background: #d4edda;
    border-left: 4px solid #28a745;
    padding: 12px 15px;
    margin: 12px 0;
    border-radius: 4px;
}

.footer {
    margin-top: 40px;
    padding-top: 15px;
    border-top: 2px solid #e0e0e0;
    text-align: center;
    font-size: 9pt;
    color: #666;
    font-style: italic;
}

p {
    margin: 8px 0;
}

ul, ol {
    margin: 12px 0;
    padding-left: 25px;
}

li {
    margin: 6px 0;
}

strong {
    font-weight: bold;
    color: #2c3e50;
}
"""

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chemistry Analysis Report</title>
</head>
<body>
    <div class="page">
        <div class="header">
            <h1>🔬 Ultimate Chemistry Analysis</h1>
            <div class="subtitle">Triple-Strategy Knowledge-Enhanced Solution</div>
            <div class="meta">
                <div>📅 {{ date }}</div>
                <div>⚡ Maximum Accuracy Mode</div>
            </div>
        </div>

        {{ content }}

        <div class="footer">
            <p>Generated by Ultimate Chemistry Bot | Powered by GitHub Knowledge Base + Gemini AI</p>
            <p>MS Chouhan Method • Paula Bruice Principles • JEE Advanced Logic</p>
        </div>
    </div>
</body>
</html>
"""

def format_chemistry_html(text):
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    text = re.sub(r'_(\d+)', r'<sub>\1</sub>', text)
    text = re.sub(r'\^(\d+)', r'<sup>\1</sup>', text)
    text = re.sub(r'\^(\+|-)', r'<sup>\1</sup>', text)
    text = text.replace('-&gt;', '→').replace('=&gt;', '⇒')
    text = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'__(.+?)__', r'<strong>\1</strong>', text)
    return text

def parse_solution_to_html(solution_text):
    lines = solution_text.split('\n')
    html_parts = []
    in_strategy = False
    strategy_content = []
    in_list = False
    
    for line in lines:
        line = line.strip()
        
        if not line or line in ['***', '---', '═'*70, '━'*70]:
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            continue
        
        if line.startswith(('Answering as', 'Here is', 'BEGIN ANALYSIS')):
            continue
        
        if 'STRATEGY' in line.upper():
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            if strategy_content:
                content = '\n'.join(strategy_content[1:])
                html_parts.append(
                    f'<div class="strategy-box">'
                    f'<div class="strategy-header">{format_chemistry_html(strategy_content[0])}</div>'
                    f'{content}'
                    f'</div>'
                )
                strategy_content = []
            in_strategy = True
            strategy_content.append(line)
            continue
        
        if in_strategy:
            if line.startswith('ANSWER:') or 'Confidence:' in line:
                formatted = format_chemistry_html(line)
                strategy_content.append(f'<p><strong>{formatted}</strong></p>')
                if 'Confidence:' in line:
                    in_strategy = False
                    content = '\n'.join(strategy_content[1:])
                    html_parts.append(
                        f'<div class="strategy-box">'
                        f'<div class="strategy-header">{format_chemistry_html(strategy_content[0])}</div>'
                        f'{content}'
                        f'</div>'
                    )
                    strategy_content = []
            else:
                strategy_content.append(f'<p>{format_chemistry_html(line)}</p>')
            continue
        
        if 'ULTIMATE ANSWER' in line or 'FINAL ANSWER' in line:
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            answer_match = re.search(r'Option\s*\(([A-D])\)', line, re.IGNORECASE)
            if answer_match:
                option = answer_match.group(1)
                html_parts.append(
                    f'<div class="answer-box">'
                    f'<div class="answer-label">✅ Final Answer</div>'
                    f'<div class="answer-content">Option ({option})</div>'
                    f'</div>'
                )
            continue
        
        if 'ONE-SENTENCE REASON' in line:
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            reason = line.split(':', 1)[1].strip() if ':' in line else line
            html_parts.append(
                f'<div class="success-box">'
                f'<strong>Explanation:</strong> {format_chemistry_html(reason)}'
                f'</div>'
            )
            continue
        
        if 'FINAL CONFIDENCE' in line or line.startswith('Confidence:'):
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            conf_match = re.search(r'(\d+)%', line)
            if conf_match:
                confidence = conf_match.group(1)
                html_parts.append(
                    f'<p><strong>Confidence:</strong> '
                    f'<span class="confidence">{confidence}%</span></p>'
                )
            continue
        
        if line.isupper() or re.match(r'^[A-Z\s]+:', line):
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            html_parts.append(f'<h2 class="section-title">{format_chemistry_html(line)}</h2>')
            continue
        
        if line.startswith('Step '):
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            html_parts.append(
                f'<div class="step">'
                f'<strong>{format_chemistry_html(line)}</strong>'
                f'</div>'
            )
            continue
        
        if line.startswith(('• ', '* ', '- ', '◦ ')):
            clean = line[2:].strip()
            if not in_list:
                html_parts.append('<ul>')
                in_list = True
            html_parts.append(f'<li>{format_chemistry_html(clean)}</li>')
            continue
        
        if len(line) > 10:
            if in_list:
                html_parts.append('</ul>')
                in_list = False
            html_parts.append(f'<p>{format_chemistry_html(line)}</p>')
    
    if in_list:
        html_parts.append('</ul>')
    
    return '\n'.join(html_parts)

def get_pdf_css(mode='light'):
    """Get CSS based on mode"""
    if mode == 'dark':
        return DARK_MODE_CSS
    else:
        return LIGHT_MODE_CSS

def create_beautiful_pdf(solution_text, mode='light'):
    try:
        content_html = parse_solution_to_html(solution_text)
        
        template = Template(HTML_TEMPLATE)
        html_output = template.render(
            content=content_html,
            date=datetime.now().strftime('%B %d, %Y at %I:%M %p')
        )
        
        css = get_pdf_css(mode)
        
        full_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
            {css}
            </style>
        </head>
        <body>
        {html_output}
        </body>
        </html>
        """
        
        pdf_buffer = BytesIO()
        html = HTML(string=full_html)
        html.write_pdf(pdf_buffer)
        pdf_buffer.seek(0)
        return pdf_buffer
        
    except Exception as e:
        logger.error(f"PDF generation error: {e}")
        raise

# ============================================================================
# FEEDBACK HANDLERS
# ============================================================================

def create_feedback_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("⭐ 1", callback_data="rate_1"),
            InlineKeyboardButton("⭐ 2", callback_data="rate_2"),
            InlineKeyboardButton("⭐ 3", callback_data="rate_3"),
            InlineKeyboardButton("⭐ 4", callback_data="rate_4"),
            InlineKeyboardButton("⭐ 5", callback_data="rate_5"),
        ],
        [
            InlineKeyboardButton("⭐ 6", callback_data="rate_6"),
            InlineKeyboardButton("⭐ 7", callback_data="rate_7"),
            InlineKeyboardButton("⭐ 8", callback_data="rate_8"),
            InlineKeyboardButton("⭐ 9", callback_data="rate_9"),
            InlineKeyboardButton("⭐ 10", callback_data="rate_10"),
        ],
        [
            InlineKeyboardButton("💬 Add Comment", callback_data="add_comment"),
            InlineKeyboardButton("❌ Skip", callback_data="skip_feedback"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def request_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_feedback_keyboard()
    
    await update.message.reply_text(
        "⭐ *How was this solution?*\n\n"
        "Rate 1-10 so I can improve! 😊\n"
        "_Your feedback helps make me better!_",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def handle_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    rating = query.data.replace("rate_", "")
    user = query.from_user
    username = user.username or "Unknown"
    user_id = user.id
    
    context.user_data['rating'] = rating
    context.user_data['awaiting_feedback_comment'] = True
    
    track_feedback(rating)
    
    await query.edit_message_text(
        f"✅ *You rated: {rating}/10*\n\n"
        f"Want to add a comment? (Optional)\n"
        f"Just type your feedback, or press /skip\n\n"
        f"_Thank you! 🙏_",
        parse_mode='Markdown'
    )
    
    await notify_feedback(user_id, username, rating, None, context)

async def handle_comment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['awaiting_feedback_comment'] = True
    
    await query.edit_message_text(
        "💬 *Please type your feedback:*\n\n"
        "Share your thoughts about the solution!\n"
        "Or press /skip to finish.\n\n"
        "_Your input helps me improve!_ 😊",
        parse_mode='Markdown'
    )

async def handle_skip_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "👍 *Thanks anyway!*\n\n"
        "Send me another problem anytime! 📸",
        parse_mode='Markdown'
    )

# ============================================================================
# PDF MODE HANDLERS
# ============================================================================

def create_mode_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("☀️ Light Mode", callback_data="mode_light"),
            InlineKeyboardButton("🌙 Dark Mode", callback_data="mode_dark"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def ask_pdf_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if get_user_preference(user_id, 'asked_mode', False):
        return get_user_preference(user_id, 'pdf_mode', 'light')
    
    keyboard = create_mode_keyboard()
    
    await update.message.reply_text(
        "🎨 *Choose PDF Style:*\n\n"
        "☀️ *Light Mode* - Classic white background\n"
        "🌙 *Dark Mode* - Easy on eyes for night study\n\n"
        "_You can change this anytime with /settings_",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    return None

async def handle_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    mode = query.data.replace("mode_", "")
    
    set_user_preference(user_id, 'pdf_mode', mode)
    set_user_preference(user_id, 'asked_mode', True)
    
    emoji = "☀️" if mode == "light" else "🌙"
    await query.edit_message_text(
        f"{emoji} *PDF Mode Set: {mode.title()}*\n\n"
        f"All PDFs will now use {mode} mode!\n"
        f"_Change anytime with /settings_",
        parse_mode='Markdown'
    )

# ============================================================================
# BOT COMMAND HANDLERS
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    if await check_maintenance(update, context):
        return
    
    if is_banned(user_id):
        await update.message.reply_text(
            "⛔ You have been banned from using this bot.\n"
            "Contact admin if you think this is a mistake."
        )
        return
    
    is_new = track_new_user(user_id, username)
    if is_new:
        await notify_new_user(user_id, username, context)
    
    status = "✅ Loaded" if chemistry_knowledge_base else "⏳ Loading..."
    await update.message.reply_text(
        f"🔬 *ULTIMATE CHEMISTRY BOT - PHASE 2*\n\n"
        f"Triple-Strategy | 98-99% Accuracy\n"
        f"📚 GitHub Knowledge: {status}\n\n"
        f"*CORE FEATURES:*\n"
        f"📸 Problem solving with PDF\n"
        f"💬 Text queries (instant answers)\n"
        f"🌙 Dark mode support\n\n"
        f"*PHASE 2 TOOLS:*\n"
        f"🧬 /molecule - 3D molecules\n"
        f"🗺️ /conceptmap - Concept maps\n"
        f"💡 /hint - Progressive hints\n"
        f"🃏 /flashcard - Study flashcards\n"
        f"📝 /mocktest - Practice tests\n"
        f"🎯 /difficulty - Predict level\n"
        f"🔢 /pka - pKa estimates\n"
        f"📊 /jeefrequency - Topic stats\n\n"
        f"*COMMANDS:*\n"
        f"/help - How to use\n"
        f"/settings - PDF mode & more\n"
        f"/donate - Support the bot ❤️\n\n"
        f"_MS Chouhan + Bruice + GitHub DB_",
        parse_mode='Markdown'
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "📖 *HOW TO USE*\n\n"
        "*For Problem Solving:*\n"
        "1️⃣ Send clear photo 📸\n"
        "2️⃣ Wait 3-8 minutes ⏱️\n"
        "3️⃣ Receive PDF solution 📄\n\n"
        "*For Quick Questions:*\n"
        "💬 Just type your question!\n"
        "Example: \"What is SN1?\"\n"
        "Get instant 2-3 line answers!\n\n"
        "*Phase 2 Tools:*\n"
        "🧬 /molecule CH4 - 3D visualization\n"
        "🗺️ /conceptmap SN1 - Mind maps\n"
        "💡 /hint - Progressive hints\n"
        "🃏 /flashcard - Study cards\n"
        "📝 /mocktest - Practice exam\n"
        "🎯 /difficulty - Check level\n"
        "🔢 /pka CH3COOH - Estimate\n"
        "📊 /jeefrequency NGP - Stats\n\n"
        "*Commands:*\n"
        "/settings - Change PDF style\n"
        "/donate - Support development\n\n"
        "_Quality over speed!_",
        parse_mode='Markdown'
    )

async def about_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.now() - bot_start_time
    
    await update.message.reply_text(
        f"ℹ️ *ABOUT THIS BOT*\n\n"
        f"🔬 *Ultimate Chemistry Bot*\n"
        f"AI-powered JEE chemistry solver\n\n"
        f"📊 *Stats:*\n"
        f"• Users: {len(all_users)}\n"
        f"• Problems solved: {total_problems_solved}\n"
        f"• Uptime: {uptime.days}d {uptime.seconds//3600}h\n\n"
        f"✨ *Features:*\n"
        f"• Triple-strategy analysis\n"
        f"• 98-99% accuracy target\n"
        f"• Text queries supported\n"
        f"• Dark mode PDFs\n"
        f"• GitHub knowledge base\n"
        f"• Phase 2 tools (visualization, tests)\n\n"
        f"👨‍💻 *Developer:* {ADMIN_USERNAME}\n"
        f"📅 *Version:* Phase 1 + Phase 2\n\n"
        f"_Made with ❤️ for JEE aspirants_",
        parse_mode='Markdown'
    )

async def donate_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if os.path.exists(DONATE_QR_PATH):
            with open(DONATE_QR_PATH, 'rb') as qr_file:
                await update.message.reply_photo(
                    photo=qr_file,
                    caption=(
                        "💖 *Support the Bot!*\n\n"
                        f"Scan the QR code to donate via UPI\n\n"
                        f"Your support helps keep this bot:\n"
                        f"• Free for everyone ✅\n"
                        f"• Running 24/7 ⚡\n"
                        f"• Getting better features 🚀\n\n"
                        f"_Every contribution matters! 🙏_\n\n"
                        f"Thank you for your support!\n"
                        f"- {ADMIN_USERNAME}"
                    ),
                    parse_mode='Markdown'
                )
        elif DONATE_QR_BASE64:
            qr_bytes = base64.b64decode(DONATE_QR_BASE64)
            await update.message.reply_photo(
                photo=BytesIO(qr_bytes),
                caption=(
                    "💖 *Support the Bot!*\n\n"
                    f"Scan the QR code to donate via UPI\n\n"
                    f"Your support helps keep this bot:\n"
                    f"• Free for everyone ✅\n"
                    f"• Running 24/7 ⚡\n"
                    f"• Getting better features 🚀\n\n"
                    f"_Every contribution matters! 🙏_\n\n"
                    f"Thank you for your support!\n"
                    f"- {ADMIN_USERNAME}"
                ),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "💖 *Support the Bot!*\n\n"
                "Thank you for wanting to support!\n"
                f"Contact: {ADMIN_USERNAME}\n\n"
                "_QR code coming soon!_",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Donate command error: {e}")
        await update.message.reply_text(
            "💖 *Support the Bot!*\n\n"
            "Thank you for your interest!\n"
            f"Contact: {ADMIN_USERNAME}",
            parse_mode='Markdown'
        )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_mode = get_user_preference(user_id, 'pdf_mode', 'light')
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"{'✅' if current_mode == 'light' else '◻️'} Light Mode", 
                callback_data="mode_light"
            ),
            InlineKeyboardButton(
                f"{'✅' if current_mode == 'dark' else '◻️'} Dark Mode", 
                callback_data="mode_dark"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    emoji = "☀️" if current_mode == "light" else "🌙"
    
    await update.message.reply_text(
        f"⚙️ *Settings*\n\n"
        f"*PDF Mode:* {emoji} {current_mode.title()}\n"
        f"*Response Style:* Concise (2-3 lines)\n\n"
        f"_Tap to change PDF mode:_",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not chemistry_knowledge_base:
        await update.message.reply_text("⏳ Not loaded yet. Send a problem first!")
        return

    stats = "📊 *KNOWLEDGE BASE*\n\n"
    for section, data in chemistry_knowledge_base.items():
        if section == "jee_advanced_logic":
            stats += "🎯 JEE Logic: ✅\n"
        elif isinstance(data, list):
            stats += f"📚 {section}: {len(data)} entries\n"
    stats += f"\n✅ Fully operational"
    await update.message.reply_text(stats, parse_mode='Markdown')

async def skip_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_feedback_comment'):
        context.user_data['awaiting_feedback_comment'] = False
        await update.message.reply_text(
            "👍 *Feedback skipped!*\n\nSend me another problem anytime! 📸",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "Nothing to skip right now!",
            parse_mode='Markdown'
        )

# ============================================================================
# PHOTO HANDLER
# ============================================================================

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    if await check_maintenance(update, context):
        return
    
    if is_banned(user_id):
        await update.message.reply_text("⛔ You are banned from using this bot.")
        return
    
    try:
        pdf_mode = get_user_preference(user_id, 'pdf_mode')
        if not pdf_mode or not get_user_preference(user_id, 'asked_mode', False):
            result = await ask_pdf_mode(update, context)
            if result is None:
                return
            pdf_mode = result
        
        status = await update.message.reply_text(
            "🔬 *ANALYSIS STARTED*\n\n📸 Image received\n🌐 Loading knowledge...\n\n_Please wait..._",
            parse_mode='Markdown'
        )

        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        img_bytes = await file.download_as_bytearray()
        user_question = update.message.caption or ""

        start_time = time.time()

        if not chemistry_knowledge_base:
            await status.edit_text(
                "🔬 *ANALYSIS STARTED*\n\n📥 Downloading knowledge base...\n⏱️ 30-60 seconds first time\n\n_Building logic..._",
                parse_mode='Markdown'
            )
            await download_chemistry_knowledge()

        await status.edit_text(
            "🔬 *ANALYSIS IN PROGRESS*\n\n✅ Knowledge loaded\n🧠 Running triple-strategy...\n⏱️ 2-5 min remaining\n\n_Analyzing..._",
            parse_mode='Markdown'
        )

        solution = await call_gemini(bytes(img_bytes), user_question)
        elapsed = int(time.time() - start_time)

        await status.edit_text(
            f"✅ *COMPLETE*\n\n⏱️ Time: {elapsed}s\n📄 Generating PDF...",
            parse_mode='Markdown'
        )

        pdf_mode = get_user_preference(user_id, 'pdf_mode', 'light')
        pdf = create_beautiful_pdf(solution, pdf_mode)
        filename = f"Chem_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"

        await update.message.reply_document(
            document=pdf,
            filename=filename,
            caption=f"✅ *Analysis complete!*\n⏱️ {elapsed}s\n🎯 Maximum accuracy\n📚 Knowledge-enhanced",
            parse_mode='Markdown'
        )

        await status.delete()
        
        track_problem_solved(user_id)
        await request_feedback(update, context)
        await notify_problem_solved(user_id, username, elapsed, context, BytesIO(img_bytes))
        
        logger.info(f"✅ Delivered in {elapsed}s to {username}")

    except Exception as e:
        logger.error(f"Error in handle_photo: {e}", exc_info=True)
        await notify_error(str(e), context)
        await update.message.reply_text(
            f"❌ Error: {str(e)[:150]}\n\nRetry with clearer image.",
            parse_mode='Markdown'
        )

# ============================================================================
# TEXT HANDLER
# ============================================================================

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    text = update.message.text
    
    if await check_maintenance(update, context):
        return
    
    if is_banned(user_id):
        return
    
    if context.user_data.get('awaiting_feedback_comment'):
        feedback_data = await collect_feedback_comment(text, update, context)
        if feedback_data:
            await notify_feedback(
                feedback_data['user_id'],
                feedback_data['username'],
                feedback_data['rating'],
                feedback_data['comment'],
                context
            )
        return
    
    handled = await handle_detailed_request(text, update, context)
    if handled:
        return
    
    result = await handle_text_query(text, update, context)
    
    if result == "spam_detected":
        is_spam, spam_type, count = detect_spam(user_id, text)
        if is_spam:
            recent_msgs = [msg for ts, msg in user_message_history[user_id][-10:]]
            await notify_spam_detected(user_id, username, spam_type, count, recent_msgs, context)
    
    elif result == "answered":
        track_text_query(user_id)

# ============================================================================
# CALLBACK HANDLERS (MERGED PHASE 1 + PHASE 2)
# ============================================================================

async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    # Phase 1: Feedback callbacks
    if data.startswith('rate_'):
        await handle_rating_callback(update, context)
    
    elif data == 'add_comment':
        await handle_comment_callback(update, context)
    
    elif data == 'skip_feedback':
        await handle_skip_callback(update, context)
    
    # Phase 1: PDF mode callbacks
    elif data.startswith('mode_'):
        await handle_mode_callback(update, context)
    
    # Phase 2: Hint callbacks
    elif data.startswith('hint_'):
        if data == 'hint_next':
            await handle_hint_next(update, context)
        elif data == 'hint_stop':
            await handle_hint_stop(update, context)
        elif data == 'hint_reset':
            await handle_hint_reset(update, context)
    
    # Phase 2: Flashcard callbacks
    elif data.startswith('flashcard_'):
        topic = data.replace('flashcard_', '')
        await handle_flashcard_topic(update, context, topic)
    
    # Phase 2: Theme callbacks
    elif data.startswith('theme_'):
        theme = data.replace('theme_', '')
        await handle_theme_selection(update, context, theme)
    
    # Phase 2: Mock test callbacks
    elif data == 'mock_config_start':
        await start_mock_test_config(update, context)
    
    elif data.startswith('mock_q_'):
        count = int(data.replace('mock_q_', ''))
        await handle_question_count(update, context, count)
    
    elif data.startswith('mock_t_'):
        time_key = data.replace('mock_t_', '')
        await handle_time_limit(update, context, time_key)
    
    elif data.startswith('mock_d_'):
        difficulty = data.replace('mock_d_', '')
        await handle_difficulty_selection(update, context, difficulty)
    
    elif data.startswith('mock_ans_'):
        parts = data.split('_')
        q_num = int(parts[2])
        answer = parts[3]
        await handle_answer(update, context, q_num, answer)

# ============================================================================
# PHASE 2 COMMAND WRAPPERS
# ============================================================================

async def molecule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text(
            "🧬 *3D MOLECULE VIEWER*\n\n"
            "Usage: `/molecule <formula>`\n\n"
            "*Examples:*\n"
            "/molecule CH4\n"
            "/molecule C6H6\n"
            "/molecule CH3CH2OH\n\n"
            "_Interactive Three.js visualization!_",
            parse_mode='Markdown'
        )
        return
    
    formula = ''.join(context.args)
    await visualize_molecule_command(update, context, formula)

async def conceptmap_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text(
            "🗺️ *CONCEPT MAP*\n\n"
            "Usage: `/conceptmap <topic>`\n\n"
            "*Examples:*\n"
            "/conceptmap SN1\n"
            "/conceptmap NGP\n"
            "/conceptmap E2\n\n"
            "_Interactive D3.js mind map!_",
            parse_mode='Markdown'
        )
        return
    
    topic = ' '.join(context.args)
    await visualize_concept_map_command(update, context, topic)

async def difficulty_analyze_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await phase2_difficulty(update, context)
    else:
        text = ' '.join(context.args)
        await analyze_difficulty_text(update, context, text)

async def pka_analyze_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await pka_command(update, context)
    else:
        molecule = ' '.join(context.args)
        await analyze_pka_text(update, context, molecule)

async def jeefreq_analyze_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await jee_frequency_command(update, context)
    else:
        topic = ' '.join(context.args)
        await analyze_jee_frequency_text(update, context, topic)

# ============================================================================
# STARTUP ROUTINE
# ============================================================================

async def startup_routine():
    logger.info("=" * 70)
    logger.info("🔬 ULTIMATE CHEMISTRY BOT - PHASE 1 + PHASE 2 STARTUP")
    logger.info("=" * 70)
    logger.info("📂 Checking cache...")

    if not load_chemistry_cache():
        logger.info("🌐 Downloading from GitHub...")
        await download_chemistry_knowledge()
    else:
        logger.info("✅ Using cached knowledge")

    logger.info("=" * 70)
    logger.info(f"✅ Sections: {len(chemistry_knowledge_base)}")
    logger.info(f"✅ API Keys: {len(GEMINI_API_KEYS)}")
    logger.info(f"✅ Admin ID: {ADMIN_ID}")
    logger.info(f"✅ Admin Username: {ADMIN_USERNAME}")
    logger.info(f"✅ Model: Gemini 2.0 Flash Exp")
    logger.info(f"✅ Phase: 1 + 2 Complete")
    logger.info("=" * 70)

# ============================================================================
# MAIN
# ============================================================================

def main():
    print("=" * 70)
    print("🔬 ULTIMATE CHEMISTRY BOT - PHASE 1 + PHASE 2 COMPLETE")
    print("   All Features: Text, Feedback, Dark Mode, Admin, Visualization")
    print("   Mock Tests, Predictors, Hints, Flashcards")
    print("=" * 70)

    app = Application.builder().token(BOT_TOKEN).build()
    
    # Core commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("about", about_cmd))
    app.add_handler(CommandHandler("donate", donate_cmd))
    app.add_handler(CommandHandler("settings", settings_command))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("skip", skip_cmd))
    
    # Phase 1: Admin commands
    app.add_handler(CommandHandler("admin_ban", admin_ban_command))
    app.add_handler(CommandHandler("admin_unban", admin_unban_command))
    app.add_handler(CommandHandler("admin_stats", admin_stats_command))
    app.add_handler(CommandHandler("admin_maintenance", admin_maintenance_command))
    app.add_handler(CommandHandler("admin_broadcast", admin_broadcast_command))
    app.add_handler(CommandHandler("admin_users", admin_users_command))
    app.add_handler(CommandHandler("admin_warn", admin_warn_command))
    app.add_handler(CommandHandler("admin_ignore", admin_ignore_command))
    app.add_handler(CommandHandler("admin_help", admin_help_command))
    
    # Phase 2: Visualization commands
    app.add_handler(CommandHandler("molecule", molecule_cmd))
    app.add_handler(CommandHandler("conceptmap", conceptmap_cmd))
    
    # Phase 2: Learning tools
    app.add_handler(CommandHandler("hint", phase2_hint))
    app.add_handler(CommandHandler("flashcard", phase2_flashcard))
    app.add_handler(CommandHandler("theme", phase2_theme))
    
    # Phase 2: Exam tools
    app.add_handler(CommandHandler("mocktest", mock_test_command))
    app.add_handler(CommandHandler("difficulty", difficulty_analyze_cmd))
    app.add_handler(CommandHandler("pka", pka_analyze_cmd))
    app.add_handler(CommandHandler("jeefrequency", jeefreq_analyze_cmd))
    
    # Unified callback handler (Phase 1 + Phase 2)
    app.add_handler(CallbackQueryHandler(handle_callbacks))
    
    # Message handlers
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Run startup
    loop = asyncio.get_event_loop()
    loop.run_until_complete(startup_routine())

    print("✅ Bot ready with ALL Phase 1 + Phase 2 features!")
    print("=" * 70)
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n👋 Stopped")
        print("💾 Knowledge cached!")
    except Exception as e:
        logger.error(f"\n🚨 FATAL: {e}", exc_info=True)
