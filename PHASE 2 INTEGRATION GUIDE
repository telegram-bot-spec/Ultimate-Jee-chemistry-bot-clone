# üöÄ PHASE 2 INTEGRATION GUIDE

Complete step-by-step guide to integrate Phase 2 features into your bot.

---

## üìã WHAT YOU HAVE

### Existing Files:
- ‚úÖ `ULTIMATE_JE.py` - Your working bot (KEEP THIS!)
- ‚úÖ `phase1_features.py` - Text queries, feedback, dark mode
- ‚úÖ `phase1_admin.py` - Admin tools, notifications

### Phase 2 Files to Add:
- ‚úÖ `phase2_exam.py` - Mock tests (rename from .txt)
- ‚úÖ `phase2_visualizer.py` - 3D molecules, concept maps (rename from .txt)
- ‚úÖ `phase2_features.py` - Hints, flashcards, themes (NEW)
- ‚úÖ `phase2_predictors.py` - Difficulty, pKa predictors (NEW)

---

## üîß STEP 1: RENAME FILES

```bash
# In your project directory:
mv phase2_exam.txt phase2_exam.py
mv phase2_visualizer.txt phase2_visualizer.py
```

---

## üì¶ STEP 2: UPDATE REQUIREMENTS

Add to your `requirements.txt`:

```txt
# Phase 2 additions
pillow>=10.0.0          # Flashcard generation
matplotlib>=3.7.0       # Optional: for future animations
networkx>=3.1          # Concept maps
```

Install:
```bash
pip install -r requirements.txt
```

---

## üéØ STEP 3: CREATE INTEGRATION FILE

Instead of modifying `ULTIMATE_JE.py`, create **`ULTIMATE_JE_PHASE2.py`**:

```python
"""
ULTIMATE CHEMISTRY BOT - PHASE 2 COMPLETE
Integrates all Phase 1 + Phase 2 features

Author: @aryansmilezzz
Admin ID: 6298922725
Version: Phase 2
"""

# ============================================================================
# IMPORTS
# ============================================================================

# Import your existing bot (DO NOT MODIFY ULTIMATE_JE.py!)
from ULTIMATE_JE import *

# Import Phase 1 modules
from phase1_features import *
from phase1_admin import *

# Import Phase 2 modules
from phase2_exam import *
from phase2_visualizer import *
from phase2_features import *
from phase2_predictors import *

# ============================================================================
# ADDITIONAL HANDLERS (Phase 2 commands)
# ============================================================================

def add_phase2_handlers(app):
    """Add Phase 2 command handlers to existing bot"""
    
    # Mock Test Commands
    app.add_handler(CommandHandler("mock_test", mock_test_command))
    
    # Visualizer Commands
    app.add_handler(CommandHandler("3d", visualize_molecule_command))
    app.add_handler(CommandHandler("concept_map", visualize_concept_map_command))
    
    # Feature Commands
    app.add_handler(CommandHandler("hint", hint_command))
    app.add_handler(CommandHandler("flashcard", flashcard_command))
    app.add_handler(CommandHandler("theme", theme_command))
    
    # Predictor Commands
    app.add_handler(CommandHandler("difficulty", difficulty_command))
    app.add_handler(CommandHandler("pka", pka_command))
    app.add_handler(CommandHandler("jee_frequency", jee_frequency_command))
    
    # Phase 2 Callback Handlers
    app.add_handler(CallbackQueryHandler(handle_mock_callbacks, pattern="^mock_"))
    app.add_handler(CallbackQueryHandler(handle_hint_callbacks, pattern="^hint_"))
    app.add_handler(CallbackQueryHandler(handle_flashcard_callbacks, pattern="^flashcard_"))
    app.add_handler(CallbackQueryHandler(handle_theme_callbacks, pattern="^theme_"))
    
    logger.info("‚úÖ Phase 2 handlers added!")

# ============================================================================
# CALLBACK ROUTERS (Phase 2)
# ============================================================================

async def handle_mock_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Route mock test callbacks"""
    query = update.callback_query
    data = query.data
    
    if data == "mock_config_start":
        await start_mock_test_config(update, context)
    elif data.startswith("mock_q_"):
        count = int(data.replace("mock_q_", ""))
        await handle_question_count(update, context, count)
    elif data.startswith("mock_t_"):
        time_key = data.replace("mock_t_", "")
        await handle_time_limit(update, context, time_key)
    elif data.startswith("mock_d_"):
        difficulty = data.replace("mock_d_", "")
        await handle_difficulty_selection(update, context, difficulty)
    elif data.startswith("mock_ans_"):
        parts = data.split("_")
        q_num = int(parts[2])
        answer = parts[3]
        await handle_answer(update, context, q_num, answer)

async def handle_hint_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Route hint callbacks"""
    query = update.callback_query
    data = query.data
    
    if data == "hint_next":
        await handle_hint_next(update, context)
    elif data == "hint_stop":
        await handle_hint_stop(update, context)
    elif data == "hint_reset":
        await handle_hint_reset(update, context)

async def handle_flashcard_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Route flashcard callbacks"""
    query = update.callback_query
    data = query.data
    
    if data.startswith("flashcard_"):
        topic = data.replace("flashcard_", "")
        await handle_flashcard_topic(update, context, topic)

async def handle_theme_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Route theme callbacks"""
    query = update.callback_query
    data = query.data
    
    if data.startswith("theme_"):
        theme = data.replace("theme_", "")
        await handle_theme_selection(update, context, theme)

# ============================================================================
# ENHANCED TEXT HANDLER (Phase 2 additions)
# ============================================================================

async def handle_text_phase2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enhanced text handler with Phase 2 features"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # Check if it's a predictor query
    problem_type = detect_problem_type(text)
    
    if problem_type == "difficulty":
        await analyze_difficulty_text(update, context, text)
    elif problem_type == "pka":
        # Extract molecule name
        molecule = extract_molecule_name(text)
        await analyze_pka_text(update, context, molecule)
    elif problem_type == "jee_frequency":
        # Extract topic
        topic = extract_topic_name(text)
        await analyze_jee_frequency_text(update, context, topic)
    else:
        # Fall back to Phase 1 text handler
        await handle_text(update, context)

def extract_molecule_name(text):
    """Extract molecule name from text"""
    # Remove common words
    text = text.lower().replace("pka", "").replace("of", "").replace("for", "")
    text = text.replace("what is", "").replace("estimate", "").strip()
    return text

def extract_topic_name(text):
    """Extract topic name from text"""
    text = text.lower().replace("jee", "").replace("frequency", "").replace("of", "")
    text = text.replace("how often", "").replace("appears", "").strip()
    return text.upper()

# ============================================================================
# MAIN FUNCTION (Modified to use Phase 2)
# ============================================================================

def main():
    """Run bot with Phase 2 features"""
    print("=" * 70)
    print("üî¨ ULTIMATE CHEMISTRY BOT - PHASE 2")
    print("   Phase 1 + Phase 2 Fully Integrated")
    print("=" * 70)
    
    # Build application (uses your existing ULTIMATE_JE setup)
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Add Phase 2 handlers
    add_phase2_handlers(app)
    
    # Replace text handler with Phase 2 version
    # (Remove existing text handler first if needed)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_phase2))
    
    # Run bot
    print("‚úÖ Bot ready with Phase 2!")
    print("=" * 70)
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Stopped")
    except Exception as e:
        logger.error(f"\nüö® FATAL: {e}", exc_info=True)
```

---

## üéÆ STEP 4: UPDATE PROCFILE

Update your `Procfile` for Railway:

```
web: python ULTIMATE_JE_PHASE2.py
```

---

## ‚úÖ STEP 5: TESTING CHECKLIST

### Phase 1 Features (should still work):
- [ ] `/start` - Welcome message
- [ ] Send image - PDF generation
- [ ] Text queries - Quick answers
- [ ] Feedback - Rating buttons
- [ ] `/settings` - Dark mode toggle
- [ ] Admin commands - All 10 commands

### Phase 2 Features (new):
- [ ] `/mock_test` - Test configuration
- [ ] `/hint` - Progressive hints
- [ ] `/flashcard` - Generate cards
- [ ] `/theme` - PDF themes
- [ ] `/difficulty` - Predict difficulty
- [ ] `/pka` - Estimate pKa
- [ ] `/jee_frequency` - Topic frequency
- [ ] `/3d [formula]` - 3D molecule
- [ ] `/concept_map [topic]` - Mind map

---

## üêõ TROUBLESHOOTING

### Issue: Import errors
```bash
# Make sure all files are in same directory
ls -la phase*.py ULTIMATE_JE*.py

# Check Python can find modules
python3 -c "import phase1_features; import phase2_features"
```

### Issue: Callbacks not working
- Check callback pattern matches in handlers
- Verify `add_phase2_handlers()` is called

### Issue: Commands conflict
- Phase 2 commands should NOT conflict with Phase 1
- If they do, comment out one version

---

## üìä DEPLOYMENT TO RAILWAY

```bash
# 1. Commit new files
git add phase2_*.py ULTIMATE_JE_PHASE2.py requirements.txt Procfile
git commit -m "Phase 2: Complete integration"

# 2. Push to Railway
git push

# 3. Railway auto-deploys
# Check logs for errors
```

---

## üéØ WHAT'S NEW IN PHASE 2

### 1. Mock Test System
- User-configurable questions, time, difficulty
- Real-time timer
- Instant scoring
- Detailed analysis

### 2. Visualizations
- 3D molecules (Three.js, interactive)
- Concept maps (D3.js, draggable)
- Future: Reaction animations

### 3. Smart Features
- 5-level progressive hints
- AI-generated flashcards (colorful!)
- Multiple PDF themes (neon, minimal, notebook)

### 4. Predictors
- Difficulty predictor (easy/medium/hard)
- pKa estimator (functional group based)
- JEE frequency analyzer (historical data)

---

## üí° USAGE EXAMPLES

```
User: /mock_test
Bot: [Shows configuration options]

User: /hint
Bot: üîç Hint 1: Identify substrate type...

User: /flashcard SN1
Bot: [Sends colorful flashcard images]

User: /difficulty [describes problem]
Bot: üî¥ Hard - 8-15 min estimated

User: /pka CH3COOH
Bot: pKa ‚âà 4.8 (Carboxylic acid)

User: /3d CH3CH2OH
Bot: [Sends interactive 3D HTML]
```

---
